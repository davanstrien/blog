<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Daniel van Strien</title>
<link>https://danielvanstrien.xyz/</link>
<atom:link href="https://danielvanstrien.xyz/index.xml" rel="self" type="application/rss+xml"/>
<description>Daniel van Strien&#39;s blog</description>
<generator>quarto-1.5.57</generator>
<lastBuildDate>Wed, 23 Oct 2024 00:00:00 GMT</lastBuildDate>
<item>
  <title>Running a Local Vision Language Model with LM Studio to sort out my screenshot mess</title>
  <dc:creator>Daniel van Strien</dc:creator>
  <link>https://danielvanstrien.xyz/posts/2024/11/local-vision-language-model-lm-studio.html</link>
  <description><![CDATA[ 




<p><em>tl;dr</em> I used a VLM to sort out my screenshot mess using a local VLM.</p>
<p>There are many reasons you might prefer to run a local model, including privacy, speed, cost, or just plain old curiosity.</p>
<p>Running Local Language Models has become increasingly easy over the last year. This is in a huge part thanks to the work of <a href="https://github.com/ggerganov">George Gersonov</a> on <a href="https://github.com/ggerganov/llama.cpp"><code>llama.cpp</code></a>. <code>llama.cpp</code> is used under the hood by a growing number of UI tools like <a href="https://lmstudio.ai/">LM Studio</a>.</p>
<p>Recently LM Studio has added additonal support for running models on Macs with Apple Silicon via <a href="https://github.com/lmstudio-ai/mlx-engine">mlx-engine</a> which uses Apple‚Äôs <a href="https://github.com/ml-explore/mlx">MLX</a> library to accelerate the inference of models on Macs with Apple Silicon. The most recent <a href="https://lmstudio.ai/blog/lmstudio-v0.3.5">release</a> of LM Studio has also added two very exciting features:</p>
<ol type="1">
<li>Headless mode, which allows you to run models without a GUI. This is great for background processing tasks.</li>
<li>Support for Vision Language Models (via <a href="https://github.com/lmstudio-ai/mlx-vlm">mlx-vlm</a>). Vision Language Models (VLMs) are a type of model that can process both text and images.</li>
</ol>
<p>In addition to these two features, LM Studio already had support for Structued Outputs (using <a href="https://docs.lmstudio.ai/guides/structured-outputs/">Outlines</a>). In this blog post I‚Äôll show how these new features can be used for a perfect local VLM task: sorting out my chaotic desktop üòÖ.</p>
<section id="the-problem" class="level2">
<h2 class="anchored" data-anchor-id="the-problem">The Problem</h2>
<p>I have hundreds of screenshots on my desktop. Some of them are screenshots of code, some are screenshots of webpages, some are screenshots of videos, some are screenshots of stupid memes, etc.</p>
<p>I‚Äôd like to be able to automatically sort these screenshots in a way that I can find them later or at least shove them into some kind of order so that my desktop doesn‚Äôt look like a screenshot graveyard.</p>
<p>Let‚Äôs see how we can use VLM‚Äôs and LM Studio to tackle this problem!</p>
<section id="what-were-working-with" class="level3">
<h3 class="anchored" data-anchor-id="what-were-working-with">What we‚Äôre working with</h3>
<p>To start with lets see what we‚Äôre working with.</p>
<div id="cell-5" class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pathlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Path</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> PIL <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Image</span></code></pre></div>
</div>
<div id="cell-6" class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">screenshots <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(Path(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/Users/davanstrien/Desktop"</span>).glob(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Screenshot*.png"</span>))</span>
<span id="cb2-2">screenshots[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="16">
<pre><code>PosixPath('/Users/davanstrien/Desktop/Screenshot 2024-10-03 at 09.14.30.png')</code></pre>
</div>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://danielvanstrien.xyz/posts/2024/11/example_screenshot.png" class="img-fluid figure-img" style="width:50.0%"></p>
<figcaption>Example of the type of screenshots I have hundreds of on my desktop</figcaption>
</figure>
</div>
</section>
</section>
<section id="setting-up-a-local-vlm" class="level2">
<h2 class="anchored" data-anchor-id="setting-up-a-local-vlm">Setting up a local VLM</h2>
<p>If you haven‚Äôt already, you will need to install LM Studio. You can find the latest instructions on their <a href="https://lmstudio.ai/">website</a>. If you already have LM Studio installed make sure you are running at least version 0.3.5.</p>
<section id="enabling-lm-studio-headless-mode" class="level3">
<h3 class="anchored" data-anchor-id="enabling-lm-studio-headless-mode">Enabling LM Studio Headless Mode</h3>
<p>Whilst not necessary for running a VLM, Label Studio added a new feature for running in headless mode in version 0.3.5. This allows you to run the VLM without a GUI. This can be very nice if you want to use a VLM or an LLM in the background for some task(s).</p>
<p>To enable headless mode, go to the settings menu and check the ‚ÄúEnable Local LLM Service‚Äù option.</p>
<p><img src="https://lmstudio.ai/assets/docs/headless-settings.png" class="img-fluid"></p>
<p>In addition to this, we‚Äôll use the CLI to interact with Label Studio. Check out the <a href="https://lmstudio.ai/docs/cli">docs</a> for more information on how to set this up.</p>
<p>Let‚Äôs see what the <code>lms</code> CLI has available.</p>
<div id="cell-12" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>lms</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   __   __  ___  ______          ___        _______   ____
  / /  /  |/  / / __/ /___ _____/ (_)__    / ___/ /  /  _/
 / /__/ /|_/ / _\ \/ __/ // / _  / / _ \  / /__/ /___/ /  
/____/_/  /_/ /___/\__/\_,_/\_,_/_/\___/  \___/____/___/  

lms - LM Studio CLI - v0.0.27
GitHub: https://github.com/lmstudio-ai/lmstudio-cli

Usage
lms &lt;subcommand&gt;

where &lt;subcommand&gt; can be one of:

- status - Prints the status of LM Studio
- server - Commands for managing the local server
- ls - List all downloaded models
- ps - List all loaded models
- get - Searching and downloading a model from online.
- load - Load a model
- unload - Unload a model
- create - Create a new project with scaffolding
- log - Log operations. Currently only supports streaming logs from LM Studio via `lms log stream`
- import - Import a model file into LM Studio
- version - Prints the version of the CLI
- bootstrap - Bootstrap the CLI

For more help, try running `lms &lt;subcommand&gt; --help`</code></pre>
</div>
</div>
<p>As you can see we have a bunch of commands for interacting with the local LLM service. We‚Äôll start by downloading a VLM model. For now LM Studio has support for <a href="https://huggingface.co/mistral-community/pixtral-12b">Pixtral</a> (specifcally using a MLX 4 bit quantised model <a href="https://huggingface.co/mlx-community/pixtral-12b-4bit">mlx-community/pixtral-12b-4bit</a>).</p>
<p>LM studio allows us to directly download models from Hugging Face. Let‚Äôs download the Pixtral model!</p>
<div id="cell-14" class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span>bash</span>
<span id="cb6-2">lms get mlx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>community<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>pixtral<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">b</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">bit</span> </span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Searching for models with the term mlx-community/pixtral-12b-4bit
Based on your hardware, choosing the recommended option: Pixtral 12B [4bit] (7.15 GB)
Downloading Pixtral 12B [4bit] (7.15 GB)
You already have this model. You can load it with: 

    lms load pixtral-12b
</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code></code></pre>
</div>
</div>
<p>You‚Äôll see above I already have the model downloaded but if you don‚Äôt the CLI will download it for you.</p>
<p>Once the model is downloaded we can load it into LM Studio.</p>
<div id="cell-16" class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span>bash</span>
<span id="cb9-2">lms load pixtral<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">b</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code></code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Loading model "mlx-community/pixtral-12b-4bit"...
[LMStudioClient][LLM] Start loading model mlx-community/pixtral-12b-4bit...
Model loaded successfully in 9.62s. (7.15 GB)
To use the model in the API/SDK, use the identifier "pixtral-12b".
To set a custom identifier, use the --identifier &lt;identifier&gt; option.</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>‚†¥ [‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñè                 ] 64.16%          </code></pre>
</div>
</div>
<p>We‚Äôll also want to start a server so we can interact with the model via an API.</p>
<div id="cell-18" class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span>bash</span>
<span id="cb13-2">lms server start</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Starting server...
Success! Server is now running on port 1234</code></pre>
</div>
</div>
<p>The server will be available at <code>http://localhost:1234</code>. The API is largely compatible with the OpenAI API so if you‚Äôve used that before you‚Äôll feel right at home. We can start by checking what models are available.</p>
<div id="cell-20" class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span>bash</span>
<span id="cb15-2">curl http:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span>localhost:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1234</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>v1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>models</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100   142  100   142    0     0  59638      0 --:--:-- --:--:-- --:--:-- 71000</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>{
  "data": [
    {
      "id": "pixtral-12b",
      "object": "model",
      "owned_by": "organization_owner"
    }
  ],
  "object": "list"
}</code></pre>
</div>
</div>
</section>
</section>
<section id="using-the-openai-client-to-interact-with-the-vlm" class="level2">
<h2 class="anchored" data-anchor-id="using-the-openai-client-to-interact-with-the-vlm">Using the OpenAI Client to interact with the VLM</h2>
<p>We can use the OpenAI client to interact with the VLM. This is useful if you want to use a VLM in a script or other program. Using this Client will also make it easier for us to switch out the VLM in the future without having to change the API calls. Let‚Äôs start by seeing how we can create the client.</p>
<p>The import is exactly the same as for the OpenAI API.</p>
<div id="cell-22" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> openai <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> OpenAI</span></code></pre></div>
</div>
<p>We need to point to our local server and use the API key <code>lm-studio</code>. The server will usually be available on port <code>1234</code>.</p>
<div id="cell-24" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">client <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> OpenAI(base_url<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"http://localhost:1234/v1"</span>, api_key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lm-studio"</span>)</span></code></pre></div>
</div>
<p>We can now see what models are available via Python.</p>
<div id="cell-26" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">client.models.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">
<pre><code>SyncPage[Model](data=[Model(id='pixtral-12b', created=None, object='model', owned_by='organization_owner')], object='list')</code></pre>
</div>
</div>
<div id="cell-27" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">completion <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.chat.completions.create(</span>
<span id="cb22-2">    model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pixtral-12b"</span>,</span>
<span id="cb22-3">    messages<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb22-4">        {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"system"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Always respond with a pointless anecdote."</span>},</span>
<span id="cb22-5">        {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hello, how are you?"</span>},</span>
<span id="cb22-6">    ],</span>
<span id="cb22-7">    temperature<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.7</span>,</span>
<span id="cb22-8">)</span></code></pre></div>
</div>
<div id="cell-28" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rich <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span></span>
<span id="cb23-2"></span>
<span id="cb23-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(completion.choices[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].message.content)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace">Oh, hey there! You know, I was just thinking about the time I tried to make a sandwich with a banana instead of 
bread? It was a slippery slope, literally and metaphorically. I ended up with a mess of banana goo and a serious 
case of the giggles. Who knew making a sandwich could be so<span style="color: #808000; text-decoration-color: #808000">...</span> slippery!
</pre>
</div>
</div>
<p>Very nice! Now let‚Äôs try with an image.</p>
<section id="passing-images-to-the-vlm" class="level3">
<h3 class="anchored" data-anchor-id="passing-images-to-the-vlm">Passing Images to the VLM</h3>
<p>Let‚Äôs try with an image. We need to encode the image to base64 to send it to the VLM via the API.</p>
<div id="cell-30" class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># encode the image to base64</span></span>
<span id="cb24-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> base64</span>
<span id="cb24-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> io</span>
<span id="cb24-4"></span>
<span id="cb24-5">image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(screenshots[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>])</span>
<span id="cb24-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert PIL Image to RGB mode</span></span>
<span id="cb24-7">image_rgb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> image.convert(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"RGB"</span>)</span>
<span id="cb24-8"></span>
<span id="cb24-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert PIL Image to bytes</span></span>
<span id="cb24-10">img_byte_arr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> io.BytesIO()</span>
<span id="cb24-11">image_rgb.save(img_byte_arr, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"JPEG"</span>)</span>
<span id="cb24-12">image_bytes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> img_byte_arr.getvalue()</span>
<span id="cb24-13"></span>
<span id="cb24-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Encode to base64</span></span>
<span id="cb24-15">base64_image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> base64.b64encode(image_bytes).decode(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"utf-8"</span>)</span></code></pre></div>
</div>
<p>We can see the base64 encoded image below.</p>
<div id="cell-32" class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">base64_image</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="19">
<pre><code>''</code></pre>
</div>
</div>
<p>Let‚Äôs try again with the base64 encoded image.</p>
<div id="cell-34" class="cell" data-execution_count="20">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1">completion <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.chat.completions.create(</span>
<span id="cb27-2">    model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pixtral-12b"</span>,</span>
<span id="cb27-3">    messages<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb27-4">        {</span>
<span id="cb27-5">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user"</span>,</span>
<span id="cb27-6">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: [</span>
<span id="cb27-7">                {</span>
<span id="cb27-8">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"text"</span>,</span>
<span id="cb27-9">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"text"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"What is this image about?"</span>,</span>
<span id="cb27-10">                },</span>
<span id="cb27-11">                {</span>
<span id="cb27-12">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"image_url"</span>,</span>
<span id="cb27-13">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"image_url"</span>: {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"url"</span>: <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"data:image/jpeg;base64,</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>base64_image<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>},</span>
<span id="cb27-14">                },</span>
<span id="cb27-15">            ],</span>
<span id="cb27-16">        },</span>
<span id="cb27-17">    ],</span>
<span id="cb27-18">)</span></code></pre></div>
</div>
<p>Let‚Äôs see the response.</p>
<div id="cell-36" class="cell" data-execution_count="21">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(completion.choices[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].message.content)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace">The image appears to be a screenshot of a configuration interface for setting up an endpoint, likely in the context
of deploying or managing a containerized application. Here's a breakdown of the various sections and fields in the 
interface:

### General Configuration
<span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span>. **Automatic Scaling**:
   - **Min**: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">0</span> <span style="font-weight: bold">(</span>Minimum number of replicas<span style="font-weight: bold">)</span>
   - **Max**: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span> <span style="font-weight: bold">(</span>Maximum number of replicas<span style="font-weight: bold">)</span>

<span style="color: #008080; text-decoration-color: #008080; font-weight: bold">2</span>. **Revision**:
   - An optional field to specify a revision identifier, e.g., `b754fe8f941023b372bd6a6c17282cf4bb9c0`.

### Task and Framework
- **Task**: Set to <span style="color: #008000; text-decoration-color: #008000">"Custom"</span>.
- **Framework**: Also set to <span style="color: #008000; text-decoration-color: #008000">"Custom"</span>.

### Container Type
- The default container type is used for deploying endpoints, which is flexible due to custom inference handlers. 
Options include:
  - Custom
  - Test-Generation information
  - Link to a custom container

### Container Details
- **Container URL**: `danielvanstreien/aria-vlim.latest`
  - This is the registry URL for the container, which can be from various registries like Docker Hub, AWS ECR, 
Azure ACR, Google GCR, etc.
- **Container Port**: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">8000</span>
- **Health Route**: `<span style="color: #800080; text-decoration-color: #800080">/</span><span style="color: #ff00ff; text-decoration-color: #ff00ff">health</span>`
- **Username** and **Password**:
  - These fields are optional for authentication to the container registry.

### Environment Variables
- **Default**:
  - Key: `CLIENT_KEY`
  - Value: <span style="font-weight: bold">(</span>To be filled in<span style="font-weight: bold">)</span>
- **Secrets**:
  - Key: `CLIENT_KEY`
  - Value: <span style="font-weight: bold">(</span>To be filled in<span style="font-weight: bold">)</span>

### Additional Options
- **Add one**: Allows adding more environment variables or secrets.

### Summary
This interface is used to configure an endpoint for a containerized application, specifying details such as the 
number of replicas, revision identifier, task and framework settings, container registry URL, port, health route, 
and environment variables. The configuration allows for flexibility in deploying the application with custom 
settings and secure handling of sensitive information like client keys.
</pre>
</div>
</div>
<p>Very nice! This is already pretty cool but there are still some challenges if we want to use the VLM for more than a simple chat and actually want to use the VLM to allow us to perform some other kinds of tasks or actions. For example we might want to sort screenshots into categories or tags. One way we can do this is by asking the VLM to output this kind of info as JSON. Let‚Äôs try this.</p>
<p>We never knew a few years ago that we would spend so much time looking at deeply nested lists of Dicts üòÖ so let‚Äôs extract out the prompt to make it a bit easier to see what we‚Äôre changing.</p>
<div id="cell-38" class="cell" data-execution_count="22">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1">prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""What is this image about? Assign a maximum of 3 tags to the image, and put the image into one of the following categories: meme, documentation image, other.</span></span>
<span id="cb29-2"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Respond in JSON format with the keys "description", "category", and "tags"."""</span></span></code></pre></div>
</div>
<div id="cell-39" class="cell" data-output-fold="true" data-execution_count="23">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-overflow-wrap code-with-copy"><code class="sourceCode python"><span id="cb30-1">completion <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.chat.completions.create(</span>
<span id="cb30-2">    model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pixtral-12b"</span>,</span>
<span id="cb30-3">    messages<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb30-4">        {</span>
<span id="cb30-5">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user"</span>,</span>
<span id="cb30-6">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: [</span>
<span id="cb30-7">                {</span>
<span id="cb30-8">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"text"</span>,</span>
<span id="cb30-9">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"text"</span>: prompt,</span>
<span id="cb30-10">                },</span>
<span id="cb30-11">                {</span>
<span id="cb30-12">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"image_url"</span>,</span>
<span id="cb30-13">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"image_url"</span>: {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"url"</span>: <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"data:image/jpeg;base64,</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>base64_image<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>},</span>
<span id="cb30-14">                },</span>
<span id="cb30-15">            ],</span>
<span id="cb30-16">        },</span>
<span id="cb30-17">    ],</span>
<span id="cb30-18">)</span></code></pre></div>
</details>
</div>
<p>Let‚Äôs see the response.</p>
<div id="cell-41" class="cell" data-execution_count="24">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(completion.choices[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].message.content)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace">```json
<span style="font-weight: bold">{</span>
  <span style="color: #008000; text-decoration-color: #008000">"description"</span>: <span style="color: #008000; text-decoration-color: #008000">"Configuration settings for deploying a containerized application."</span>,
  <span style="color: #008000; text-decoration-color: #008000">"image_url"</span>: <span style="color: #008000; text-decoration-color: #008000">"https://example.com/container-image"</span>,
  <span style="color: #008000; text-decoration-color: #008000">"endpoint_settings"</span>: <span style="font-weight: bold">{</span>
    <span style="color: #008000; text-decoration-color: #008000">"scale_to_zero"</span>: true,
    <span style="color: #008000; text-decoration-color: #008000">"idle_timeout"</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">300</span>,
    <span style="color: #008000; text-decoration-color: #008000">"replicas"</span>: <span style="font-weight: bold">{</span>
      <span style="color: #008000; text-decoration-color: #008000">"min"</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">0</span>,
      <span style="color: #008000; text-decoration-color: #008000">"max"</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span>
    <span style="font-weight: bold">}</span>,
    <span style="color: #008000; text-decoration-color: #008000">"revision"</span>: <span style="color: #008000; text-decoration-color: #008000">"e.g. b754fe8f941023b372bd6adcba6c17282cf4bb9c0"</span>,
    <span style="color: #008000; text-decoration-color: #008000">"task"</span>: <span style="color: #008000; text-decoration-color: #008000">"Custom"</span>,
    <span style="color: #008000; text-decoration-color: #008000">"framework"</span>: <span style="color: #008000; text-decoration-color: #008000">"Custom"</span>
  <span style="font-weight: bold">}</span>,
  <span style="color: #008000; text-decoration-color: #008000">"container_type"</span>: <span style="font-weight: bold">{</span>
    <span style="color: #008000; text-decoration-color: #008000">"default_container"</span>: true,
    <span style="color: #008000; text-decoration-color: #008000">"custom_inference_handlers"</span>: false
  <span style="font-weight: bold">}</span>,
  <span style="color: #008000; text-decoration-color: #008000">"container_url"</span>: <span style="font-weight: bold">{</span>
    <span style="color: #008000; text-decoration-color: #008000">"registry_url"</span>: <span style="color: #008000; text-decoration-color: #008000">"danielvanstraten/aria-vilm:latest"</span>,
    <span style="color: #008000; text-decoration-color: #008000">"container_port"</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">8000</span>,
    <span style="color: #008000; text-decoration-color: #008000">"health_route"</span>: <span style="color: #008000; text-decoration-color: #008000">"/health"</span>
  <span style="font-weight: bold">}</span>,
  <span style="color: #008000; text-decoration-color: #008000">"authentication"</span>: <span style="font-weight: bold">{</span>
    <span style="color: #008000; text-decoration-color: #008000">"username"</span>: <span style="color: #008000; text-decoration-color: #008000">""</span>,
    <span style="color: #008000; text-decoration-color: #008000">"password"</span>: <span style="color: #008000; text-decoration-color: #008000">""</span>
  <span style="font-weight: bold">}</span>,
  <span style="color: #008000; text-decoration-color: #008000">"environment_variables"</span>: <span style="font-weight: bold">{</span>
    <span style="color: #008000; text-decoration-color: #008000">"default"</span>: <span style="font-weight: bold">[</span>
      <span style="font-weight: bold">{</span>
        <span style="color: #008000; text-decoration-color: #008000">"key"</span>: <span style="color: #008000; text-decoration-color: #008000">"CLIENT_KEY"</span>,
        <span style="color: #008000; text-decoration-color: #008000">"value"</span>: <span style="color: #008000; text-decoration-color: #008000">""</span>
      <span style="font-weight: bold">}</span>
    <span style="font-weight: bold">]</span>,
    <span style="color: #008000; text-decoration-color: #008000">"secrets"</span>: <span style="font-weight: bold">[</span>
      <span style="font-weight: bold">{</span>
        <span style="color: #008000; text-decoration-color: #008000">"key"</span>: <span style="color: #008000; text-decoration-color: #008000">"CLIENT_KEY"</span>,
        <span style="color: #008000; text-decoration-color: #008000">"value"</span>: <span style="color: #008000; text-decoration-color: #008000">""</span>
      <span style="font-weight: bold">}</span>
    <span style="font-weight: bold">]</span>
  <span style="font-weight: bold">}</span>
<span style="font-weight: bold">}</span>
```
</pre>
</div>
</div>
<p>This is sort of what we asked for but not really? Let‚Äôs try to parse the response as JSON.</p>
<div id="cell-43" class="cell" data-execution_count="25">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> json</span>
<span id="cb32-2"></span>
<span id="cb32-3">json.loads(completion.choices[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].message.content)</span></code></pre></div>
<div class="cell-output cell-output-error">
<div class="ansi-escaped-output">
<pre><span class="ansi-red-fg">---------------------------------------------------------------------------</span>
<span class="ansi-red-fg">JSONDecodeError</span>                           Traceback (most recent call last)
Cell <span class="ansi-green-fg">In[25], line 3</span>
<span class="ansi-green-fg ansi-bold">      1</span> <span style="font-weight:bold;color:rgb(0,135,0)">import</span> <span style="font-weight:bold;color:rgb(0,0,255)">json</span>
<span class="ansi-green-fg">----&gt; 3</span> <span class="ansi-yellow-bg">json</span><span style="color:rgb(98,98,98)" class="ansi-yellow-bg">.</span><span class="ansi-yellow-bg">loads</span><span class="ansi-yellow-bg">(</span><span class="ansi-yellow-bg">completion</span><span style="color:rgb(98,98,98)" class="ansi-yellow-bg">.</span><span class="ansi-yellow-bg">choices</span><span class="ansi-yellow-bg">[</span><span style="color:rgb(98,98,98)" class="ansi-yellow-bg">0</span><span class="ansi-yellow-bg">]</span><span style="color:rgb(98,98,98)" class="ansi-yellow-bg">.</span><span class="ansi-yellow-bg">message</span><span style="color:rgb(98,98,98)" class="ansi-yellow-bg">.</span><span class="ansi-yellow-bg">content</span><span class="ansi-yellow-bg">)</span>

File <span class="ansi-green-fg">~/.pyenv/versions/3.11.1/lib/python3.11/json/__init__.py:346</span>, in <span class="ansi-cyan-fg">loads</span><span class="ansi-blue-fg">(s, cls, object_hook, parse_float, parse_int, parse_constant, object_pairs_hook, **kw)</span>
<span class="ansi-green-fg ansi-bold">    341</span>     s <span style="color:rgb(98,98,98)">=</span> s<span style="color:rgb(98,98,98)">.</span>decode(detect_encoding(s), <span style="color:rgb(175,0,0)">'</span><span style="color:rgb(175,0,0)">surrogatepass</span><span style="color:rgb(175,0,0)">'</span>)
<span class="ansi-green-fg ansi-bold">    343</span> <span style="font-weight:bold;color:rgb(0,135,0)">if</span> (<span style="color:rgb(0,135,0)">cls</span> <span style="font-weight:bold;color:rgb(175,0,255)">is</span> <span style="font-weight:bold;color:rgb(0,135,0)">None</span> <span style="font-weight:bold;color:rgb(175,0,255)">and</span> object_hook <span style="font-weight:bold;color:rgb(175,0,255)">is</span> <span style="font-weight:bold;color:rgb(0,135,0)">None</span> <span style="font-weight:bold;color:rgb(175,0,255)">and</span>
<span class="ansi-green-fg ansi-bold">    344</span>         parse_int <span style="font-weight:bold;color:rgb(175,0,255)">is</span> <span style="font-weight:bold;color:rgb(0,135,0)">None</span> <span style="font-weight:bold;color:rgb(175,0,255)">and</span> parse_float <span style="font-weight:bold;color:rgb(175,0,255)">is</span> <span style="font-weight:bold;color:rgb(0,135,0)">None</span> <span style="font-weight:bold;color:rgb(175,0,255)">and</span>
<span class="ansi-green-fg ansi-bold">    345</span>         parse_constant <span style="font-weight:bold;color:rgb(175,0,255)">is</span> <span style="font-weight:bold;color:rgb(0,135,0)">None</span> <span style="font-weight:bold;color:rgb(175,0,255)">and</span> object_pairs_hook <span style="font-weight:bold;color:rgb(175,0,255)">is</span> <span style="font-weight:bold;color:rgb(0,135,0)">None</span> <span style="font-weight:bold;color:rgb(175,0,255)">and</span> <span style="font-weight:bold;color:rgb(175,0,255)">not</span> kw):
<span class="ansi-green-fg">--&gt; 346</span>     <span style="font-weight:bold;color:rgb(0,135,0)">return</span> <span class="ansi-yellow-bg">_default_decoder</span><span style="color:rgb(98,98,98)" class="ansi-yellow-bg">.</span><span class="ansi-yellow-bg">decode</span><span class="ansi-yellow-bg">(</span><span class="ansi-yellow-bg">s</span><span class="ansi-yellow-bg">)</span>
<span class="ansi-green-fg ansi-bold">    347</span> <span style="font-weight:bold;color:rgb(0,135,0)">if</span> <span style="color:rgb(0,135,0)">cls</span> <span style="font-weight:bold;color:rgb(175,0,255)">is</span> <span style="font-weight:bold;color:rgb(0,135,0)">None</span>:
<span class="ansi-green-fg ansi-bold">    348</span>     <span style="color:rgb(0,135,0)">cls</span> <span style="color:rgb(98,98,98)">=</span> JSONDecoder

File <span class="ansi-green-fg">~/.pyenv/versions/3.11.1/lib/python3.11/json/decoder.py:337</span>, in <span class="ansi-cyan-fg">JSONDecoder.decode</span><span class="ansi-blue-fg">(self, s, _w)</span>
<span class="ansi-green-fg ansi-bold">    332</span> <span style="font-weight:bold;color:rgb(0,135,0)">def</span> <span style="color:rgb(0,0,255)">decode</span>(<span style="color:rgb(0,135,0)">self</span>, s, _w<span style="color:rgb(98,98,98)">=</span>WHITESPACE<span style="color:rgb(98,98,98)">.</span>match):
<span class="ansi-green-fg ansi-bold">    333</span> <span style="color:rgb(188,188,188)">    </span><span style="font-style:italic;color:rgb(175,0,0)">"""Return the Python representation of ``s`` (a ``str`` instance</span>
<span class="ansi-green-fg ansi-bold">    334</span> <span style="font-style:italic;color:rgb(175,0,0)">    containing a JSON document).</span>
<span class="ansi-green-fg ansi-bold">    335</span> 
<span class="ansi-green-fg ansi-bold">    336</span> <span style="font-style:italic;color:rgb(175,0,0)">    """</span>
<span class="ansi-green-fg">--&gt; 337</span>     obj, end <span style="color:rgb(98,98,98)">=</span> <span style="color:rgb(0,135,0)" class="ansi-yellow-bg">self</span><span style="color:rgb(98,98,98)" class="ansi-yellow-bg">.</span><span class="ansi-yellow-bg">raw_decode</span><span class="ansi-yellow-bg">(</span><span class="ansi-yellow-bg">s</span><span class="ansi-yellow-bg">,</span><span class="ansi-yellow-bg"> </span><span class="ansi-yellow-bg">idx</span><span style="color:rgb(98,98,98)" class="ansi-yellow-bg">=</span><span class="ansi-yellow-bg">_w</span><span class="ansi-yellow-bg">(</span><span class="ansi-yellow-bg">s</span><span class="ansi-yellow-bg">,</span><span class="ansi-yellow-bg"> </span><span style="color:rgb(98,98,98)" class="ansi-yellow-bg">0</span><span class="ansi-yellow-bg">)</span><span style="color:rgb(98,98,98)" class="ansi-yellow-bg">.</span><span class="ansi-yellow-bg">end</span><span class="ansi-yellow-bg">(</span><span class="ansi-yellow-bg">)</span><span class="ansi-yellow-bg">)</span>
<span class="ansi-green-fg ansi-bold">    338</span>     end <span style="color:rgb(98,98,98)">=</span> _w(s, end)<span style="color:rgb(98,98,98)">.</span>end()
<span class="ansi-green-fg ansi-bold">    339</span>     <span style="font-weight:bold;color:rgb(0,135,0)">if</span> end <span style="color:rgb(98,98,98)">!=</span> <span style="color:rgb(0,135,0)">len</span>(s):

File <span class="ansi-green-fg">~/.pyenv/versions/3.11.1/lib/python3.11/json/decoder.py:355</span>, in <span class="ansi-cyan-fg">JSONDecoder.raw_decode</span><span class="ansi-blue-fg">(self, s, idx)</span>
<span class="ansi-green-fg ansi-bold">    353</span>     obj, end <span style="color:rgb(98,98,98)">=</span> <span style="color:rgb(0,135,0)">self</span><span style="color:rgb(98,98,98)">.</span>scan_once(s, idx)
<span class="ansi-green-fg ansi-bold">    354</span> <span style="font-weight:bold;color:rgb(0,135,0)">except</span> <span style="font-weight:bold;color:rgb(215,95,95)">StopIteration</span> <span style="font-weight:bold;color:rgb(0,135,0)">as</span> err:
<span class="ansi-green-fg">--&gt; 355</span>     <span style="font-weight:bold;color:rgb(0,135,0)">raise</span> JSONDecodeError(<span style="color:rgb(175,0,0)">"</span><span style="color:rgb(175,0,0)">Expecting value</span><span style="color:rgb(175,0,0)">"</span>, s, err<span style="color:rgb(98,98,98)">.</span>value) <span style="font-weight:bold;color:rgb(0,135,0)">from</span> <span style="font-weight:bold;color:rgb(0,135,0)">None</span>
<span class="ansi-green-fg ansi-bold">    356</span> <span style="font-weight:bold;color:rgb(0,135,0)">return</span> obj, end

<span class="ansi-red-fg">JSONDecodeError</span>: Expecting value: line 1 column 1 (char 0)</pre>
</div>
</div>
</div>
<p>In this case we can fix this by stripping the ```<code>json</code> from the response but it‚Äôs not a great solution.</p>
<div id="cell-45" class="cell" data-execution_count="26">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1">json.loads(completion.choices[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].message.content.strip(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"```json"</span>))</span>
<span id="cb33-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Structured output</span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="26">
<pre><code>{'description': 'Configuration settings for deploying a containerized application.',
 'image_url': 'https://example.com/container-image',
 'endpoint_settings': {'scale_to_zero': True,
  'idle_timeout': 300,
  'replicas': {'min': 0, 'max': 1},
  'revision': 'e.g. b754fe8f941023b372bd6adcba6c17282cf4bb9c0',
  'task': 'Custom',
  'framework': 'Custom'},
 'container_type': {'default_container': True,
  'custom_inference_handlers': False},
 'container_url': {'registry_url': 'danielvanstraten/aria-vilm:latest',
  'container_port': 8000,
  'health_route': '/health'},
 'authentication': {'username': '', 'password': ''},
 'environment_variables': {'default': [{'key': 'CLIENT_KEY', 'value': ''}],
  'secrets': [{'key': 'CLIENT_KEY', 'value': ''}]}}</code></pre>
</div>
</div>
</section>
</section>
<section id="structured-output-to-the-rescue" class="level2">
<h2 class="anchored" data-anchor-id="structured-output-to-the-rescue">Structured output to the rescue!</h2>
<p>I bang on about structured generation so much it probably seems like I‚Äôve put my entire pension into a structured generation ETF but IMO it‚Äôs a massively useful tool for using LLMs to do productive work. In particular it makes it easier to use LLMs for tasks that require more than just a simple chat i.e where you want to use the LLM to do something like sort images into folders or categorize them or generate metadata or perform API calls‚Ä¶It‚Äôs also massively useful for generating synthetic data for training other models (to the point where I think I will often prefer to use a crappier model that can be used with structured generation than a better model that can‚Äôt).i</p>
<p>As we saw above the JSON returned wasn‚Äôt very close to what we asked for. We could try and fix this by iterating on the prompt but alongisde doing we can also enforce a certain output. This doesn‚Äôt mean the output will always be <em>correct</em> but at least it will have the correct format and be <em>consistent</em>. This is already very helpful to avoid having to write parsing prompts like</p>
<div class="sourceCode" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1"></span>
<span id="cb35-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> try_and_parse_response(response):</span>
<span id="cb35-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> response.startswith(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"```json"</span>):</span>
<span id="cb35-4">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> json.loads(response.strip(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"```json"</span>))</span>
<span id="cb35-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb35-6">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> response.startswith(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"```"</span>):</span>
<span id="cb35-7">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> json.loads(response.strip(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"```"</span>))</span>
<span id="cb35-8">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb35-9">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ValueError</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Response is not valid JSON"</span>)</span></code></pre></div>
<p>This can get annoying very quickly so let‚Äôs see how we can use structured output to enforce a certain format.</p>
<section id="defining-a-pydantic-class-with-outlines" class="level3">
<h3 class="anchored" data-anchor-id="defining-a-pydantic-class-with-outlines">Defining a Pydantic Class with Outlines</h3>
<p>LM Studio has support for structured outputs via <a href="https://lmstudio.ai/docs/advanced/structured-output">Outlines</a> for <code>mlx</code> models. For <code>gguf</code> models it uses llama.cpp‚Äôs grammar-based sampling APIs.</p>
<p>Let‚Äôs see how we can use a Pydantic model to enforce a certain output. To start if we wanted to sort images into folder‚Äôs we likely don‚Äôt want the model to keeping adding new folders to the folder structure. Instead we may want to only allow a certain set of categories. We can do this by defining a Pydantic model.</p>
<div id="cell-48" class="cell" data-execution_count="30">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pydantic <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> BaseModel, Field</span>
<span id="cb36-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> typing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Literal</span>
<span id="cb36-3"></span>
<span id="cb36-4"></span>
<span id="cb36-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> ScreenshotCategory(BaseModel):</span>
<span id="cb36-6">    category: Literal[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"meme"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"documentation image"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"other"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Field(</span>
<span id="cb36-7">        ..., description<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The category of the screenshot"</span></span>
<span id="cb36-8">    )</span></code></pre></div>
</div>
<p>This tells the model that the category must be one of the three options and that it must be a string. We can also add more constraints and combine classes. Let‚Äôs create an overall Class to represent the output we want for each screenshot.</p>
<p>We‚Äôll ask for:</p>
<ul>
<li>A description of the screenshot: we will enforce a minimum and maximum length so we don‚Äôt get some really long or really short descriptions.</li>
<li>A category: we will use our <code>ScreenshotCategory</code> class to enforce the category.</li>
<li>We‚Äôll give the model a bit more choice with the tags by allowing up to 3 optional tags.</li>
</ul>
<div id="cell-50" class="cell" data-execution_count="34">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> typing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Annotated</span>
<span id="cb37-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pydantic.types <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> StringConstraints</span>
<span id="cb37-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> typing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Optional, List</span>
<span id="cb37-4"></span>
<span id="cb37-5"></span>
<span id="cb37-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> ScreenshotInformation(BaseModel):</span>
<span id="cb37-7">    description: Annotated[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, StringConstraints(min_length<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, max_length<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>)] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (</span>
<span id="cb37-8">        Field(</span>
<span id="cb37-9">            ..., description<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A short description of the screenshot (50-200 characters)"</span></span>
<span id="cb37-10">        )</span>
<span id="cb37-11">    )</span>
<span id="cb37-12">    category: ScreenshotCategory</span>
<span id="cb37-13">    tags: Optional[List[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>]] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Field(</span>
<span id="cb37-14">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, description<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A list of tags that describe the screenshot"</span>, max_items<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb37-15">    )</span></code></pre></div>
</div>
<p>Let‚Äôs update our prompt to ask for this information and specify that the response should be in JSON format.</p>
<div id="cell-52" class="cell" data-execution_count="35">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1">prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"""Analyze the given screenshot and provide the following information in JSON format:</span></span>
<span id="cb38-2"></span>
<span id="cb38-3"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1. description: A short description of the screenshot (50-200 characters)</span></span>
<span id="cb38-4"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">2. category: Categorize the screenshot as one of the following:</span></span>
<span id="cb38-5"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">   - meme</span></span>
<span id="cb38-6"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">   - documentation image</span></span>
<span id="cb38-7"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">   - other</span></span>
<span id="cb38-8"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">3. tags: (Optional) Up to 3 tags that describe the screenshot</span></span>
<span id="cb38-9"></span>
<span id="cb38-10"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">Ensure your response follows this schema:</span></span>
<span id="cb38-11"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>ScreenshotInformation<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>model_json_schema()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb38-12"></span>
<span id="cb38-13"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">Do not include any explanations or additional text outside of the JSON structure."""</span></span></code></pre></div>
</div>
<div id="cell-53" class="cell" data-output-fold="true" data-execution_count="36">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-overflow-wrap code-with-copy"><code class="sourceCode python"><span id="cb39-1">completion <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.beta.chat.completions.parse(</span>
<span id="cb39-2">    model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"model-identifier"</span>,</span>
<span id="cb39-3">    messages<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb39-4">        {</span>
<span id="cb39-5">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"system"</span>,</span>
<span id="cb39-6">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""You are an AI assistant specialized in organizing a users screenshots into categories and tags.</span></span>
<span id="cb39-7"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">            """</span>,</span>
<span id="cb39-8">        },</span>
<span id="cb39-9">        {</span>
<span id="cb39-10">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user"</span>,</span>
<span id="cb39-11">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: [</span>
<span id="cb39-12">                {</span>
<span id="cb39-13">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"text"</span>,</span>
<span id="cb39-14">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"text"</span>: prompt,</span>
<span id="cb39-15">                },</span>
<span id="cb39-16">                {</span>
<span id="cb39-17">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"image_url"</span>,</span>
<span id="cb39-18">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"image_url"</span>: {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"url"</span>: <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"data:image/jpeg;base64,</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>base64_image<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>},</span>
<span id="cb39-19">                },</span>
<span id="cb39-20">            ],</span>
<span id="cb39-21">        },</span>
<span id="cb39-22">    ],</span>
<span id="cb39-23">    max_tokens<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2000</span>,</span>
<span id="cb39-24">    temperature<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.7</span>,</span>
<span id="cb39-25">    response_format<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ScreenshotInformation,</span>
<span id="cb39-26">)</span></code></pre></div>
</details>
</div>
<div id="cell-54" class="cell" data-execution_count="33">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(completion.choices[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].message.parsed)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #800080; text-decoration-color: #800080; font-weight: bold">ScreenshotInformation</span><span style="font-weight: bold">(</span>
    <span style="color: #808000; text-decoration-color: #808000">description</span>=<span style="color: #008000; text-decoration-color: #008000">'Configuration settings for deploying a container endpoint.'</span>,
    <span style="color: #808000; text-decoration-color: #808000">category</span>=<span style="color: #800080; text-decoration-color: #800080; font-weight: bold">ScreenshotCategory</span><span style="font-weight: bold">(</span><span style="color: #808000; text-decoration-color: #808000">category</span>=<span style="color: #008000; text-decoration-color: #008000">'documentation image'</span><span style="font-weight: bold">)</span>,
    <span style="color: #808000; text-decoration-color: #808000">tags</span>=<span style="font-weight: bold">[</span><span style="color: #008000; text-decoration-color: #008000">'Technology'</span>, <span style="color: #008000; text-decoration-color: #008000">','</span>, <span style="color: #008000; text-decoration-color: #008000">'Configuration settings'</span><span style="font-weight: bold">]</span>
<span style="font-weight: bold">)</span>
</pre>
</div>
</div>
<p>We can see that we now get back a <code>ScreenshotInformation</code> object rather than a string. This is already pretty cool. You might spot though that one of the tags is just a <code>,</code>, whilst this is ‚Äútechnically‚Äù correct it‚Äôs not what we want. We can fix this by updating our Pydantic model. We can also add a constraint to the tags to ensure they are at least 3 characters long.</p>
<div id="cell-56" class="cell" data-execution_count="40">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb41-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> typing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Annotated, List, Optional</span>
<span id="cb41-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pydantic <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> BaseModel, Field</span>
<span id="cb41-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pydantic.types <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> StringConstraints</span>
<span id="cb41-4"></span>
<span id="cb41-5"></span>
<span id="cb41-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> ScreenshotCategory(BaseModel):</span>
<span id="cb41-7">    category: Literal[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"meme"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"documentation image"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"other"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Field(</span>
<span id="cb41-8">        ..., description<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The category of the screenshot"</span></span>
<span id="cb41-9">    )</span>
<span id="cb41-10"></span>
<span id="cb41-11"></span>
<span id="cb41-12"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> ScreenshotInformation(BaseModel):</span>
<span id="cb41-13">    description: Annotated[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, StringConstraints(min_length<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, max_length<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>)] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (</span>
<span id="cb41-14">        Field(</span>
<span id="cb41-15">            ..., description<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A short description of the screenshot (50-200 characters)"</span></span>
<span id="cb41-16">        )</span>
<span id="cb41-17">    )</span>
<span id="cb41-18">    category: ScreenshotCategory</span>
<span id="cb41-19">    tags: Optional[List[Annotated[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, StringConstraints(min_length<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)]]] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Field(</span>
<span id="cb41-20">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, description<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A list of tags that describe the screenshot"</span>, max_items<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb41-21">    )</span></code></pre></div>
</div>
<div id="cell-57" class="cell" data-execution_count="41">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1">prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"""Analyze the given screenshot and provide the following information in JSON format:</span></span>
<span id="cb42-2"></span>
<span id="cb42-3"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1. description: A short description of the screenshot (50-200 characters)</span></span>
<span id="cb42-4"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">2. category: Categorize the screenshot as one of the following:</span></span>
<span id="cb42-5"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">   - meme</span></span>
<span id="cb42-6"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">   - documentation image</span></span>
<span id="cb42-7"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">   - other</span></span>
<span id="cb42-8"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">3. tags: (Optional) Up to 3 tags that describe the screenshot</span></span>
<span id="cb42-9"></span>
<span id="cb42-10"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">Ensure your response follows this schema:</span></span>
<span id="cb42-11"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>ScreenshotInformation<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>model_json_schema()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb42-12"></span>
<span id="cb42-13"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">Do not include any explanations or additional text outside of the JSON structure."""</span></span></code></pre></div>
</div>
<div id="cell-58" class="cell" data-output-fold="true" data-execution_count="42">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode python code-overflow-wrap code-with-copy"><code class="sourceCode python"><span id="cb43-1">completion <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.beta.chat.completions.parse(</span>
<span id="cb43-2">    model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"model-identifier"</span>,</span>
<span id="cb43-3">    messages<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb43-4">        {</span>
<span id="cb43-5">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"system"</span>,</span>
<span id="cb43-6">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""You are an AI assistant specialized in organizing a users screenshots into categories and tags.</span></span>
<span id="cb43-7"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">            """</span>,</span>
<span id="cb43-8">        },</span>
<span id="cb43-9">        {</span>
<span id="cb43-10">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user"</span>,</span>
<span id="cb43-11">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: [</span>
<span id="cb43-12">                {</span>
<span id="cb43-13">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"text"</span>,</span>
<span id="cb43-14">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"text"</span>: prompt,</span>
<span id="cb43-15">                },</span>
<span id="cb43-16">                {</span>
<span id="cb43-17">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"image_url"</span>,</span>
<span id="cb43-18">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"image_url"</span>: {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"url"</span>: <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"data:image/jpeg;base64,</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>base64_image<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>},</span>
<span id="cb43-19">                },</span>
<span id="cb43-20">            ],</span>
<span id="cb43-21">        },</span>
<span id="cb43-22">    ],</span>
<span id="cb43-23">    max_tokens<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2000</span>,</span>
<span id="cb43-24">    temperature<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.7</span>,</span>
<span id="cb43-25">    response_format<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ScreenshotInformation,</span>
<span id="cb43-26">)</span></code></pre></div>
</details>
</div>
<p>Let‚Äôs see how this changes the output.</p>
<div id="cell-60" class="cell" data-execution_count="45">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb44-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(completion.choices[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].message.parsed)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #800080; text-decoration-color: #800080; font-weight: bold">ScreenshotInformation</span><span style="font-weight: bold">(</span>
    <span style="color: #808000; text-decoration-color: #808000">description</span>=<span style="color: #008000; text-decoration-color: #008000">'Configuration page for deploying a container with various settings including security, networking,</span>
<span style="color: #008000; text-decoration-color: #008000">and environment variables.'</span>,
    <span style="color: #808000; text-decoration-color: #808000">category</span>=<span style="color: #800080; text-decoration-color: #800080; font-weight: bold">ScreenshotCategory</span><span style="font-weight: bold">(</span><span style="color: #808000; text-decoration-color: #808000">category</span>=<span style="color: #008000; text-decoration-color: #008000">'documentation image'</span><span style="font-weight: bold">)</span>,
    <span style="color: #808000; text-decoration-color: #808000">tags</span>=<span style="font-weight: bold">[</span><span style="color: #008000; text-decoration-color: #008000">'.NET'</span>, <span style="color: #008000; text-decoration-color: #008000">'API'</span>, <span style="color: #008000; text-decoration-color: #008000">'AWS ECR'</span><span style="font-weight: bold">]</span>
<span style="font-weight: bold">)</span>
</pre>
</div>
</div>
<p>The tags could potentially be improved but we already have an output that means we can use this in a program. To make this a bit easier to use let‚Äôs wrap this up in a function.</p>
<div id="cell-62" class="cell" data-execution_count="66">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb45-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> typing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Union</span>
<span id="cb45-2"></span>
<span id="cb45-3"></span>
<span id="cb45-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> encode_image_to_base64(image):</span>
<span id="cb45-5">    img_byte_arr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> io.BytesIO()</span>
<span id="cb45-6">    image.save(img_byte_arr, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"JPEG"</span>)</span>
<span id="cb45-7">    image_bytes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> img_byte_arr.getvalue()</span>
<span id="cb45-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> base64.b64encode(image_bytes).decode(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"utf-8"</span>)</span>
<span id="cb45-9"></span>
<span id="cb45-10"></span>
<span id="cb45-11"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> analyze_screenshot(image: Image.Image, prompt, return_class):</span>
<span id="cb45-12">    image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> image.convert(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"RGB"</span>)</span>
<span id="cb45-13">    base64_image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> encode_image_to_base64(image)</span>
<span id="cb45-14">    completion <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.beta.chat.completions.parse(</span>
<span id="cb45-15">        model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"model-identifier"</span>,</span>
<span id="cb45-16">        messages<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb45-17">            {</span>
<span id="cb45-18">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"system"</span>,</span>
<span id="cb45-19">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""You are an AI assistant specialized in organizing a users screenshots into categories and tags.</span></span>
<span id="cb45-20"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">            """</span>,</span>
<span id="cb45-21">            },</span>
<span id="cb45-22">            {</span>
<span id="cb45-23">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user"</span>,</span>
<span id="cb45-24">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: [</span>
<span id="cb45-25">                    {</span>
<span id="cb45-26">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"text"</span>,</span>
<span id="cb45-27">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"text"</span>: prompt,</span>
<span id="cb45-28">                    },</span>
<span id="cb45-29">                    {</span>
<span id="cb45-30">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"image_url"</span>,</span>
<span id="cb45-31">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"image_url"</span>: {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"url"</span>: <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"data:image/jpeg;base64,</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>base64_image<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>},</span>
<span id="cb45-32">                    },</span>
<span id="cb45-33">                ],</span>
<span id="cb45-34">            },</span>
<span id="cb45-35">        ],</span>
<span id="cb45-36">        max_tokens<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2000</span>,</span>
<span id="cb45-37">        temperature<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.7</span>,</span>
<span id="cb45-38">        response_format<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>return_class,</span>
<span id="cb45-39">    )</span>
<span id="cb45-40">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> completion.choices[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].message.parsed</span></code></pre></div>
</div>
<p>Let‚Äôs now try with another screenshot.</p>
<div id="cell-64" class="cell" data-execution_count="58">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb46-1">image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(screenshots[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb46-2">image</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="58">
<div>
<figure class="figure">
<p><img src="https://danielvanstrien.xyz/posts/2024/11/local-vision-language-model-lm-studio_files/figure-html/cell-33-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="cell-65" class="cell" data-execution_count="57">
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb47-1">analyze_screenshot(screenshots[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], prompt, ScreenshotInformation)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="57">
<pre><code>ScreenshotInformation(description='This screenshot shows a list of instructions for analyzing document images.', category=ScreenshotCategory(category='documentation image'), tags=None)</code></pre>
</div>
</div>
<p>To make sure memes are detected let‚Äôs try with a meme.</p>
<div id="cell-67" class="cell" data-execution_count="67">
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb49-1">url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://preview.redd.it/this-meme-only-runs-on-an-h100-v0-urpjifh14xcd1.jpeg?auto=webp&amp;s=7be0109b54cef2cd268659cb29727f6e16462621"</span></span>
<span id="cb49-2">image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(requests.get(url, stream<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>).raw)</span>
<span id="cb49-3">image</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="67">
<div>
<figure class="figure">
<p><img src="https://danielvanstrien.xyz/posts/2024/11/local-vision-language-model-lm-studio_files/figure-html/cell-35-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="cell-68" class="cell" data-execution_count="77">
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb50-1">screenshot_info <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> analyze_screenshot(image, prompt, ScreenshotInformation)</span>
<span id="cb50-2">screenshot_info</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="77">
<pre><code>ScreenshotInformation(description='The couple is discussing Llama3 400b while in bed.', category=ScreenshotCategory(category='meme'), tags=['relationship', 'humor', 'tech'])</code></pre>
</div>
</div>
</section>
</section>
<section id="organizing-the-screenshots-aka-we-dont-need-claude-to-interact-with-our-machines" class="level2">
<h2 class="anchored" data-anchor-id="organizing-the-screenshots-aka-we-dont-need-claude-to-interact-with-our-machines">Organizing the screenshots aka we don‚Äôt need claude to interact with our machines!</h2>
<p>We can now use this to organize our screenshots. We‚Äôll create a new folder on our desktop and move the screenshots into the appropriate folders.</p>
<div id="cell-70" class="cell" data-execution_count="76">
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb52-1">folders <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"meme"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"other"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"documentation_image"</span>]</span>
<span id="cb52-2">base_desktop_folder <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/Users/davanstrien/Desktop/organized_screenshots"</span></span>
<span id="cb52-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> folder <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> folders:</span>
<span id="cb52-4">    Path(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>base_desktop_folder<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>folder<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>).mkdir(exist_ok<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, parents<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
</div>
<div id="cell-71" class="cell" data-execution_count="80">
<div class="sourceCode cell-code" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb53-1">screenshot_info.category.category</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="80">
<pre><code>'meme'</code></pre>
</div>
</div>
<p>We define a mapping from the category to the folder on our desktop.</p>
<div id="cell-73" class="cell" data-execution_count="81">
<div class="sourceCode cell-code" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb55-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> shutil</span>
<span id="cb55-2"></span>
<span id="cb55-3">category_folder_map <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb55-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"meme"</span>: Path(base_desktop_folder) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"meme"</span>,</span>
<span id="cb55-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"other"</span>: Path(base_desktop_folder) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"other"</span>,</span>
<span id="cb55-6">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"documentation image"</span>: Path(base_desktop_folder) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"documentation_image"</span>,</span>
<span id="cb55-7">}</span>
<span id="cb55-8"></span>
<span id="cb55-9">category_folder_map</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="81">
<pre><code>{'meme': PosixPath('/Users/davanstrien/Desktop/organized_screenshots/meme'),
 'other': PosixPath('/Users/davanstrien/Desktop/organized_screenshots/other'),
 'documentation image': PosixPath('/Users/davanstrien/Desktop/organized_screenshots/documentation_image')}</code></pre>
</div>
</div>
<p>and a function to move the screenshot to the appropriate folder. Let‚Äôs try with the first screenshot.</p>
<div id="cell-75" class="cell" data-execution_count="82">
<div class="sourceCode cell-code" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb57-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> organize_screenshot(image_path):</span>
<span id="cb57-2">    image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(image_path).convert(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"RGB"</span>)</span>
<span id="cb57-3">    analysis <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> analyze_screenshot(image, prompt, ScreenshotInformation)</span>
<span id="cb57-4">    category <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> analysis.category.category</span>
<span id="cb57-5">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Moving </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>image_path<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> to </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>category_folder_map[category]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb57-6">    shutil.move(image_path, category_folder_map[category] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> image_path.name)</span>
<span id="cb57-7"></span>
<span id="cb57-8"></span>
<span id="cb57-9">organize_screenshot(screenshots[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace">Moving <span style="color: #800080; text-decoration-color: #800080">/Users/davanstrien/Desktop/</span><span style="color: #ff00ff; text-decoration-color: #ff00ff">Screenshot</span> <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">2024</span>-<span style="color: #008080; text-decoration-color: #008080; font-weight: bold">10</span>-<span style="color: #008080; text-decoration-color: #008080; font-weight: bold">22</span> at <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">18.51</span>.<span style="color: #008080; text-decoration-color: #008080; font-weight: bold">23.</span>png to 
<span style="color: #800080; text-decoration-color: #800080">/Users/davanstrien/Desktop/organized_screenshots/</span><span style="color: #ff00ff; text-decoration-color: #ff00ff">documentation_image</span>
</pre>
</div>
</div>
<p>To prove this works here it is in the correct folder.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://danielvanstrien.xyz/posts/2024/11/screenshot_of_moved_folder.png" class="img-fluid figure-img" style="width:50.0%"></p>
<figcaption>The screenshot folder after moving the first screenshot</figcaption>
</figure>
</div>
<p>We can now try with a bunch of screenshots.</p>
<div id="cell-79" class="cell" data-execution_count="85">
<div class="sourceCode cell-code" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb58-1">screenshots <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(Path(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/Users/davanstrien/Desktop"</span>).glob(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Screenshot*.png"</span>))</span></code></pre></div>
</div>
<div id="cell-80" class="cell" data-execution_count="86">
<div class="sourceCode cell-code" id="cb59" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb59-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span>time</span>
<span id="cb59-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> tqdm.auto <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tqdm</span>
<span id="cb59-3"></span>
<span id="cb59-4">ten_examples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> screenshots[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>]</span>
<span id="cb59-5"></span>
<span id="cb59-6"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> screenshot <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> tqdm(ten_examples):</span>
<span id="cb59-7">    organize_screenshot(screenshot)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>  0%|          | 0/10 [00:00&lt;?, ?it/s]</code></pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace">Moving <span style="color: #800080; text-decoration-color: #800080">/Users/davanstrien/Desktop/</span><span style="color: #ff00ff; text-decoration-color: #ff00ff">Screenshot</span> <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">2024</span>-<span style="color: #008080; text-decoration-color: #008080; font-weight: bold">10</span>-<span style="color: #008080; text-decoration-color: #008080; font-weight: bold">11</span> at <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">15.17</span>.<span style="color: #008080; text-decoration-color: #008080; font-weight: bold">06.</span>png to 
<span style="color: #800080; text-decoration-color: #800080">/Users/davanstrien/Desktop/organized_screenshots/</span><span style="color: #ff00ff; text-decoration-color: #ff00ff">other</span>
</pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 10%|‚ñà         | 1/10 [01:03&lt;09:32, 63.66s/it]</code></pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace">Moving <span style="color: #800080; text-decoration-color: #800080">/Users/davanstrien/Desktop/</span><span style="color: #ff00ff; text-decoration-color: #ff00ff">Screenshot</span> <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">2024</span>-<span style="color: #008080; text-decoration-color: #008080; font-weight: bold">10</span>-<span style="color: #008080; text-decoration-color: #008080; font-weight: bold">17</span> at <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">16.37</span>.<span style="color: #008080; text-decoration-color: #008080; font-weight: bold">22.</span>png to 
<span style="color: #800080; text-decoration-color: #800080">/Users/davanstrien/Desktop/organized_screenshots/</span><span style="color: #ff00ff; text-decoration-color: #ff00ff">other</span>
</pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 20%|‚ñà‚ñà        | 2/10 [02:00&lt;07:56, 59.60s/it]</code></pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace">Moving <span style="color: #800080; text-decoration-color: #800080">/Users/davanstrien/Desktop/</span><span style="color: #ff00ff; text-decoration-color: #ff00ff">Screenshot</span> <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">2024</span>-<span style="color: #008080; text-decoration-color: #008080; font-weight: bold">10</span>-<span style="color: #008080; text-decoration-color: #008080; font-weight: bold">03</span> at <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">09.14</span>.<span style="color: #008080; text-decoration-color: #008080; font-weight: bold">30.</span>png to 
<span style="color: #800080; text-decoration-color: #800080">/Users/davanstrien/Desktop/organized_screenshots/</span><span style="color: #ff00ff; text-decoration-color: #ff00ff">documentation_image</span>
</pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 30%|‚ñà‚ñà‚ñà       | 3/10 [02:58&lt;06:51, 58.74s/it]</code></pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace">Moving <span style="color: #800080; text-decoration-color: #800080">/Users/davanstrien/Desktop/</span><span style="color: #ff00ff; text-decoration-color: #ff00ff">Screenshot</span> <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">2024</span>-<span style="color: #008080; text-decoration-color: #008080; font-weight: bold">10</span>-<span style="color: #008080; text-decoration-color: #008080; font-weight: bold">03</span> at <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">09.14</span>.<span style="color: #008080; text-decoration-color: #008080; font-weight: bold">26.</span>png to 
<span style="color: #800080; text-decoration-color: #800080">/Users/davanstrien/Desktop/organized_screenshots/</span><span style="color: #ff00ff; text-decoration-color: #ff00ff">meme</span>
</pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 40%|‚ñà‚ñà‚ñà‚ñà      | 4/10 [04:26&lt;07:03, 70.56s/it]</code></pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace">Moving <span style="color: #800080; text-decoration-color: #800080">/Users/davanstrien/Desktop/</span><span style="color: #ff00ff; text-decoration-color: #ff00ff">Screenshot</span> <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">2024</span>-<span style="color: #008080; text-decoration-color: #008080; font-weight: bold">10</span>-<span style="color: #008080; text-decoration-color: #008080; font-weight: bold">11</span> at <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">10.49</span>.<span style="color: #008080; text-decoration-color: #008080; font-weight: bold">02.</span>png to 
<span style="color: #800080; text-decoration-color: #800080">/Users/davanstrien/Desktop/organized_screenshots/</span><span style="color: #ff00ff; text-decoration-color: #ff00ff">meme</span>
</pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 50%|‚ñà‚ñà‚ñà‚ñà‚ñà     | 5/10 [05:13&lt;05:09, 61.97s/it]</code></pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace">Moving <span style="color: #800080; text-decoration-color: #800080">/Users/davanstrien/Desktop/</span><span style="color: #ff00ff; text-decoration-color: #ff00ff">Screenshot</span> <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">2024</span>-<span style="color: #008080; text-decoration-color: #008080; font-weight: bold">10</span>-<span style="color: #008080; text-decoration-color: #008080; font-weight: bold">17</span> at <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">16.37</span>.<span style="color: #008080; text-decoration-color: #008080; font-weight: bold">08.</span>png to 
<span style="color: #800080; text-decoration-color: #800080">/Users/davanstrien/Desktop/organized_screenshots/</span><span style="color: #ff00ff; text-decoration-color: #ff00ff">other</span>
</pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 60%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà    | 6/10 [06:37&lt;04:37, 69.48s/it]</code></pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace">Moving <span style="color: #800080; text-decoration-color: #800080">/Users/davanstrien/Desktop/</span><span style="color: #ff00ff; text-decoration-color: #ff00ff">Screenshot</span> <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">2024</span>-<span style="color: #008080; text-decoration-color: #008080; font-weight: bold">10</span>-<span style="color: #008080; text-decoration-color: #008080; font-weight: bold">23</span> at <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">21.48</span>.<span style="color: #008080; text-decoration-color: #008080; font-weight: bold">10.</span>png to 
<span style="color: #800080; text-decoration-color: #800080">/Users/davanstrien/Desktop/organized_screenshots/</span><span style="color: #ff00ff; text-decoration-color: #ff00ff">documentation_image</span>
</pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 70%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà   | 7/10 [08:52&lt;04:33, 91.03s/it]</code></pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace">Moving <span style="color: #800080; text-decoration-color: #800080">/Users/davanstrien/Desktop/</span><span style="color: #ff00ff; text-decoration-color: #ff00ff">Screenshot</span> <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">2024</span>-<span style="color: #008080; text-decoration-color: #008080; font-weight: bold">10</span>-<span style="color: #008080; text-decoration-color: #008080; font-weight: bold">22</span> at <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">17.26</span>.<span style="color: #008080; text-decoration-color: #008080; font-weight: bold">00.</span>png to 
<span style="color: #800080; text-decoration-color: #800080">/Users/davanstrien/Desktop/organized_screenshots/</span><span style="color: #ff00ff; text-decoration-color: #ff00ff">meme</span>
</pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 80%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  | 8/10 [09:35&lt;02:31, 75.68s/it]</code></pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace">Moving <span style="color: #800080; text-decoration-color: #800080">/Users/davanstrien/Desktop/</span><span style="color: #ff00ff; text-decoration-color: #ff00ff">Screenshot</span> <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">2024</span>-<span style="color: #008080; text-decoration-color: #008080; font-weight: bold">10</span>-<span style="color: #008080; text-decoration-color: #008080; font-weight: bold">02</span> at <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">10.31</span>.<span style="color: #008080; text-decoration-color: #008080; font-weight: bold">04.</span>png to 
<span style="color: #800080; text-decoration-color: #800080">/Users/davanstrien/Desktop/organized_screenshots/</span><span style="color: #ff00ff; text-decoration-color: #ff00ff">other</span>
</pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 90%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà | 9/10 [10:39&lt;01:12, 72.05s/it]</code></pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace">Moving <span style="color: #800080; text-decoration-color: #800080">/Users/davanstrien/Desktop/</span><span style="color: #ff00ff; text-decoration-color: #ff00ff">Screenshot</span> <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">2024</span>-<span style="color: #008080; text-decoration-color: #008080; font-weight: bold">10</span>-<span style="color: #008080; text-decoration-color: #008080; font-weight: bold">02</span> at <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">16.57</span>.<span style="color: #008080; text-decoration-color: #008080; font-weight: bold">27.</span>png to 
<span style="color: #800080; text-decoration-color: #800080">/Users/davanstrien/Desktop/organized_screenshots/</span><span style="color: #ff00ff; text-decoration-color: #ff00ff">documentation_image</span>
</pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 10/10 [12:20&lt;00:00, 74.08s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>CPU times: user 1.29 s, sys: 500 ms, total: 1.79 s
Wall time: 12min 20s</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code></code></pre>
</div>
</div>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>Without too much effort we‚Äôve been able to use a VLM to sort out our screenshots into different folders. This probably seems like a bit of a trivial tasks but hopefully it gives you an idea of how you can use VLM‚Äôs to do all sorts of other tasks (or use an LLM to do tasks that require a bit more than just a simple chat).</p>
<p>In my opinion a very important component of this working well is the use of structured outputs. It allows us to enforce a certain format and makes it easier to use the output in a program.</p>
<p>One of the limitations with this current setup is that inference is pretty slow. To be honest, I‚Äôm quite excited at how well a local VLM can perform and for a lot of tasks it doesn‚Äôt really matter that much if it‚Äôs slow if it‚Äôs local and you don‚Äôt need to pay for cloud resources (you can just run it in the background/while you do other things).</p>
<p>The recent release of <a href="https://huggingface.co/rhymes-ai/Aria">Aria</a> has me very excited about open VLMs. At the moment it‚Äôs quite a beefy model and is unlikely to run on my mac machine but there has been a lot of progress in quantizing models and other tricks to make running these models much more accessible. For text models we now have a lot of smallish models (~8B parameters) that are pretty capable for many tasks and run very quickly even locally. It‚Äôs quite likely that we‚Äôll soon see a lot more open VLMs that are actually accessible to run on consumer hardware.</p>
<section id="resources" class="level3">
<h3 class="anchored" data-anchor-id="resources">Resources</h3>
<ul>
<li><a href="https://lmstudio.ai/">LM Studio</a></li>
<li><a href="https://huggingface.co/mistral-community/pixtral-12b">Pixtral</a></li>
<li><a href="https://github.com/ml-explore/mlx">MLX</a></li>
<li><a href="https://github.com/lmstudio-ai/mlx-vlm">mlx-vlm</a></li>
<li><a href="https://huggingface.co/rhymes-ai/Aria">Aria</a></li>
</ul>


</section>
</section>

 ]]></description>
  <guid>https://danielvanstrien.xyz/posts/2024/11/local-vision-language-model-lm-studio.html</guid>
  <pubDate>Wed, 23 Oct 2024 00:00:00 GMT</pubDate>
  <media:content url="https://danielvanstrien.xyz/posts/2024/11/illustration.png" medium="image" type="image/png" height="36" width="144"/>
</item>
<item>
  <title>Using ColPali with Qdrant to index and search a UFO document dataset</title>
  <dc:creator>Daniel van Strien</dc:creator>
  <link>https://danielvanstrien.xyz/posts/post-with-code/colpali-qdrant/2024-10-02_using_colpali_with_qdrant.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>tl;dr: How can use <a href="https://qdrant.tech/">Qdrant</a> + <a href="https://github.com/daniel-avn/colpali">ColPali</a> to index and search a UFO dataset.</p>
<p>ColPali is a new multimodal retrieval approach that aims to replace existing document retrievers, which often rely on an OCR step, with an end-to-end multimodal approach. This approach also aims to take into account the visual content and layout of the documents in addition to the textual content.</p>
<p>In a <a href="https://danielvanstrien.xyz/posts/post-with-code/colpali/2024-09-23-generate_colpali_dataset.html">previous blog post</a>, I showed how a VLM can create synthetic data for fine-tuning a ColPali model. In this post, we will examine how to index and search a UFO dataset using Qdrant and ColPali.</p>
<section id="multivector-databases-support" class="level2">
<h2 class="anchored" data-anchor-id="multivector-databases-support">Multivector Databases support</h2>
<p>The last few years have seen an explosion of vector databases. These databases are optimized for storing and searching for high-dimensional data. Traditionally most of the vectors these databases have been storing are single-vector embeddings i.e a vector that looks like:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1">[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.4</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>]</span></code></pre></div>
<p>These vectors can store rich representations of the data they are encoding. However, more recently, several new techniques have been proposed which don‚Äôt rely on a single vector but instead use a set of vectors i.e.&nbsp;something like this:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">[[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.4</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>], </span>
<span id="cb2-2">[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.4</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>], </span>
<span id="cb2-3">[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.4</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>]]</span></code></pre></div>
<p>In the case of ColBERT, these multiple vectors represent the query and document tokens. These are then compared using a late interaction mechanism. This ‚Äúlate interaction‚Äù essentially means that rather than creating a pooled representation of the document and query, we compare each query token to each document token individually.</p>
<p>This similarity has mostly been calculated using MaxSim, which takes the element-wise maximum similarity between the query and document tokens. ColPali uses a similar late interaction mechanism to compare the query and document tokens. The tl;dr is that instead of comparing a single vector to another single vector, we compare a set of vectors to another set of vectors. This approach is borrowed from ColBERT. The diagram below shows how this works in the case of ColBERT.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.answer.ai/posts/colbert_pooling/colbert.png" class="img-fluid figure-img"></p>
<figcaption>Visual representation of ColBERT (source: https://www.answer.ai/posts/colbert-pooling.html)</figcaption>
</figure>
</div>
<p>I won‚Äôt go into the details too much here, since <a href="https://blog.vespa.ai/pretrained-transformer-language-models-for-search-part-3/">other posts</a> cover this already. Instead, I will show how we can use ColPali using the Qdrant vector database.</p>
<section id="what-is-qdrant" class="level3">
<h3 class="anchored" data-anchor-id="what-is-qdrant">What is Qdrant?</h3>
<p>Qdrant is a vector database. Many open-source and closed-source vector databases exist, and many ‚Äútraditional‚Äù databases have also added support for vectors.</p>
<p>Currently, only a small number of databases support multivectors. I am aware of the following:</p>
<ul>
<li><a href="https://vespa.ai/">Vespa</a></li>
<li><a href="https://qdrant.tech/">Qdrant</a></li>
</ul>
<p>From what I have understood, <a href="https://weaviate.io/">Weaviate</a> has an example recipe for <a href="https://github.com/weaviate/recipes/blob/main/weaviate-features/named-vectors/NamedVectors-ColPali-POC.ipynb">ColPali</a>. However, they don‚Äôt currently natively support MaxSim so using this in practice might be a bit more challenging.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>Vespa, and in particular, <a href="https://x.com/jobergum">Jo Kristian Bergum</a>, have done a lot of work on ColPali and are well worth following if you are interested in this area. It‚Äôs on my list to finally try Vespa!</p>
</div>
</div>
<p>We‚Äôll start by installing the requirements. For the example, we‚Äôll use a local in-memory Qdrant DB, so you don‚Äôt need to worry about any setup. You can easily swap this out for a remote DB or an on-disk DB if you want to use this approach in production.</p>
<div id="cell-5" class="cell" data-outputid="8343c73a-5831-4204-8802-7b4a4fab9af8">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>pip install uv</span>
<span id="cb3-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>uv pip install <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span>system colpali_engine<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3.1</span> datasets huggingface_hub[hf_transfer] qdrant<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>client transformers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4.45.0</span> stamina rich</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Requirement already satisfied: uv in /usr/local/lib/python3.10/dist-packages (0.4.18)
Audited 7 packages in 69ms</code></pre>
</div>
</div>
<div id="cell-6" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb5-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb5-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb5-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> qdrant_client <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> QdrantClient</span>
<span id="cb5-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> qdrant_client.http <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> models</span>
<span id="cb5-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> tqdm <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tqdm</span>
<span id="cb5-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> datasets <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> load_dataset</span></code></pre></div>
</div>
<p>We can set the <code>HF_HUB_ENABLE_HF_TRANSFER</code> environment variable to 1 to enable faster downloads. This is optional but should help if you have a fast connection.</p>
<div id="cell-8" class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">os.environ[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"HF_HUB_ENABLE_HF_TRANSFER"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1"</span></span></code></pre></div>
</div>
<p>For this example blog, we‚Äôll use the <a href="https://huggingface.co/datasets/davanstrien/ufo-ColPali">ufo-ColPali</a> dataset that I created as part of my <a href="https://danielvanstrien.xyz/posts/post-with-code/colpali/2024-09-23-generate_colpali_dataset.html">previous post</a>. If you have your own PDFs you want to work with you can use the <a href="https://huggingface.co/spaces/Dataset-Creation-Tools/pdf-to-page-images-dataset">PDF to Page Images Dataset Space</a> to convert your PDFs into a Hugging Face dataset of page images.</p>
<div id="cell-10" class="cell" data-execution_count="94">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> load_dataset(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"davanstrien/ufo-ColPali"</span>, split<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"train"</span>)</span></code></pre></div>
</div>
<p>As a reminder of what the dataset looks like</p>
<div id="cell-12" class="cell" data-outputid="c9662182-026e-4d1b-8c7f-d90745d70137" data-execution_count="95">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">dataset</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="95">
<pre><code>Dataset({
    features: ['image', 'raw_queries', 'broad_topical_query', 'broad_topical_explanation', 'specific_detail_query', 'specific_detail_explanation', 'visual_element_query', 'visual_element_explanation', 'parsed_into_json'],
    num_rows: 2243
})</code></pre>
</div>
</div>
<p>In this particular example, we‚Äôll just work with the images, but for many ‚Äòreal world‚Äô document collections, you are likely to have at least some metadata associated with the documents that could also be indexed in the DB. These could include things like the title, author, date, etc. These additional metadata fields can also be used as part of the search query and for retrieval.</p>
<p>Let‚Äôs look at an example image to see what sort of data we are working with.</p>
<div id="cell-15" class="cell" data-outputid="6e41d4e9-9d0c-45d1-d128-63348039cc25" data-execution_count="12">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">dataset[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"image"</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="12">
<div>
<figure class="figure">
<p><img src="https://danielvanstrien.xyz/posts/post-with-code/colpali-qdrant/2024-10-02_using_colpali_with_qdrant_files/figure-html/cell-7-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
</section>
<section id="indexing-the-dataset" class="level2">
<h2 class="anchored" data-anchor-id="indexing-the-dataset">Indexing the dataset</h2>
<p>Let‚Äôs now walk through how to index the dataset using Qdrant.</p>
<section id="creating-a-qdrant-client" class="level3">
<h3 class="anchored" data-anchor-id="creating-a-qdrant-client">Creating a Qdrant client</h3>
<p>We can use the Qdrant Python client to interact with a Qdrant database. One of the nice features of this client is its in-memory implementation, which is very useful for testing. It‚Äôs not recommended for production use, but it‚Äôs great for getting started and means we can jump right into the code without having to worry about setting up a database.</p>
<div id="cell-17" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Only for colab, otherwise can load from a `.env` file or similar</span></span>
<span id="cb11-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># from google.colab import userdata</span></span></code></pre></div>
</div>
<p>To prove that switching between the in-memory and remote clients is easy, the code below is all I need to use a DB running on a Qdrant cloud free tier. Qdrant is open source, so you can run it on your infrastructure.</p>
<div id="cell-19" class="cell" data-outputid="8f893c87-480e-484a-f80d-348624d75164" data-execution_count="142">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># qdrant_client = QdrantClient(</span></span>
<span id="cb12-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     url="https://e25145aa-1e00-489a-948f-4633d3dd8a37.europe-west3-0.gcp.cloud.qdrant.io",</span></span>
<span id="cb12-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     api_key=userdata.get('qdrantcloud'),</span></span>
<span id="cb12-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># )</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>collections=[CollectionDescription(name='ufo2'), CollectionDescription(name='ufo')]</code></pre>
</div>
</div>
<div id="cell-20" class="cell" data-execution_count="113">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">qdrant_client <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> QdrantClient(</span>
<span id="cb14-2">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">":memory:"</span></span>
<span id="cb14-3">)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Use ":memory:" for in-memory database or "path/to/db" for persistent storage</span></span></code></pre></div>
</div>
</section>
<section id="setting-up-the-colpali-model" class="level3">
<h3 class="anchored" data-anchor-id="setting-up-the-colpali-model">Setting up the ColPali model</h3>
<p>We‚Äôll use a ColPali model <a href="https://huggingface.co/davanstrien/finetune_colpali_v1_2-ufo-4bit">davanstrien/finetune_colpali_v1_2-ufo-4bit</a> fine-tuned on the <a href="https://huggingface.co/datasets/davanstrien/ufo-ColPali">ufo-ColPali</a> dataset. This model was trained using the excellent notebook in the <a href="https://github.com/tonywu71/colpali-cookbooks">ColPali cookbooks repo</a> from <a href="https://huggingface.co/tonywu71">Tony Wu</a>.</p>
<p>If you want to use a standard ColPali model that is not optimized for UFO document retrieval, you may want to try the newly released <a href="https://huggingface.co/vidore/colqwen2-v0.1">vidore/colqwen2-v0.1</a> model instead.</p>
<div id="cell-22" class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># from colpali_engine.models import ColQwen2, ColQwen2Processor</span></span>
<span id="cb15-2"></span>
<span id="cb15-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># model = ColQwen2.from_pretrained(</span></span>
<span id="cb15-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     "vidore/colqwen2-v0.1",</span></span>
<span id="cb15-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     torch_dtype=torch.bfloat16,</span></span>
<span id="cb15-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     device_map="cuda:0",  # or "mps" if on Apple Silicon</span></span>
<span id="cb15-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># )</span></span>
<span id="cb15-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># processor = ColQwen2Processor.from_pretrained("vidore/colqwen2-v0.1")</span></span></code></pre></div>
</div>
<div id="cell-23" class="cell" data-outputid="834f8b1b-d3cf-48c5-bf9b-7aa28c1f2d65" data-execution_count="55">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> colpali_engine.models <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ColPali, ColPaliProcessor</span>
<span id="cb16-2"></span>
<span id="cb16-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize ColPali model and processor</span></span>
<span id="cb16-4">model_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (</span>
<span id="cb16-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"davanstrien/finetune_colpali_v1_2-ufo-4bit"</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Use the latest version available</span></span>
<span id="cb16-6">)</span>
<span id="cb16-7">colpali_model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ColPali.from_pretrained(</span>
<span id="cb16-8">    model_name,</span>
<span id="cb16-9">    torch_dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.bfloat16,</span>
<span id="cb16-10">    device_map<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cuda:0"</span>,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Use "cuda:0" for GPU, "cpu" for CPU, or "mps" for Apple Silicon</span></span>
<span id="cb16-11">)</span>
<span id="cb16-12">colpali_processor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ColPaliProcessor.from_pretrained(</span>
<span id="cb16-13">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"vidore/colpaligemma-3b-pt-448-base"</span></span>
<span id="cb16-14">)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"e3437d645f4847c4ae244382eaa198ff","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
</div>
</section>
<section id="what-is-a-multivector-and-how-do-we-use-it-in-qdrant" class="level3">
<h3 class="anchored" data-anchor-id="what-is-a-multivector-and-how-do-we-use-it-in-qdrant">What is a multivector, and how do we use it in Qdrant?</h3>
<p>To use multivectors in Qdrant, we need to specify the dimensions of the vectors. From the Qdrant docs:</p>
<blockquote class="blockquote">
<p>The length of the matrix is fixed, but the number of vectors in the matrix can be different for each point.</p>
</blockquote>
<p>So, in order to use multivectors, we need to specify their length. We can check this by passing in an example image to the model and checking the shape of the output.</p>
<div id="cell-25" class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">sample_image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dataset[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"image"</span>]</span>
<span id="cb17-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> torch.no_grad():</span>
<span id="cb17-3">    sample_batch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> colpali_processor.process_images([sample_image]).to(</span>
<span id="cb17-4">        colpali_model.device</span>
<span id="cb17-5">    )</span>
<span id="cb17-6">    sample_embedding <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> colpali_model(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>sample_batch)</span></code></pre></div>
</div>
<p>Since it‚Äôs always fun to look at tensors, let‚Äôs see what they output embeddings from the ColPali model looks like</p>
<div id="cell-27" class="cell" data-outputid="3ded594d-7ef6-420f-f3c3-4f4d85f10d0b" data-execution_count="17">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">sample_embedding</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="17">
<pre><code>tensor([[[ 0.0093, -0.0045,  0.1445,  ...,  0.0248, -0.0820, -0.1641],
         [-0.0021,  0.1758,  0.1699,  ...,  0.0179, -0.0952, -0.1138],
         [-0.0237,  0.0366,  0.0732,  ...,  0.0449, -0.0918, -0.1738],
         ...,
         [-0.0588, -0.0243,  0.1650,  ..., -0.0703,  0.0767,  0.0486],
         [-0.1108,  0.0986,  0.1826,  ...,  0.0278, -0.0576, -0.0520],
         [-0.0693,  0.1123,  0.2207,  ...,  0.0172, -0.0679, -0.0830]]],
       device='cuda:0', dtype=torch.bfloat16)</code></pre>
</div>
</div>
<p>and check the shape</p>
<div id="cell-29" class="cell" data-outputid="e1e1af79-f752-4dff-aa3c-913d9d983cf6" data-execution_count="18">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">sample_embedding.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="18">
<pre><code>torch.Size([1, 1030, 128])</code></pre>
</div>
</div>
<p>As we can see, compared to a usual dense embedding, the output of the ColPali model is a multivector. We can see that the shape of the output is <code>(1, 1030, 128)</code>. We can check the length of the vectors by looking at the last dimension of the tensor. In this case, the length of the vectors is 128.</p>
<div id="cell-31" class="cell" data-outputid="0f8697dd-ae8a-41ec-9b02-c11730211aed" data-execution_count="22">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">vector_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sample_embedding.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]</span>
<span id="cb22-2">vector_size</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="22">
<pre><code>128</code></pre>
</div>
</div>
</section>
</section>
</section>
<section id="create-a-collection-in-qdrant-with-a-multivector-configuration" class="level1">
<h1>Create a collection in Qdrant with a multivector configuration</h1>
<p>Now that we know the length of the vectors, we can create a collection in Qdrant using the correct configuration.</p>
<p>Qdrant has a lot of knobs and dials that you can use to optimize the search for your particular use case. We‚Äôll see a few of these, but there are likely to be many more optimizations that you can still make.</p>
<p>First, we define a name for our collection. If needed, we can store multiple collections in a single Qdrant instance.</p>
<div id="cell-33" class="cell" data-execution_count="143">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">collection_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ufo"</span></span></code></pre></div>
</div>
<p>We need to define several different parameters for the collection. One of these is the <code>VectorParams</code>. These let Qdrant know what size of vectors we want to store and what similarity metrics we want to use for comparing vectors. In this case, we also pass in a <code>MultivVectorConfig</code>, which tells Qdrant that we are storing multivectors.</p>
<p>At the moment, Qdrant supports a single comparator for multivectors, <code>MaxSim</code>. A nice blog post goes through this in more detail <a href="https://huggingface.co/blog/fsommers/document-similarity-colpali">here</a>.</p>
<div id="cell-35" class="cell" data-execution_count="25">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">vector_params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> models.VectorParams(</span>
<span id="cb25-2">    size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>vector_size,</span>
<span id="cb25-3">    distance<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>models.Distance.COSINE,</span>
<span id="cb25-4">    multivector_config<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>models.MultiVectorConfig(</span>
<span id="cb25-5">        comparator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>models.MultiVectorComparator.MAX_SIM</span>
<span id="cb25-6">    ),</span>
<span id="cb25-7">)</span></code></pre></div>
</div>
<div id="cell-36" class="cell" data-outputid="b3a82ffd-41e4-427b-c33d-977528e38d35" data-execution_count="27">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(vector_params)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>size=128 distance=&lt;Distance.COSINE: 'Cosine'&gt; hnsw_config=None quantization_config=None on_disk=None datatype=None multivector_config=MultiVectorConfig(comparator=&lt;MultiVectorComparator.MAX_SIM: 'max_sim'&gt;)</code></pre>
</div>
</div>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>There has been some dunking on Twitter about the potential cost of scaling multivector approaches. This is a big topic which I won‚Äôt cover in detail in this post, but Jo Kristian Bergum (<a href="https://x.com/jobergum">jobergum</a> on Twitter) wrote a great blog post on how to scale ColPali to billions of documents: <a href="https://blog.vespa.ai/scaling-colpali-to-billions/">https://blog.vespa.ai/scaling-colpali-to-billions/</a>.</p>
<p>One of the possible optimizations discussed in this post was switching from using MaxSim to a hamming-based MaxSim that works using binary vectors. It is possible to convert the vectors from the ColPali model to binary vectors within Qdrant, but currently, they don‚Äôt support this new similarity metric.</p>
</div>
</div>
<p>As mentioned above, one of the criticisms of ColPali and ColBert is that you suddenly need to store many more vectors. One way of reducing this with minimal performance degradation is to use some form of quantization. There are a few different approaches supported by Qdrant (<a href="https://qdrant.tech/documentation/guides/quantization/">docs</a>). One of these is Scaler Quantization:</p>
<blockquote class="blockquote">
<p>Scalar quantization, in the context of vector search engines, is a compression technique that compresses vectors by reducing the number of bits used to represent each vector component.</p>
</blockquote>
<blockquote class="blockquote">
<p>For instance, Qdrant uses 32-bit floating numbers to represent the original vector components. Scalar quantization allows you to reduce the number of bits used to 8. In other words, Qdrant performs float32 -&gt; uint8 conversion for each vector component. Effectively, this means that the amount of memory required to store a vector is reduced by a factor of 4.</p>
</blockquote>
<blockquote class="blockquote">
<p>In addition to reducing the memory footprint, scalar quantization also speeds up the search process. Qdrant uses a special SIMD CPU instruction to perform fast vector comparison. This instruction works with 8-bit integers, so the conversion to uint8 allows Qdrant to perform the comparison faster. <a href="https://qdrant.tech/documentation/guides/quantization/#scalar-quantization">source</a></p>
</blockquote>
<p>We can define a <code>ScalarQuantizationConfig</code> and pass it when creating the collection. On the server side, Qdrant will convert the vectors to 8-bit integers, reducing the memory footprint and speeding up the search process. You can also switch on or off the <code>always_ram</code> parameter, keeping the vectors in RAM. This will increase performance at the cost of memory usage.</p>
<div id="cell-39" class="cell" data-execution_count="28">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1">scalar_quant <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> models.ScalarQuantizationConfig(</span>
<span id="cb28-2">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>models.ScalarType.INT8,</span>
<span id="cb28-3">    quantile<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.99</span>,</span>
<span id="cb28-4">    always_ram<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>,</span>
<span id="cb28-5">)</span></code></pre></div>
</div>
<p>We can pass in all of these options when creating the collection.</p>
<div id="cell-41" class="cell" data-outputid="89000961-0a65-4fef-d0af-d81e5abddf9a" data-execution_count="148">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1">qdrant_client.recreate_collection(</span>
<span id="cb29-2">    collection_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>collection_name,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the name of the collection</span></span>
<span id="cb29-3">    on_disk_payload<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># store the payload on disk</span></span>
<span id="cb29-4">    optimizers_config<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>models.OptimizersConfigDiff(</span>
<span id="cb29-5">        indexing_threshold<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span>
<span id="cb29-6">    ),  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># it can be useful to swith this off when doing a bulk upload and then manually trigger the indexing once the upload is done</span></span>
<span id="cb29-7">    vectors_config<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>models.VectorParams(</span>
<span id="cb29-8">        size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>vector_size,</span>
<span id="cb29-9">        distance<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>models.Distance.COSINE,</span>
<span id="cb29-10">        multivector_config<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>models.MultiVectorConfig(</span>
<span id="cb29-11">            comparator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>models.MultiVectorComparator.MAX_SIM</span>
<span id="cb29-12">        ),</span>
<span id="cb29-13">        quantization_config<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>models.ScalarQuantization(</span>
<span id="cb29-14">            scalar<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>models.ScalarQuantizationConfig(</span>
<span id="cb29-15">                <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>models.ScalarType.INT8,</span>
<span id="cb29-16">                quantile<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.99</span>,</span>
<span id="cb29-17">                always_ram<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb29-18">            ),</span>
<span id="cb29-19">        ),</span>
<span id="cb29-20">    ),</span>
<span id="cb29-21">)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>DeprecationWarning: `recreate_collection` method is deprecated and will be removed in the future. Use `collection_exists` to check collection existence and `create_collection` instead.
  qdrant_client.recreate_collection(</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="148">
<pre><code>True</code></pre>
</div>
</div>
<p>We define a helper function to upload points to Qdrant via the client. We use the <code>stamina</code> library to enable retries in case of network issues (I didn‚Äôt have any issues with the in-memory client, but having this in place can be useful if you are doing a large upload).</p>
<div id="cell-43" class="cell" data-execution_count="149">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> stamina</span>
<span id="cb32-2"></span>
<span id="cb32-3"></span>
<span id="cb32-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@stamina.retry</span>(on<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">Exception</span>, attempts<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb32-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> upsert_to_qdrant(batch):</span>
<span id="cb32-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">try</span>:</span>
<span id="cb32-7">        qdrant_client.upsert(</span>
<span id="cb32-8">            collection_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>collection_name,</span>
<span id="cb32-9">            points<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>points,</span>
<span id="cb32-10">            wait<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>,</span>
<span id="cb32-11">        )</span>
<span id="cb32-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">except</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">Exception</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> e:</span>
<span id="cb32-13">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Error during upsert: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>e<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb32-14">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb32-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span></code></pre></div>
</div>
<p>We will now upload the vectors to qdrant. We do this by creating batches of data, passing it through the ColPali model and then adding the embeddings to a qdrant <code>PointStruct</code>. If you have a smaller GPU you will likely want to reduce the batch size down a bit.</p>
<div id="cell-45" class="cell" data-outputid="340301f9-86ce-4b62-ae68-b796348248e2">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1">batch_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Adjust based on your GPU memory constraints</span></span>
<span id="cb33-2"></span>
<span id="cb33-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Use tqdm to create a progress bar</span></span>
<span id="cb33-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> tqdm(total<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(dataset), desc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Indexing Progress"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pbar:</span>
<span id="cb33-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(dataset), batch_size):</span>
<span id="cb33-6">        batch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dataset[i : i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> batch_size]</span>
<span id="cb33-7"></span>
<span id="cb33-8">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The images are already PIL Image objects, so we can use them directly</span></span>
<span id="cb33-9">        images <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> batch[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"image"</span>]</span>
<span id="cb33-10"></span>
<span id="cb33-11">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Process and encode images</span></span>
<span id="cb33-12">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> torch.no_grad():</span>
<span id="cb33-13">            batch_images <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> colpali_processor.process_images(images).to(</span>
<span id="cb33-14">                colpali_model.device</span>
<span id="cb33-15">            )</span>
<span id="cb33-16">            image_embeddings <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> colpali_model(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>batch_images)</span>
<span id="cb33-17"></span>
<span id="cb33-18">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Prepare points for Qdrant</span></span>
<span id="cb33-19">        points <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb33-20">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> j, embedding <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(image_embeddings):</span>
<span id="cb33-21">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert the embedding to a list of vectors</span></span>
<span id="cb33-22">            multivector <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> embedding.cpu().<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>().numpy().tolist()</span>
<span id="cb33-23">            points.append(</span>
<span id="cb33-24">                models.PointStruct(</span>
<span id="cb33-25">                    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> j,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># we just use the index as the ID</span></span>
<span id="cb33-26">                    vector<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>multivector,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This is now a list of vectors</span></span>
<span id="cb33-27">                    payload<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{</span>
<span id="cb33-28">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"source"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"internet archive"</span></span>
<span id="cb33-29">                    },  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># can also add other metadata/data</span></span>
<span id="cb33-30">                )</span>
<span id="cb33-31">            )</span>
<span id="cb33-32">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Upload points to Qdrant</span></span>
<span id="cb33-33">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">try</span>:</span>
<span id="cb33-34">            upsert_to_qdrant(points)</span>
<span id="cb33-35">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># clown level error handling here ü§°</span></span>
<span id="cb33-36">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">except</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">Exception</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> e:</span>
<span id="cb33-37">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Error during upsert: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>e<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb33-38">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">continue</span></span>
<span id="cb33-39"></span>
<span id="cb33-40">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Update the progress bar</span></span>
<span id="cb33-41">        pbar.update(batch_size)</span>
<span id="cb33-42"></span>
<span id="cb33-43"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Indexing complete!"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Indexing Progress:  25%|‚ñà‚ñà‚ñç       | 558/2243 [04:16&lt;13:14,  2.12it/s]</code></pre>
</div>
</div>
<p>If you had the indexing off during the upload you can trigger an index by setting a lower indexing threshold.</p>
<div id="cell-47" class="cell">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1">qdrant_client.update_collection(</span>
<span id="cb35-2">    collection_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>collection_name,</span>
<span id="cb35-3">    optimizer_config<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>models.OptimizersConfigDiff(indexing_threshold<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>),</span>
<span id="cb35-4">)</span></code></pre></div>
</div>
<p>Let‚Äôs take a look at some info about the collection (we‚Äôll use <code>rich</code> to make the output a bit nicer to look at)</p>
<div id="cell-49" class="cell" data-outputid="2e7369de-1868-42cd-d27a-a85a7c30f794" data-execution_count="118">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rich <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> r_print</span>
<span id="cb36-2"></span>
<span id="cb36-3">collection <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> qdrant_client.get_collection(collection_name)</span>
<span id="cb36-4">r_print(collection)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #800080; text-decoration-color: #800080; font-weight: bold">CollectionInfo</span><span style="font-weight: bold">(</span>
    <span style="color: #808000; text-decoration-color: #808000">status</span>=<span style="font-weight: bold">&lt;</span><span style="color: #ff00ff; text-decoration-color: #ff00ff; font-weight: bold">CollectionStatus.GREEN:</span><span style="color: #000000; text-decoration-color: #000000"> </span><span style="color: #008000; text-decoration-color: #008000">'green'</span><span style="color: #000000; text-decoration-color: #000000">&gt;,</span>
<span style="color: #000000; text-decoration-color: #000000">    </span><span style="color: #808000; text-decoration-color: #808000">optimizer_status</span><span style="color: #000000; text-decoration-color: #000000">=&lt;OptimizersStatusOneOf.OK: </span><span style="color: #008000; text-decoration-color: #008000">'ok'</span><span style="color: #000000; text-decoration-color: #000000">&gt;,</span>
<span style="color: #000000; text-decoration-color: #000000">    </span><span style="color: #808000; text-decoration-color: #808000">vectors_count</span><span style="color: #000000; text-decoration-color: #000000">=</span><span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span><span style="color: #000000; text-decoration-color: #000000">,</span>
<span style="color: #000000; text-decoration-color: #000000">    </span><span style="color: #808000; text-decoration-color: #808000">indexed_vectors_count</span><span style="color: #000000; text-decoration-color: #000000">=</span><span style="color: #008080; text-decoration-color: #008080; font-weight: bold">0</span><span style="color: #000000; text-decoration-color: #000000">,</span>
<span style="color: #000000; text-decoration-color: #000000">    </span><span style="color: #808000; text-decoration-color: #808000">points_count</span><span style="color: #000000; text-decoration-color: #000000">=</span><span style="color: #008080; text-decoration-color: #008080; font-weight: bold">2243</span><span style="color: #000000; text-decoration-color: #000000">,</span>
<span style="color: #000000; text-decoration-color: #000000">    </span><span style="color: #808000; text-decoration-color: #808000">segments_count</span><span style="color: #000000; text-decoration-color: #000000">=</span><span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span><span style="color: #000000; text-decoration-color: #000000">,</span>
<span style="color: #000000; text-decoration-color: #000000">    </span><span style="color: #808000; text-decoration-color: #808000">config</span><span style="color: #000000; text-decoration-color: #000000">=</span><span style="color: #800080; text-decoration-color: #800080; font-weight: bold">CollectionConfig</span><span style="color: #000000; text-decoration-color: #000000; font-weight: bold">(</span>
<span style="color: #000000; text-decoration-color: #000000">        </span><span style="color: #808000; text-decoration-color: #808000">params</span><span style="color: #000000; text-decoration-color: #000000">=</span><span style="color: #800080; text-decoration-color: #800080; font-weight: bold">CollectionParams</span><span style="color: #000000; text-decoration-color: #000000; font-weight: bold">(</span>
<span style="color: #000000; text-decoration-color: #000000">            </span><span style="color: #808000; text-decoration-color: #808000">vectors</span><span style="color: #000000; text-decoration-color: #000000">=</span><span style="color: #800080; text-decoration-color: #800080; font-weight: bold">VectorParams</span><span style="color: #000000; text-decoration-color: #000000; font-weight: bold">(</span>
<span style="color: #000000; text-decoration-color: #000000">                </span><span style="color: #808000; text-decoration-color: #808000">size</span><span style="color: #000000; text-decoration-color: #000000">=</span><span style="color: #008080; text-decoration-color: #008080; font-weight: bold">128</span><span style="color: #000000; text-decoration-color: #000000">,</span>
<span style="color: #000000; text-decoration-color: #000000">                </span><span style="color: #808000; text-decoration-color: #808000">distance</span><span style="color: #000000; text-decoration-color: #000000">=&lt;Distance.COSINE: </span><span style="color: #008000; text-decoration-color: #008000">'Cosine'</span><span style="color: #000000; text-decoration-color: #000000">&gt;,</span>
<span style="color: #000000; text-decoration-color: #000000">                </span><span style="color: #808000; text-decoration-color: #808000">hnsw_config</span><span style="color: #000000; text-decoration-color: #000000">=</span><span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span><span style="color: #000000; text-decoration-color: #000000">,</span>
<span style="color: #000000; text-decoration-color: #000000">                </span><span style="color: #808000; text-decoration-color: #808000">quantization_config</span><span style="color: #000000; text-decoration-color: #000000">=</span><span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span><span style="color: #000000; text-decoration-color: #000000">,</span>
<span style="color: #000000; text-decoration-color: #000000">                </span><span style="color: #808000; text-decoration-color: #808000">on_disk</span><span style="color: #000000; text-decoration-color: #000000">=</span><span style="color: #00ff00; text-decoration-color: #00ff00; font-style: italic">True</span><span style="color: #000000; text-decoration-color: #000000">,</span>
<span style="color: #000000; text-decoration-color: #000000">                </span><span style="color: #808000; text-decoration-color: #808000">datatype</span><span style="color: #000000; text-decoration-color: #000000">=</span><span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span><span style="color: #000000; text-decoration-color: #000000">,</span>
<span style="color: #000000; text-decoration-color: #000000">                </span><span style="color: #808000; text-decoration-color: #808000">multivector_config</span><span style="color: #000000; text-decoration-color: #000000">=</span><span style="color: #800080; text-decoration-color: #800080; font-weight: bold">MultiVectorConfig</span><span style="color: #000000; text-decoration-color: #000000; font-weight: bold">(</span><span style="color: #808000; text-decoration-color: #808000">comparator</span><span style="color: #000000; text-decoration-color: #000000">=&lt;MultiVectorComparator.MAX_SIM: </span><span style="color: #008000; text-decoration-color: #008000">'max_sim'</span><span style="font-weight: bold">&gt;)</span>
            <span style="font-weight: bold">)</span>,
            <span style="color: #808000; text-decoration-color: #808000">shard_number</span>=<span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>,
            <span style="color: #808000; text-decoration-color: #808000">sharding_method</span>=<span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>,
            <span style="color: #808000; text-decoration-color: #808000">replication_factor</span>=<span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>,
            <span style="color: #808000; text-decoration-color: #808000">write_consistency_factor</span>=<span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>,
            <span style="color: #808000; text-decoration-color: #808000">read_fan_out_factor</span>=<span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>,
            <span style="color: #808000; text-decoration-color: #808000">on_disk_payload</span>=<span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>,
            <span style="color: #808000; text-decoration-color: #808000">sparse_vectors</span>=<span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>
        <span style="font-weight: bold">)</span>,
        <span style="color: #808000; text-decoration-color: #808000">hnsw_config</span>=<span style="color: #800080; text-decoration-color: #800080; font-weight: bold">HnswConfig</span><span style="font-weight: bold">(</span>
            <span style="color: #808000; text-decoration-color: #808000">m</span>=<span style="color: #008080; text-decoration-color: #008080; font-weight: bold">16</span>,
            <span style="color: #808000; text-decoration-color: #808000">ef_construct</span>=<span style="color: #008080; text-decoration-color: #008080; font-weight: bold">100</span>,
            <span style="color: #808000; text-decoration-color: #808000">full_scan_threshold</span>=<span style="color: #008080; text-decoration-color: #008080; font-weight: bold">10000</span>,
            <span style="color: #808000; text-decoration-color: #808000">max_indexing_threads</span>=<span style="color: #008080; text-decoration-color: #008080; font-weight: bold">0</span>,
            <span style="color: #808000; text-decoration-color: #808000">on_disk</span>=<span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>,
            <span style="color: #808000; text-decoration-color: #808000">payload_m</span>=<span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>
        <span style="font-weight: bold">)</span>,
        <span style="color: #808000; text-decoration-color: #808000">optimizer_config</span>=<span style="color: #800080; text-decoration-color: #800080; font-weight: bold">OptimizersConfig</span><span style="font-weight: bold">(</span>
            <span style="color: #808000; text-decoration-color: #808000">deleted_threshold</span>=<span style="color: #008080; text-decoration-color: #008080; font-weight: bold">0.2</span>,
            <span style="color: #808000; text-decoration-color: #808000">vacuum_min_vector_number</span>=<span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1000</span>,
            <span style="color: #808000; text-decoration-color: #808000">default_segment_number</span>=<span style="color: #008080; text-decoration-color: #008080; font-weight: bold">0</span>,
            <span style="color: #808000; text-decoration-color: #808000">max_segment_size</span>=<span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>,
            <span style="color: #808000; text-decoration-color: #808000">memmap_threshold</span>=<span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>,
            <span style="color: #808000; text-decoration-color: #808000">indexing_threshold</span>=<span style="color: #008080; text-decoration-color: #008080; font-weight: bold">20000</span>,
            <span style="color: #808000; text-decoration-color: #808000">flush_interval_sec</span>=<span style="color: #008080; text-decoration-color: #008080; font-weight: bold">5</span>,
            <span style="color: #808000; text-decoration-color: #808000">max_optimization_threads</span>=<span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span>
        <span style="font-weight: bold">)</span>,
        <span style="color: #808000; text-decoration-color: #808000">wal_config</span>=<span style="color: #800080; text-decoration-color: #800080; font-weight: bold">WalConfig</span><span style="font-weight: bold">(</span><span style="color: #808000; text-decoration-color: #808000">wal_capacity_mb</span>=<span style="color: #008080; text-decoration-color: #008080; font-weight: bold">32</span>, <span style="color: #808000; text-decoration-color: #808000">wal_segments_ahead</span>=<span style="color: #008080; text-decoration-color: #008080; font-weight: bold">0</span><span style="font-weight: bold">)</span>,
        <span style="color: #808000; text-decoration-color: #808000">quantization_config</span>=<span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>
    <span style="font-weight: bold">)</span>,
    <span style="color: #808000; text-decoration-color: #808000">payload_schema</span>=<span style="font-weight: bold">{}</span>
<span style="font-weight: bold">)</span>
</pre>
</div>
</div>
<p>We can see a bunch of different info about the status of the collection, including a bunch of optimization configuration options we could adjust. You‚Äôll also see currently, no vectors are indexed. These vectors will be indexed in the background, but we can already start searching.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>Depending on your hardware, the initial indexing might take some time. I found that sometimes the <code>QdrantClient</code> could timeout while the indexing was in progress. When interacting with the client, you can adjust the timeout by passing in a <code>timeout</code> parameter. This usually resolves any issues with not getting results back. If you are using Qdrant in production, you will want to ensure you have a sensible timeout and that if you are getting timeouts, they are fixed by ensuring the DB is configured well for your use case.</p>
</div>
</div>
<section id="searching-our-ufo-database" class="level3">
<h3 class="anchored" data-anchor-id="searching-our-ufo-database">Searching our UFO database</h3>
<p>Now that we have uploaded the vectors to Qdrant we can start searching. To start we can use the scroll method to just get the first 10 results.</p>
<div id="cell-53" class="cell" data-outputid="6d16c7ea-dcd0-4245-e24b-729da1325a21" data-execution_count="119">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1">qdrant_client.scroll(collection_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>collection_name, limit<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="119">
<pre><code>([Record(id=0, payload={}, vector=None, shard_key=None, order_value=None),
  Record(id=1, payload={}, vector=None, shard_key=None, order_value=None),
  Record(id=2, payload={}, vector=None, shard_key=None, order_value=None),
  Record(id=3, payload={}, vector=None, shard_key=None, order_value=None),
  Record(id=4, payload={}, vector=None, shard_key=None, order_value=None),
  Record(id=5, payload={}, vector=None, shard_key=None, order_value=None),
  Record(id=6, payload={}, vector=None, shard_key=None, order_value=None),
  Record(id=7, payload={}, vector=None, shard_key=None, order_value=None),
  Record(id=8, payload={}, vector=None, shard_key=None, order_value=None),
  Record(id=9, payload={}, vector=None, shard_key=None, order_value=None)],
 10)</code></pre>
</div>
</div>
<p>Let‚Äôs see how we can query the DB. We first need to process our query text using the <code>process_queries</code> method. We then pass this through the model to get the embeddings.</p>
<div id="cell-55" class="cell" data-outputid="e245895f-91b8-4c85-d022-f04ae560effc" data-execution_count="120">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1">query_text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"top secret"</span></span>
<span id="cb39-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> torch.no_grad():</span>
<span id="cb39-3">    batch_query <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> colpali_processor.process_queries([query_text]).to(</span>
<span id="cb39-4">        colpali_model.device</span>
<span id="cb39-5">    )</span>
<span id="cb39-6">    query_embedding <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> colpali_model(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>batch_query)</span>
<span id="cb39-7">query_embedding</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="120">
<pre><code>tensor([[[ 0.1494, -0.0186,  0.0889,  ..., -0.0186, -0.0767, -0.0330],
         [-0.0830, -0.1094,  0.0447,  ..., -0.0078, -0.0928,  0.0835],
         [-0.1167, -0.0349,  0.0649,  ..., -0.0093,  0.0022, -0.0206],
         ...,
         [-0.0688,  0.0322,  0.0532,  ...,  0.0188,  0.0479,  0.0430],
         [-0.0752,  0.0295,  0.0471,  ...,  0.0199,  0.0493,  0.0267],
         [-0.0564,  0.0530,  0.0635,  ..., -0.0029,  0.0486,  0.0173]]],
       device='cuda:0', dtype=torch.bfloat16)</code></pre>
</div>
</div>
<p>Let‚Äôs see what the output of the model looks like</p>
<div id="cell-57" class="cell" data-outputid="471fbffd-09f6-4721-b69e-7f48ebe60b9a" data-execution_count="121">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb41-1">query_embedding[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="121">
<pre><code>torch.Size([16, 128])</code></pre>
</div>
</div>
<p>We need to put the embeddings on the CPU and convert them to a list which we can pass to the Qdrant client.</p>
<div id="cell-59" class="cell" data-execution_count="122">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb43-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert the query embedding to a list of vectors</span></span>
<span id="cb43-2">multivector_query <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> query_embedding[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].cpu().<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>().numpy().tolist()</span></code></pre></div>
</div>
<p>We use the <code>query_points</code> method to search the DB. We can pass in a number of different parameters to control the search. In this case we‚Äô‚Äôll just limit the number of results to 10.</p>
<div id="cell-61" class="cell" data-outputid="c6a28243-0565-4243-db45-d633a4a705fb" data-execution_count="124">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb44-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Search in Qdrant</span></span>
<span id="cb44-2">search_result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> qdrant_client.query_points(</span>
<span id="cb44-3">    collection_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>collection_name, query<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>multivector_query, limit<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, timeout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span></span>
<span id="cb44-4">)</span>
<span id="cb44-5"></span>
<span id="cb44-6">search_result.points</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="124">
<pre><code>[ScoredPoint(id=2178, version=0, score=12.130735098964559, payload={}, vector=None, shard_key=None, order_value=None),
 ScoredPoint(id=1381, version=0, score=12.022836438326163, payload={}, vector=None, shard_key=None, order_value=None),
 ScoredPoint(id=928, version=0, score=11.337400593495904, payload={}, vector=None, shard_key=None, order_value=None),
 ScoredPoint(id=2235, version=0, score=11.24344362149126, payload={}, vector=None, shard_key=None, order_value=None),
 ScoredPoint(id=2026, version=0, score=10.998634505160364, payload={}, vector=None, shard_key=None, order_value=None),
 ScoredPoint(id=528, version=0, score=10.956125884478812, payload={}, vector=None, shard_key=None, order_value=None),
 ScoredPoint(id=1370, version=0, score=10.878949565786773, payload={}, vector=None, shard_key=None, order_value=None),
 ScoredPoint(id=0, version=0, score=10.854501769864028, payload={}, vector=None, shard_key=None, order_value=None),
 ScoredPoint(id=1964, version=0, score=10.517656939461483, payload={}, vector=None, shard_key=None, order_value=None),
 ScoredPoint(id=1789, version=0, score=10.489377576467938, payload={}, vector=None, shard_key=None, order_value=None)]</code></pre>
</div>
</div>
<p>What did we actually get back? We can see the results are a list of <code>PointStruct</code> objects. We can see the <code>id</code> of the document, the <code>distance</code> from the query and the <code>payload</code>, which is the metadata associated with the document.</p>
<p>When we uploaded the data to Qdrant, we just used the index of the rows in the original dataset as the document‚Äôs <code>ID</code>. This means we can easily look up the original document in the dataset. Let‚Äôs see what we find when searching for ‚Äútop secret‚Äù.</p>
<div id="cell-63" class="cell" data-outputid="f47083e4-9062-439c-fbaa-98293f2b31aa" data-execution_count="128">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb46-1">idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> search_result.points[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span></span>
<span id="cb46-2">dataset[idx][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"image"</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="128">
<div>
<figure class="figure">
<p><img src="https://danielvanstrien.xyz/posts/post-with-code/colpali-qdrant/2024-10-02_using_colpali_with_qdrant_files/figure-html/cell-31-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Looks pretty top secret! We can also wrap this up in a nice function to make it easier to search the DB.</p>
<div id="cell-65" class="cell" data-outputid="c2797630-8534-4106-fff3-d7cf92531548" data-execution_count="129">
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb47-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> search_images_by_text(query_text, top_k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>):</span>
<span id="cb47-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Process and encode the text query</span></span>
<span id="cb47-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> torch.no_grad():</span>
<span id="cb47-4">        batch_query <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> colpali_processor.process_queries([query_text]).to(</span>
<span id="cb47-5">            colpali_model.device</span>
<span id="cb47-6">        )</span>
<span id="cb47-7">        query_embedding <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> colpali_model(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>batch_query)</span>
<span id="cb47-8"></span>
<span id="cb47-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert the query embedding to a list of vectors</span></span>
<span id="cb47-10">    multivector_query <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> query_embedding[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].cpu().<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>().numpy().tolist()</span>
<span id="cb47-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Search in Qdrant</span></span>
<span id="cb47-12">    search_result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> qdrant_client.query_points(</span>
<span id="cb47-13">        collection_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>collection_name, query<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>multivector_query, limit<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>top_k</span>
<span id="cb47-14">    )</span>
<span id="cb47-15"></span>
<span id="cb47-16">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> search_result</span>
<span id="cb47-17"></span>
<span id="cb47-18"></span>
<span id="cb47-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Example usage</span></span>
<span id="cb47-20">query_text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"declassified data"</span></span>
<span id="cb47-21">results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> search_images_by_text(query_text)</span>
<span id="cb47-22"></span>
<span id="cb47-23"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> result <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> results.points:</span>
<span id="cb47-24">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(result)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>id=67 version=0 score=12.138390401267928 payload={} vector=None shard_key=None order_value=None
id=65 version=0 score=11.913804148078945 payload={} vector=None shard_key=None order_value=None
id=64 version=0 score=11.10246256038046 payload={} vector=None shard_key=None order_value=None
id=40 version=0 score=10.984743759976059 payload={} vector=None shard_key=None order_value=None
id=59 version=0 score=10.78073398079465 payload={} vector=None shard_key=None order_value=None</code></pre>
</div>
</div>
<p>and in this case, we can also return the images from the dataset</p>
<div id="cell-67" class="cell" data-execution_count="137">
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb49-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> search_by_text_and_return_images(query_text, top_k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>):</span>
<span id="cb49-2">    results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> search_images_by_text(query_text, top_k)</span>
<span id="cb49-3">    row_ids <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [r.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> r <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> results.points]</span>
<span id="cb49-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> dataset.select(row_ids)</span></code></pre></div>
</div>
<p>Let‚Äôs take a look at a few more results for ‚Äútop secret‚Äù</p>
<div id="cell-69" class="cell" data-outputid="9131f8f2-7bce-4a2b-f47b-b9823f1c45f4" data-execution_count="138">
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb50-1">results_ds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> search_by_text_and_return_images(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"top secret"</span>)</span>
<span id="cb50-2"></span>
<span id="cb50-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> row <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> results_ds:</span>
<span id="cb50-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># display image</span></span>
<span id="cb50-5">    display(row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"image"</span>])</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://danielvanstrien.xyz/posts/post-with-code/colpali-qdrant/2024-10-02_using_colpali_with_qdrant_files/figure-html/cell-34-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://danielvanstrien.xyz/posts/post-with-code/colpali-qdrant/2024-10-02_using_colpali_with_qdrant_files/figure-html/cell-34-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://danielvanstrien.xyz/posts/post-with-code/colpali-qdrant/2024-10-02_using_colpali_with_qdrant_files/figure-html/cell-34-output-3.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://danielvanstrien.xyz/posts/post-with-code/colpali-qdrant/2024-10-02_using_colpali_with_qdrant_files/figure-html/cell-34-output-4.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://danielvanstrien.xyz/posts/post-with-code/colpali-qdrant/2024-10-02_using_colpali_with_qdrant_files/figure-html/cell-34-output-5.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="colpali-vs-ocr" class="level3">
<h3 class="anchored" data-anchor-id="colpali-vs-ocr">ColPali vs OCR</h3>
<p>Here are a couple of notes on these results. The use case here is obviously a bit of a toy example since we only index a relatively small number of documents, but even in these results, we see some examples of why ColPali is such an intriguing approach.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://danielvanstrien.xyz/posts/post-with-code/colpali-qdrant/meme.png" class="img-fluid figure-img"></p>
<figcaption>I always cite my memes: https://x.com/jobergum/status/1839915957298315424</figcaption>
</figure>
</div>
<section id="weird-fonts" class="level4">
<h4 class="anchored" data-anchor-id="weird-fonts">Weird fonts</h4>
<p>One of the challenges of traditional document retrieval is that there is often a complex pipeline of layout recognition, line segmentation, OCR, etc. This approach works well on simple documents but fails on more complex ones. It might be worthwhile and practical to develop a custom pipeline for your documents if you have very consistent document layouts. However, if you have a lot of different document layouts this can be very challenging.</p>
<p>One of the areas where OCR can often struggle is with weird fonts. For example in one of our results, we had this:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://danielvanstrien.xyz/posts/post-with-code/colpali-qdrant/font.png" class="img-fluid figure-img"></p>
<figcaption>Example of a heading font that is useful for retreival</figcaption>
</figure>
</div>
<p>It‚Äôs possible some OCR engines would correctly parse this, but this kind of text can trip up OCR engines. Some missing text might not always be important, but weird fonts are often used to highlight important information or as headings. In this case, the ColPali model has no problem with this heading font.</p>
</section>
<section id="layout" class="level4">
<h4 class="anchored" data-anchor-id="layout">Layout</h4>
<p>Another area where OCR engines and traditional layout methods struggle is with documents which contain tables or other complex layouts. For example, in one of our results, we had this:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://danielvanstrien.xyz/posts/post-with-code/colpali-qdrant/layout.png" class="img-fluid figure-img"></p>
<figcaption>Example where text is in a table that might confuse an OCR engine</figcaption>
</figure>
</div>
<p>Whilst there are models for doing layout recognition on tables, these can be quite complex and often require a lot of manual intervention. It is almost certainly worth doing this work if you want to <em>extract</em> the information from this document but it‚Äôs sometimes sufficient just to <em>retrieve</em> the document and either pass it to another model or (shock horror) have a human look at it. In this case, the ColPali model has no problem with the layout of the document.</p>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>ColPali remains a relatively novel approach to retrieval, and it‚Äôs likely to take some time for all vector DBs to implement proper support for multi-vectors. The community is likely to also discover new optimization approaches to both the ColPali model itself and its integration with vector DBs.</p>
<p>I left some further resources below and am happy to get feedback on any improvements I can make to this blog post.</p>
<section id="further-resources" class="level3">
<h3 class="anchored" data-anchor-id="further-resources">Further resources</h3>
<ul>
<li>Hugging Face Hub organization for the ColPali authors: https://huggingface.co/vidore</li>
<li>Blog post on the rise of vision-driven document retrieval for RAG: https://blog.vespa.ai/the-rise-of-vision-driven-document-retrieval-for-rag/</li>
<li>Blog post on scaling ColPali using the Vespa database: https://blog.vespa.ai/scaling-colpali-to-billions/</li>
</ul>
</section>
<section id="bonus-tips" class="level3">
<h3 class="anchored" data-anchor-id="bonus-tips">Bonus tips</h3>
<p>A few other things I think are worth exploring if you plan to use this in a production setting.</p>
<section id="pre-filtering" class="level4">
<h4 class="anchored" data-anchor-id="pre-filtering">Pre-filtering</h4>
<p>It‚Äôs likely in many real use cases that you either have, or can create, some metadata for your documents. These can also be indexed in Qdrant and may help improve the search results and performance of the a multivector approach. If for example, you can filter to remove all documents before/after a certain date, you can reduce the amount of vectors that Qdrant needs to search through.</p>
</section>
</section>
<section id="combining-vectors" class="level3">
<h3 class="anchored" data-anchor-id="combining-vectors">Combining vectors</h3>
<p>It‚Äôs also possible to use other vectors for the same points in Qdrant. For example, you may want to use a dense vector to store a representation of the text extracted through an existing OCR pipeline (if you already have this to hand it‚Äôs worth trying to use it), you can then use these vectors do a first large search and then use the multivector embeddings to do a second stage search limited only to results from the first step. See the <a href="https://qdrant.tech/documentation/concepts/filtering/#has-id">filtering docs</a> for more info on how to do this. This could look something like:</p>
<ul>
<li>search for ‚Äútop secret‚Äù using the dense vectors and get the top 1000 results</li>
<li>search for ‚Äútop secret‚Äù using the multivectors but only search in the top 1000 results from the first search</li>
</ul>
<section id="binary-quantization" class="level4">
<h4 class="anchored" data-anchor-id="binary-quantization">Binary Quantization</h4>
<p>It‚Äôs very likely to make sense to explore using Binary Quantization for storing your vectors since it can reduce the memory footprint and speed up the search process. You can set this up by doing something like this in the collection creation step</p>
<div id="cell-73" class="cell">
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb51-1">quantization_config <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> models.BinaryQuantization(</span>
<span id="cb51-2">    binary<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>models.BinaryQuantizationConfig(</span>
<span id="cb51-3">        always_ram<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb51-4">    )</span>
<span id="cb51-5">)</span></code></pre></div>
</div>
</section>
</section>
<section id="some-more-search-examples" class="level3">
<h3 class="anchored" data-anchor-id="some-more-search-examples">Some more search examples</h3>
<div id="cell-75" class="cell" data-outputid="8d847827-5531-46c3-aee7-65a22d94e768" data-execution_count="140">
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb52-1">results_ds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> search_by_text_and_return_images(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sightings data table"</span>)</span>
<span id="cb52-2"></span>
<span id="cb52-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> row <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> results_ds:</span>
<span id="cb52-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># display image</span></span>
<span id="cb52-5">    display(row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"image"</span>])</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://danielvanstrien.xyz/posts/post-with-code/colpali-qdrant/2024-10-02_using_colpali_with_qdrant_files/figure-html/cell-36-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://danielvanstrien.xyz/posts/post-with-code/colpali-qdrant/2024-10-02_using_colpali_with_qdrant_files/figure-html/cell-36-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://danielvanstrien.xyz/posts/post-with-code/colpali-qdrant/2024-10-02_using_colpali_with_qdrant_files/figure-html/cell-36-output-3.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://danielvanstrien.xyz/posts/post-with-code/colpali-qdrant/2024-10-02_using_colpali_with_qdrant_files/figure-html/cell-36-output-4.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://danielvanstrien.xyz/posts/post-with-code/colpali-qdrant/2024-10-02_using_colpali_with_qdrant_files/figure-html/cell-36-output-5.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="cell-76" class="cell" data-outputid="b46f62e6-7f43-4cd2-ca40-87204681f811" data-execution_count="141">
<div class="sourceCode cell-code" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb53-1">results_ds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> search_by_text_and_return_images(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ufo experiences"</span>)</span>
<span id="cb53-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> row <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> results_ds:</span>
<span id="cb53-3">    display(row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"image"</span>])</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://danielvanstrien.xyz/posts/post-with-code/colpali-qdrant/2024-10-02_using_colpali_with_qdrant_files/figure-html/cell-37-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://danielvanstrien.xyz/posts/post-with-code/colpali-qdrant/2024-10-02_using_colpali_with_qdrant_files/figure-html/cell-37-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://danielvanstrien.xyz/posts/post-with-code/colpali-qdrant/2024-10-02_using_colpali_with_qdrant_files/figure-html/cell-37-output-3.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://danielvanstrien.xyz/posts/post-with-code/colpali-qdrant/2024-10-02_using_colpali_with_qdrant_files/figure-html/cell-37-output-4.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://danielvanstrien.xyz/posts/post-with-code/colpali-qdrant/2024-10-02_using_colpali_with_qdrant_files/figure-html/cell-37-output-5.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
</section>
<section id="glossary" class="level2">
<h2 class="anchored" data-anchor-id="glossary">Glossary</h2>
<ul>
<li><p><strong>ColPali</strong>: A multimodal retrieval approach for document search.</p></li>
<li><p><strong>Qdrant</strong>: An open-source vector database.</p></li>
<li><p><strong>Vector Database</strong>: A database optimized for storing and searching high-dimensional vector data.</p></li>
<li><p><strong>Multivector</strong>: A set of vectors used to represent a single item, as opposed to a single vector.</p></li>
<li><p><strong>Late Interaction</strong>: A mechanism used in ColPali to compare query and document tokens individually at query time.</p></li>
<li><p><strong>MaxSim</strong>: A similarity calculation method used in ColPali and ColBERT.</p></li>
<li><p><strong>Quantization</strong>: A compression technique used to reduce the memory footprint of vectors.</p></li>
<li><p><strong>Scalar Quantization</strong>: A specific type of quantization that reduces the number of bits used to represent vector components.</p></li>
<li><p><strong>OCR (Optical Character Recognition)</strong>: Technology used to convert images of text into machine-readable text.</p></li>
<li><p><strong>VLM (Vision Language Model)</strong>: A type of AI model that can process both image and text data.</p></li>
<li><p><strong>Multimodal</strong>: Relating to multiple modes of data, such as text and images.</p></li>
<li><p><strong>Embedding</strong>: A numerical representation of data in a vector space.</p></li>
<li><p><strong>Cosine Similarity</strong>: A measure of similarity between two vectors.</p></li>
<li><p><strong>Indexing</strong>: The process of organizing data in a database to optimize search and retrieval.</p></li>
<li><p><strong>Binary Quantization</strong>: A form of quantization that converts vectors to binary (0 or 1) values.</p></li>
<li><p><strong>RAG (Retrieval-Augmented Generation)</strong>: A technique that combines retrieval of relevant information with text generation.</p></li>
</ul>


</section>
</section>

 ]]></description>
  <guid>https://danielvanstrien.xyz/posts/post-with-code/colpali-qdrant/2024-10-02_using_colpali_with_qdrant.html</guid>
  <pubDate>Wed, 02 Oct 2024 00:00:00 GMT</pubDate>
  <media:content url="https://danielvanstrien.xyz/posts/post-with-code/colpali-qdrant/truth.png" medium="image" type="image/png" height="31" width="144"/>
</item>
<item>
  <title>Generating a dataset of queries for training and fine-tuning ColPali models on a UFO dataset</title>
  <dc:creator>Daniel van Strien</dc:creator>
  <link>https://danielvanstrien.xyz/posts/post-with-code/colpali/2024-09-23-generate_colpali_dataset.html</link>
  <description><![CDATA[ 




<p><a href="https://colab.research.google.com/github/davanstrien/blog/blob/main/posts/post-with-code/colpali/2024-09-23-generate_colpali_dataset.ipynb"><img src="https://colab.research.google.com/assets/colab-badge.svg" class="img-fluid"></a></p>
<section id="introduction-to-colpali" class="level2">
<h2 class="anchored" data-anchor-id="introduction-to-colpali">Introduction to ColPali</h2>
<p>tl;dr this blog post covers how to generate a dataset for training/fine-tuning ColPali models an open VLM to generate queries. You can find the dataset produced by this approach <a href="https://huggingface.co/datasets/davanstrien/ufo-ColPali">here</a>.</p>
<p>ColPali is a new multimodal approach to retrieval which aims to replace existing document retrievers which often rely on an OCR step with an end-to-end multimodal approach. This approach also aims to take into account the visual content and layout of the documents, in addition to the textual content. Looking at an example of a document:</p>
<p><img src="https://danielvanstrien.xyz/posts/post-with-code/colpali/doc.png" class="img-fluid"></p>
<p>we could rely only on the text, but the page also has a table which could be relevant for retrieving the most useful document either for direct use or in a RAG pipeline. In many documents we will find that pages don‚Äôt just contain images but also other rich sources of visual information that could be relevant for retrieval.</p>
</section>
<section id="how-copali-works" class="level2">
<h2 class="anchored" data-anchor-id="how-copali-works">How CoPali works?</h2>
<p>ColPali is a document retrieval model that leverages a Vision Language Model (VLM) to understand and retrieve documents based on their visual content. The key steps are:</p>
<ul>
<li>Document Encoding: ColPali takes document pages as images and processes them through a VLM (specifically, PaliGemma-3B) to generate embeddings for each image patch.</li>
<li>Query Encoding: User queries are encoded using the same VLM‚Äôs text processing capabilities.</li>
<li>Late Interaction: Instead of comparing a single vector per document, ColPali uses a ‚Äúlate interaction‚Äù mechanism that compares each query token embedding to all document patch embeddings.</li>
</ul>
<p>Scoring: The relevance score between a query and a document is computed by summing the maximum similarities between each query token and all document patches.</p>
<p>This approach allows ColPali to understand both textual and visual elements in documents, enabling more comprehensive and accurate retrieval compared to traditional text-only methods. It eliminates the need for complex document parsing pipelines, as it works directly with document images.</p>
<p>Whilst, late interaction methods have some additional computational costs, for many documents with rich visual content there is also a high potential processing cost in the document parsing pipeline ‚Äî and this pipeline can also be rather brittle.</p>
<section id="the-training-data-for-colpali" class="level3">
<h3 class="anchored" data-anchor-id="the-training-data-for-colpali">The training data for ColPali</h3>
<p>Let‚Äôs take a look at what the training data looks like for training ColPali.</p>
<iframe src="https://huggingface.co/datasets/vidore/colpali_train_set/embed/viewer/default/train" frameborder="0" width="100%" height="560px">
</iframe>
<p>You‚Äôll see that each row contains a bunch of metadata about the source of the document and other information but the key parts for the actual training of the model are the image and the queries pairs. When training ColPali we want a dataset of images with queries that relate to the image. This will allow the model to learn how queries are related to the images. To help the model learn it can also be helpful to have negative examples.</p>
<p>Let‚Äôs take a closer look at a few examples from the data before we jump into generating our own.</p>
<p>For this notebook I‚Äôm using <code>uv</code> to manage Python installs because I find it to be a lot quicker but you can use <code>pip</code> if you prefer.</p>
<div id="cell-4" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>pip install uv</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Collecting uv
  Downloading uv-0.4.15-py3-none-macosx_11_0_arm64.whl.metadata (11 kB)
Downloading uv-0.4.15-py3-none-macosx_11_0_arm64.whl (10.9 MB)
   ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 10.9/10.9 MB 22.7 MB/s eta 0:00:001m22.2 MB/s eta 0:00:01
Installing collected packages: uv
Successfully installed uv-0.4.15
Note: you may need to restart the kernel to use updated packages.</code></pre>
</div>
</div>
<div id="cell-5" class="cell" data-outputid="17fc22ef-46e9-4008-d83f-02dfba8d3051" data-execution_count="2">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>uv pip install accelerate qwen<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>vl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>utils torchvision torch datasets huggingface_hub[hf_transfer] polars <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span>system</span>
<span id="cb3-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>uv pip install git<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>https:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span>github.com<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>huggingface<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>transformers.git  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span>system</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Audited 6 packages in 11ms
Resolved 54 packages in 230ms                                        
Audited 54 packages in 0.08ms</code></pre>
</div>
</div>
<div id="cell-6" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>uv pip install flash<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>attn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span>no<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>build<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>isolation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span>system</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Audited 1 package in 6ms</code></pre>
</div>
</div>
<p>We can take a look at a few examples from the data using Polars.</p>
<div id="cell-8" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> polars <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pl</span>
<span id="cb7-2"></span>
<span id="cb7-3">splits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"train"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data/train-*.parquet"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"test"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data/test-00000-of-00001.parquet"</span>}</span>
<span id="cb7-4">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pl.scan_parquet(</span>
<span id="cb7-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hf://datasets/vidore/colpali_train_set/"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> splits[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"train"</span>],</span>
<span id="cb7-6">)</span></code></pre></div>
</div>
<p>Let‚Äôs see what columns we have in the dataset.</p>
<div id="cell-10" class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">df.columns</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="18">
<pre><code>['image',
 'image_filename',
 'query',
 'answer',
 'source',
 'options',
 'page',
 'model',
 'prompt',
 'answer_type']</code></pre>
</div>
</div>
<p>Since we‚Äôre shortly going to turn to how we can generate our own queries, let‚Äôs take a look at a few examples from the data. We‚Äôll filter to focus on the <code>pdf</code> source, since these are the ones created by the authors of ColPali (the other sources are from existing datasets).</p>
<div id="cell-12" class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">filtered_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (</span>
<span id="cb10-2">    df.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span>(pl.col(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"source"</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>.contains(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pdf"</span>)).select([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"query"</span>]).head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>).collect()</span>
<span id="cb10-3">)</span>
<span id="cb10-4">query_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> filtered_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"query"</span>].to_list()</span>
<span id="cb10-5">query_list</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="16">
<pre><code>['What is the duration of the course mentioned in the image?',
 'What is the primary purpose of the PTC in lithium batteries?',
 'How is the baseline CO2 emissions calculated for affected EGUs in the low load natural gas-fired or oil-fired subcategories?',
 'What are some suggestions Liberty Medical Group should consider to improve their accounts receivable turnover and days sales in receivables ratios?',
 'What measures will the Secretary determine to assess the quality of care furnished by the ACO?',
 'How is the CT kerma index measured?',
 'What is the difference between hindsight and foresight according to the passage?',
 'How are the vapor jets arranged during the transitional and film boiling regimes?',
 'What types of batteries are covered by the European Union Batteries Directive?',
 'What are some factors to consider for CAES facility development in different parts of New York?']</code></pre>
</div>
</div>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>One thing you might notice about these queries is that many of them are more focused on ‚Äúquestions‚Äù about documents rather than traditional search queries. We‚Äôll shortly see the prompting approach used to generate these queries but we might already want to consider, depending on our use case, whether we want to generate more ‚Äúsearch‚Äù-like queries or more ‚Äúquestion‚Äù-like queries.</p>
</div>
</div>
</section>
</section>
<section id="creating-queries-from-documents" class="level2">
<h2 class="anchored" data-anchor-id="creating-queries-from-documents">Creating queries from documents</h2>
<p>For the data using in ColPali, part of the dataset was sourced from existing document question answering datasets. Another component was generated using Claude 3.0 Sonnet with the following prompt:</p>
<div id="cell-15" class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb12-2"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">You are an assistant specialized in Multimodal RAG tasks.</span></span>
<span id="cb12-3"></span>
<span id="cb12-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">The task is the following: given an image from a pdf page, you will have to generate questions that can be asked by a user to retrieve information from a large documentary corpus.</span></span>
<span id="cb12-5"></span>
<span id="cb12-6"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">The question should be relevant to the page, and should not be too specific or too general. The question should be about the subject of the page, and the answer needs to be found in the page.</span></span>
<span id="cb12-7"></span>
<span id="cb12-8"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Remember that the question is asked by a user to get some information from a large documentary corpus that contains multimodal data. Generate a question that could be asked by a user without knowing the existence and the content of the corpus.</span></span>
<span id="cb12-9"></span>
<span id="cb12-10"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Generate as well the answer to the question, which should be found in the page. And the format of the answer should be a list of words answering the question.</span></span>
<span id="cb12-11"></span>
<span id="cb12-12"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Generate at most THREE pairs of questions and answers per page in a dictionary with the following format, answer ONLY this dictionary NOTHING ELSE:</span></span>
<span id="cb12-13"></span>
<span id="cb12-14"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb12-15"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    "questions": [</span></span>
<span id="cb12-16"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        {</span></span>
<span id="cb12-17"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">            "question": "XXXXXX",</span></span>
<span id="cb12-18"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">            "answer": ["YYYYYY"]</span></span>
<span id="cb12-19"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        },</span></span>
<span id="cb12-20"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        {</span></span>
<span id="cb12-21"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">            "question": "XXXXXX",</span></span>
<span id="cb12-22"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">            "answer": ["YYYYYY"]</span></span>
<span id="cb12-23"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        },</span></span>
<span id="cb12-24"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        {</span></span>
<span id="cb12-25"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">            "question": "XXXXXX",</span></span>
<span id="cb12-26"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">            "answer": ["YYYYYY"]</span></span>
<span id="cb12-27"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        }</span></span>
<span id="cb12-28"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    ]</span></span>
<span id="cb12-29"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb12-30"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">where XXXXXX is the question and ['YYYYYY'] is the corresponding list of answers that could be as long as needed.</span></span>
<span id="cb12-31"></span>
<span id="cb12-32"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Note: If there are no questions to ask about the page, return an empty list. Focus on making relevant questions concerning the page.</span></span>
<span id="cb12-33"></span>
<span id="cb12-34"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Here is the page:"""</span></span></code></pre></div>
</div>
<p>As you can see this prompt is focused on generating questions that are relevant to the page and that could be asked by a user and answered by the document. One thing I noticed from the queries generated with this prompt is that I think some of the generated queries strayed a bit from the prompts request to not assume the user knew the content of the document. Some of the questions were quite specific and it seemed like they were tailored to the particular page they were generated from.</p>
<p>Whilst out of the box performance of ColPali is likely to be good for many domains and use cases it it likely that fine tuning ColPali on domain specific data will lead to improved performance. We‚Äôll now turn to how we can generate our own queries for ColPali.</p>
</section>
<section id="ufo-colpali-creating-a-domain-specific-dataset" class="level2">
<h2 class="anchored" data-anchor-id="ufo-colpali-creating-a-domain-specific-dataset">UFO ColPali: creating a domain specific dataset</h2>
<p>Let‚Äôs now turn to how we could approach generating our own query image pairs for training ‚Äî or more likely fine tuning ‚Äî a ColPali model on domain specific data.</p>
<p>To make the example slightly more interesting we‚Äôll stray away from using an existing document dataset and use a UFO dateset which has been sourced from an Internet Archive <a href="https://archive.org/details/ufonewsletters">Collection of UFO newsletters</a>. This dataset was created from a sample of PDFs from this collection which were then split into single page images using the <a href="https://huggingface.co/spaces/Dataset-Creation-Tools/pdf-to-page-images-dataset">pdf-to-page-images-dataset</a> Hugging Face Space. If you have a collection of PDFs related to your domain you could also use this Space to quickly create a dataset for your use case.</p>
<div id="cell-18" class="cell" data-outputid="7d9282e5-2c9b-4894-d480-e916ae940681">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb13-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> datasets <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> load_dataset</span></code></pre></div>
</div>
<p>If you are running on a machine with quite a fast connection, the following environment variable may increase the speed of the model and dataset downloads.</p>
<div id="cell-20" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">os.environ[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"HF_HUB_ENABLE_HF_TRANSFER"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1"</span></span></code></pre></div>
</div>
<p>Let‚Äôs start by loading the UFO dataset and taking a look at a few examples.</p>
<div id="cell-22" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">ds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> load_dataset(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"davanstrien/ufo"</span>, split<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"train"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"53bf7962827a4f6988385597615e47ee","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
</div>
<p>Let‚Äôs see what a row looks like</p>
<div id="cell-24" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">ds[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">
<pre><code>{'image': &lt;PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=596x842&gt;}</code></pre>
</div>
</div>
<p>and look at an example document</p>
<div id="cell-26" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">ds[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"image"</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="5">
<div>
<figure class="figure">
<p><img src="https://danielvanstrien.xyz/posts/post-with-code/colpali/2024-09-23-generate_colpali_dataset_files/figure-html/cell-13-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>We can see that the dataset currently just contains images which map to a single page of a document. We can also see from the example document that the document does contain some visual elements which could be relevant for retrieval.</p>
<p>What we need to train or fine tune ColPali is at least one query for each of our the document images in our dataset.</p>
</section>
<section id="using-qwen2-vl-to-generate-queries" class="level2">
<h2 class="anchored" data-anchor-id="using-qwen2-vl-to-generate-queries">Using Qwen2-VL to generate queries</h2>
<p>Whilst the original ColPali paper used the Claude 3.0 Sonnet model to generate queries for the UFO dataset, we‚Äôll use the Qwen2-VL model to generate queries for our UFO dataset. Specifcally we‚Äôll use the 7B variant of the model (<a href="https://huggingface.co/Qwen/Qwen2-VL-7B-Instruct">Qwen/Qwen2-VL-7B-Instruct</a>). This is an open VLLM (Apache 2.0 licensed) Vision Language Model which has shown strong performance on a variety of vision and language tasks. Whilst the model won‚Äôt run on a standard T4 Google Colab instance we can run the model either on a L4 or an A100 GPU on Google Colab or you can use the Hugging Face Jupyter Spaces <a href="https://huggingface.co/spaces/SpacesExamples/jupyterlab?duplicate=true">template</a> to run the model on an L40s as I did.</p>
<p>To start let‚Äôs load the model and get a sense of how we can use it. We‚Äôll do this through the Transformers library. It‚Äôs also possible to run the model using the vLLM library but since we‚Äôre only focusing on generating a relatively small number of queries this extra set up probably isn‚Äôt worth it in this case (I‚Äôd be interested to hear in the comments if you try it out and how it goes).</p>
<p>To start we‚Äôll load the model. We‚Äôll use <code>flash_attention_2</code> which should help a bit with the performance and memory usage of the model.</p>
<div id="cell-30" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> transformers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Qwen2VLForConditionalGeneration, AutoTokenizer, AutoProcessor</span>
<span id="cb19-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> qwen_vl_utils <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> process_vision_info</span>
<span id="cb19-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb19-4"></span>
<span id="cb19-5">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Qwen2VLForConditionalGeneration.from_pretrained(</span>
<span id="cb19-6">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Qwen/Qwen2-VL-7B-Instruct"</span>,</span>
<span id="cb19-7">    torch_dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.bfloat16,</span>
<span id="cb19-8">    attn_implementation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"flash_attention_2"</span>,</span>
<span id="cb19-9">    device_map<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"auto"</span>,</span>
<span id="cb19-10">)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Unrecognized keys in `rope_scaling` for 'rope_type'='default': {'mrope_section'}
You are attempting to use Flash Attention 2.0 without specifying a torch dtype. This might lead to unexpected behaviour
`Qwen2VLRotaryEmbedding` can now be fully parameterized by passing the model config through the `config` argument. All other arguments will be removed in v4.46</code></pre>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"e46643d6608f466f9137cb8ad76cbc63","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
</div>
<p>We next define the processor. This is the component that will help us prepare the inputs for the model.</p>
<div id="cell-32" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># default processer</span></span>
<span id="cb21-2">processor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> AutoProcessor.from_pretrained(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Qwen/Qwen2-VL-7B-Instruct"</span>)</span></code></pre></div>
</div>
<p>As with many more recent models, we can use a chat template to help us prepare the inputs for the model. Here is the example from the Qwen2-VL-7B-Instruct model card.</p>
<div id="cell-34" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">messages <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb22-2">    {</span>
<span id="cb22-3">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user"</span>,</span>
<span id="cb22-4">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: [</span>
<span id="cb22-5">            {</span>
<span id="cb22-6">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"image"</span>,</span>
<span id="cb22-7">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"image"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://qianwen-res.oss-cn-beijing.aliyuncs.com/Qwen-VL/assets/demo.jpeg"</span>,</span>
<span id="cb22-8">            },</span>
<span id="cb22-9">            {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"text"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"text"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Describe this image."</span>},</span>
<span id="cb22-10">        ],</span>
<span id="cb22-11">    }</span>
<span id="cb22-12">]</span></code></pre></div>
</div>
<p>We can now pass this to the processor to get the inputs ready for the model. You‚Äôll see here we first pass in the messages to the <code>apply_chat_template</code> method of the processor and then use the <code>process_vision_info</code> helper function which comes from the <code>qwen_vl_utils</code> library to prepare images and videos (which are not relevant here).</p>
<div id="cell-36" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> processor.apply_chat_template(</span>
<span id="cb23-2">    messages, tokenize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, add_generation_prompt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb23-3">)</span>
<span id="cb23-4">image_inputs, video_inputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> process_vision_info(messages)</span></code></pre></div>
</div>
<p>If we take a look at the <code>text</code> we can see that the processor has applied a chat template to the messages.</p>
<div id="cell-38" class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">text</span></code></pre></div>
</div>
<p>We now pass the text, image and video inputs (in this case <code>None</code>) to the processor and prepare the inputs for the model.</p>
<div id="cell-40" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">inputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> processor(</span>
<span id="cb25-2">    text<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[text],</span>
<span id="cb25-3">    images<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>image_inputs,</span>
<span id="cb25-4">    videos<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>video_inputs,</span>
<span id="cb25-5">    padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb25-6">    return_tensors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pt"</span>,</span>
<span id="cb25-7">)</span>
<span id="cb25-8">inputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> inputs.to(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cuda"</span>)</span></code></pre></div>
</div>
<p>we can see what this input looks like</p>
<div id="cell-42" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">inputs</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="11">
<pre><code>{'input_ids': tensor([[151644,   8948,    198,  ..., 151644,  77091,    198]],
       device='cuda:0'), 'attention_mask': tensor([[1, 1, 1,  ..., 1, 1, 1]], device='cuda:0'), 'pixel_values': tensor([[ 0.8501,  0.8501,  0.8647,  ...,  1.3922,  1.3922,  1.3922],
        [ 0.9376,  0.9376,  0.9376,  ...,  1.4491,  1.4491,  1.4491],
        [ 0.9084,  0.9376,  0.9376,  ...,  1.4065,  1.4207,  1.4207],
        ...,
        [-0.1280, -0.1280, -0.1426,  ..., -0.2431, -0.2715, -0.3000],
        [-0.3324, -0.3324, -0.3032,  ..., -0.3000, -0.2715, -0.2857],
        [-0.3762, -0.4054, -0.4054,  ..., -0.4279, -0.4422, -0.4564]],
       device='cuda:0'), 'image_grid_thw': tensor([[  1,  98, 146]], device='cuda:0')}</code></pre>
</div>
</div>
<p>Now the inputs are ready to pass to the model. BTW, all of this inference code is copied straight from the Qwen2-VL-7B-Instruct model card on Hugging Face. There are a few things we might want to tweak but the basic examples are pretty much all we need for our use case.</p>
<div id="cell-44" class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1">generated_ids <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.generate(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>inputs, max_new_tokens<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>)</span>
<span id="cb28-2">generated_ids_trimmed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb28-3">    out_ids[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(in_ids) :] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> in_ids, out_ids <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(inputs.input_ids, generated_ids)</span>
<span id="cb28-4">]</span>
<span id="cb28-5">output_text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> processor.batch_decode(</span>
<span id="cb28-6">    generated_ids_trimmed, skip_special_tokens<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, clean_up_tokenization_spaces<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb28-7">)</span>
<span id="cb28-8">output_text</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="12">
<pre><code>["The image depicts a serene beach scene with a woman and her dog enjoying a moment together. The woman is sitting on the sandy beach, facing the ocean, and appears to be engaging in a playful activity with her dog. She is wearing a plaid shirt and dark pants, and her hair is long and dark. The dog, which is a large breed, possibly a Labrador Retriever, is sitting in front of her, wearing a harness. The dog is extending its front paw towards the woman's hand, as if they are giving each other a high-five. The woman is smiling, indicating a joyful interaction.\n\nThe beach is relatively empty, with gentle waves lapping at the shore. The sky is clear, and the sun is low on the horizon, casting a warm, golden light over the scene. The lighting suggests that the photo was taken either in the early morning or late afternoon, creating a peaceful and tranquil atmosphere. The sand is smooth and lightly textured, typical of a well-m"]</code></pre>
</div>
</div>
</section>
<section id="building-colpali-queries" class="level2">
<h2 class="anchored" data-anchor-id="building-colpali-queries">Building Colpali queries</h2>
<p>We now have a sense of how to generate responses using both a text and image input using the Qwen2-VL-7B-Instruct model. We‚Äôll now use this model to generate queries for our UFO dataset. To start, let‚Äôs see how the prompt from the paper looks. The only thing we modified from the original prompt was to ask for JSON output rather than dictionaries since this model seemed to work better with this approach in my (somewhat limited) testing.</p>
<div class="sourceCode" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1">prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb30-2"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">You are an assistant specialized in Multimodal RAG tasks.</span></span>
<span id="cb30-3"></span>
<span id="cb30-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">The task is the following: given an image from a pdf page, you will have to generate questions that can be asked by a user to retrieve information from a large documentary corpus.</span></span>
<span id="cb30-5"></span>
<span id="cb30-6"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">The question should be relevant to the page, and should not be too specific or too general. The question should be about the subject of the page, and the answer needs to be found in the page.</span></span>
<span id="cb30-7"></span>
<span id="cb30-8"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Remember that the question is asked by a user to get some information from a large documentary corpus that contains multimodal data. Generate a question that could be asked by a user without knowing the existence and the content of the corpus.</span></span>
<span id="cb30-9"></span>
<span id="cb30-10"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Generate as well the answer to the question, which should be found in the page. And the format of the answer should be a list of words answering the question.</span></span>
<span id="cb30-11"></span>
<span id="cb30-12"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Generate at most THREE pairs of questions and answers per page as JSON with the following format, answer ONLY using JSON, NOTHING ELSE:</span></span>
<span id="cb30-13"></span>
<span id="cb30-14"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb30-15"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    "questions": [</span></span>
<span id="cb30-16"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        {</span></span>
<span id="cb30-17"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">            "question": "XXXXXX",</span></span>
<span id="cb30-18"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">            "answer": ["YYYYYY"]</span></span>
<span id="cb30-19"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        },</span></span>
<span id="cb30-20"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        {</span></span>
<span id="cb30-21"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">            "question": "XXXXXX",</span></span>
<span id="cb30-22"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">            "answer": ["YYYYYY"]</span></span>
<span id="cb30-23"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        },</span></span>
<span id="cb30-24"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        {</span></span>
<span id="cb30-25"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">            "question": "XXXXXX",</span></span>
<span id="cb30-26"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">            "answer": ["YYYYYY"]</span></span>
<span id="cb30-27"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        }</span></span>
<span id="cb30-28"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    ]</span></span>
<span id="cb30-29"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb30-30"></span>
<span id="cb30-31"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">where XXXXXX is the question and ['YYYYYY'] is the corresponding list of answers that could be as long as needed.</span></span>
<span id="cb30-32"></span>
<span id="cb30-33"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Note: If there are no questions to ask about the page, return an empty list. Focus on making relevant questions concerning the page.</span></span>
<span id="cb30-34"></span>
<span id="cb30-35"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Here is the page:</span></span>
<span id="cb30-36"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span></code></pre></div>
<p>We‚Äôll copy and paste all of the previous code to generate a response from the model for an example from our UFO dataset. We‚Äôll wrap this in a function once we‚Äôve got a better sense of what we‚Äôre looking for.</p>
<div id="cell-48" class="cell" data-execution_count="21">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1">messages <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb31-2">    {</span>
<span id="cb31-3">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user"</span>,</span>
<span id="cb31-4">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: [</span>
<span id="cb31-5">            {</span>
<span id="cb31-6">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"image"</span>,</span>
<span id="cb31-7">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"image"</span>: ds[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"image"</span>],</span>
<span id="cb31-8">            },</span>
<span id="cb31-9">            {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"text"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"text"</span>: prompt},</span>
<span id="cb31-10">        ],</span>
<span id="cb31-11">    }</span>
<span id="cb31-12">]</span></code></pre></div>
</div>
<div id="cell-49" class="cell" data-execution_count="22">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1">text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> processor.apply_chat_template(</span>
<span id="cb32-2">    messages, tokenize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, add_generation_prompt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb32-3">)</span>
<span id="cb32-4">image_inputs, video_inputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> process_vision_info(messages)</span>
<span id="cb32-5">inputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> processor(</span>
<span id="cb32-6">    text<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[text],</span>
<span id="cb32-7">    images<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>image_inputs,</span>
<span id="cb32-8">    videos<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>video_inputs,</span>
<span id="cb32-9">    padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb32-10">    return_tensors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pt"</span>,</span>
<span id="cb32-11">)</span>
<span id="cb32-12">inputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> inputs.to(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cuda"</span>)</span></code></pre></div>
</div>
<div id="cell-50" class="cell" data-execution_count="23">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1">generated_ids <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.generate(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>inputs, max_new_tokens<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>)</span>
<span id="cb33-2">generated_ids_trimmed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb33-3">    out_ids[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(in_ids) :] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> in_ids, out_ids <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(inputs.input_ids, generated_ids)</span>
<span id="cb33-4">]</span>
<span id="cb33-5">output_text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> processor.batch_decode(</span>
<span id="cb33-6">    generated_ids_trimmed, skip_special_tokens<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, clean_up_tokenization_spaces<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb33-7">)</span>
<span id="cb33-8">output_text</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="23">
<pre><code>['{\n    "questions": [\n        {\n            "question": "What is the main subject of the page?",\n            "answer": ["astronomy", "space exploration", "New York Times"]\n        },\n        {\n            "question": "What is the significance of the Sun newspaper in the context of the page?",\n            "answer": ["published a report attributed to an astronomer", "founded by Sir John Herschel", "published a report on the discovery of a race of singing aliens"]\n        },\n        {\n            "question": "What is the main event mentioned in the page?",\n            "answer": ["discovery of singing aliens on the Moon"]\n        }\n    ]\n}']</code></pre>
</div>
</div>
<p>You‚Äôll see we get some responses like this <code>"What is the main event mentioned in the page?"</code> which is a bit too specific and tailored to the particular page. There are a few reasons this might be happening but the first thing we should play around with is changing the prompt.</p>
<section id="validating-the-responses" class="level3">
<h3 class="anchored" data-anchor-id="validating-the-responses">Validating the responses</h3>
<p>One of the big challenges you can have in generating synthetic data at scale is ensuring that you get valid responses that you can use in downstream tasks for training without having to do a lot of manual verification. Let‚Äôs see if we can load the response as valid JSON</p>
<div id="cell-53" class="cell" data-execution_count="24">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> json</span></code></pre></div>
</div>
<div id="cell-54" class="cell" data-execution_count="25">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1">json.loads(output_text[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="25">
<pre><code>{'questions': [{'question': 'What is the main subject of the page?',
   'answer': ['astronomy', 'space exploration', 'New York Times']},
  {'question': 'What is the significance of the Sun newspaper in the context of the page?',
   'answer': ['published a report attributed to an astronomer',
    'founded by Sir John Herschel',
    'published a report on the discovery of a race of singing aliens']},
  {'question': 'What is the main event mentioned in the page?',
   'answer': ['discovery of singing aliens on the Moon']}]}</code></pre>
</div>
</div>
<div id="cell-55" class="cell" data-execution_count="26">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(output_text[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>{
    "questions": [
        {
            "question": "What is the main subject of the page?",
            "answer": ["astronomy", "space exploration", "New York Times"]
        },
        {
            "question": "What is the significance of the Sun newspaper in the context of the page?",
            "answer": ["published a report attributed to an astronomer", "founded by Sir John Herschel", "published a report on the discovery of a race of singing aliens"]
        },
        {
            "question": "What is the main event mentioned in the page?",
            "answer": ["discovery of singing aliens on the Moon"]
        }
    ]
}</code></pre>
</div>
</div>
<p>Having a valid JSON is a good start but in many synthetic data generation tasks, people are increasingly using Pydantic to ensure outputs are valid in other ways. Let‚Äôs take a look at a rewritten prompt I created for generating queries. In this prompt we ask the VLLM model to generate 3 different types of retrieval queries:</p>
<div id="cell-57" class="cell">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1">prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""You are an AI assistant specialized in document retrieval tasks. Given an image of a document page, your task is to generate retrieval queries that someone might use to find this document in a large corpus.</span></span>
<span id="cb40-2"></span>
<span id="cb40-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Please generate 3 different types of retrieval queries:</span></span>
<span id="cb40-4"></span>
<span id="cb40-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">1. A broad topical query: This should cover the main subject of the document.</span></span>
<span id="cb40-6"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">2. A specific detail query: This should focus on a particular fact, figure, or point made in the document.</span></span>
<span id="cb40-7"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">3. A visual element query: This should reference a chart, graph, image, or other visual component in the document, if present.</span></span>
<span id="cb40-8"></span>
<span id="cb40-9"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Important guidelines:</span></span>
<span id="cb40-10"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">- Ensure the queries are relevant for retrieval tasks, not just describing the page content.</span></span>
<span id="cb40-11"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">- Frame the queries as if someone is searching for this document, not asking questions about its content.</span></span>
<span id="cb40-12"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">- Make the queries diverse and representative of different search strategies.</span></span>
<span id="cb40-13"></span>
<span id="cb40-14"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">For each query, also provide a brief explanation of why this query would be effective in retrieving this document.</span></span>
<span id="cb40-15"></span>
<span id="cb40-16"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Format your response as a JSON object with the following structure:</span></span>
<span id="cb40-17"></span>
<span id="cb40-18"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb40-19"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  "broad_topical_query": "Your query here",</span></span>
<span id="cb40-20"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  "broad_topical_explanation": "Brief explanation",</span></span>
<span id="cb40-21"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  "specific_detail_query": "Your query here",</span></span>
<span id="cb40-22"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  "specific_detail_explanation": "Brief explanation",</span></span>
<span id="cb40-23"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  "visual_element_query": "Your query here",</span></span>
<span id="cb40-24"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  "visual_element_explanation": "Brief explanation"</span></span>
<span id="cb40-25"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb40-26"></span>
<span id="cb40-27"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">If there are no relevant visual elements, replace the third query with another specific detail query.</span></span>
<span id="cb40-28"></span>
<span id="cb40-29"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Here is the document image to analyze:</span></span>
<span id="cb40-30"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;image&gt;</span></span>
<span id="cb40-31"></span>
<span id="cb40-32"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Generate the queries based on this image and provide the response in the specified JSON format."""</span></span></code></pre></div>
</div>
<p>We ask the model for JSON output, we can represent this using a simple Pydantic model.</p>
<div id="cell-59" class="cell">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb41-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pydantic <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> BaseModel</span>
<span id="cb41-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> typing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Tuple</span>
<span id="cb41-3"></span>
<span id="cb41-4"></span>
<span id="cb41-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> GeneralRetrievalQuery(BaseModel):</span>
<span id="cb41-6">    broad_topical_query: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span></span>
<span id="cb41-7">    broad_topical_explanation: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span></span>
<span id="cb41-8">    specific_detail_query: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span></span>
<span id="cb41-9">    specific_detail_explanation: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span></span>
<span id="cb41-10">    visual_element_query: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span></span>
<span id="cb41-11">    visual_element_explanation: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span></span></code></pre></div>
</div>
<p>We could add additional constraints to our Pydantic model for example we could set a minimum and maximum length for the queries and answers. We‚Äôll get back to this at the end of the post but for now we can make a start with this simpler approach.</p>
<p>We‚Äôll now wrap this in a function to generate a response from the model using our Pydantic model.</p>
</section>
</section>
<section id="an-update-retrieval-focused-prompt" class="level2">
<h2 class="anchored" data-anchor-id="an-update-retrieval-focused-prompt">An update retrieval focused prompt</h2>
<div id="cell-62" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_retrieval_prompt(prompt_name: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> Tuple[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, GeneralRetrievalQuery]:</span>
<span id="cb42-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> prompt_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"general"</span>:</span>
<span id="cb42-3">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ValueError</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Only 'general' prompt is available in this version"</span>)</span>
<span id="cb42-4"></span>
<span id="cb42-5">    prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""You are an AI assistant specialized in document retrieval tasks. Given an image of a document page, your task is to generate retrieval queries that someone might use to find this document in a large corpus.</span></span>
<span id="cb42-6"></span>
<span id="cb42-7"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Please generate 3 different types of retrieval queries:</span></span>
<span id="cb42-8"></span>
<span id="cb42-9"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">1. A broad topical query: This should cover the main subject of the document.</span></span>
<span id="cb42-10"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">2. A specific detail query: This should focus on a particular fact, figure, or point made in the document.</span></span>
<span id="cb42-11"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">3. A visual element query: This should reference a chart, graph, image, or other visual component in the document, if present.</span></span>
<span id="cb42-12"></span>
<span id="cb42-13"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Important guidelines:</span></span>
<span id="cb42-14"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">- Ensure the queries are relevant for retrieval tasks, not just describing the page content.</span></span>
<span id="cb42-15"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">- Frame the queries as if someone is searching for this document, not asking questions about its content.</span></span>
<span id="cb42-16"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">- Make the queries diverse and representative of different search strategies.</span></span>
<span id="cb42-17"></span>
<span id="cb42-18"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">For each query, also provide a brief explanation of why this query would be effective in retrieving this document.</span></span>
<span id="cb42-19"></span>
<span id="cb42-20"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Format your response as a JSON object with the following structure:</span></span>
<span id="cb42-21"></span>
<span id="cb42-22"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb42-23"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  "broad_topical_query": "Your query here",</span></span>
<span id="cb42-24"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  "broad_topical_explanation": "Brief explanation",</span></span>
<span id="cb42-25"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  "specific_detail_query": "Your query here",</span></span>
<span id="cb42-26"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  "specific_detail_explanation": "Brief explanation",</span></span>
<span id="cb42-27"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  "visual_element_query": "Your query here",</span></span>
<span id="cb42-28"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  "visual_element_explanation": "Brief explanation"</span></span>
<span id="cb42-29"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb42-30"></span>
<span id="cb42-31"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">If there are no relevant visual elements, replace the third query with another specific detail query.</span></span>
<span id="cb42-32"></span>
<span id="cb42-33"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Here is the document image to analyze:</span></span>
<span id="cb42-34"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;image&gt;</span></span>
<span id="cb42-35"></span>
<span id="cb42-36"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Generate the queries based on this image and provide the response in the specified JSON format."""</span></span>
<span id="cb42-37"></span>
<span id="cb42-38">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> prompt, GeneralRetrievalQuery</span>
<span id="cb42-39"></span>
<span id="cb42-40"></span>
<span id="cb42-41"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Example usage:</span></span>
<span id="cb42-42">prompt_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"general"</span></span>
<span id="cb42-43">prompt, pydantic_model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_retrieval_prompt(prompt_name)</span>
<span id="cb42-44"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Prompt for '</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>prompt_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">':"</span>)</span>
<span id="cb42-45"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(prompt)</span>
<span id="cb42-46"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">Pydantic model for this prompt: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>pydantic_model<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Prompt for 'general':
You are an AI assistant specialized in document retrieval tasks. Given an image of a document page, your task is to generate retrieval queries that someone might use to find this document in a large corpus.

Please generate 3 different types of retrieval queries:

1. A broad topical query: This should cover the main subject of the document.
2. A specific detail query: This should focus on a particular fact, figure, or point made in the document.
3. A visual element query: This should reference a chart, graph, image, or other visual component in the document, if present.

Important guidelines:
- Ensure the queries are relevant for retrieval tasks, not just describing the page content.
- Frame the queries as if someone is searching for this document, not asking questions about its content.
- Make the queries diverse and representative of different search strategies.

For each query, also provide a brief explanation of why this query would be effective in retrieving this document.

Format your response as a JSON object with the following structure:

{
  "broad_topical_query": "Your query here",
  "broad_topical_explanation": "Brief explanation",
  "specific_detail_query": "Your query here",
  "specific_detail_explanation": "Brief explanation",
  "visual_element_query": "Your query here",
  "visual_element_explanation": "Brief explanation"
}

If there are no relevant visual elements, replace the third query with another specific detail query.

Here is the document image to analyze:
&lt;image&gt;

Generate the queries based on this image and provide the response in the specified JSON format.

Pydantic model for this prompt: &lt;class '__main__.GeneralRetrievalQuery'&gt;</code></pre>
</div>
</div>
<p>We‚Äôll now also wrap this in a function to generate a response from the model using our Pydantic model. We could probably do a bit more refactoring here but this will do for now.</p>
<div id="cell-64" class="cell" data-execution_count="50">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb44-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> generate_response(prompt, image):</span>
<span id="cb44-2">    messages <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb44-3">        {</span>
<span id="cb44-4">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user"</span>,</span>
<span id="cb44-5">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: [</span>
<span id="cb44-6">                {</span>
<span id="cb44-7">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"image"</span>,</span>
<span id="cb44-8">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"image"</span>: image,</span>
<span id="cb44-9">                },</span>
<span id="cb44-10">                {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"text"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"text"</span>: prompt},</span>
<span id="cb44-11">            ],</span>
<span id="cb44-12">        }</span>
<span id="cb44-13">    ]</span>
<span id="cb44-14"></span>
<span id="cb44-15">    text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> processor.apply_chat_template(</span>
<span id="cb44-16">        messages, tokenize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, add_generation_prompt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb44-17">    )</span>
<span id="cb44-18"></span>
<span id="cb44-19">    image_inputs, video_inputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> process_vision_info(messages)</span>
<span id="cb44-20"></span>
<span id="cb44-21">    inputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> processor(</span>
<span id="cb44-22">        text<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[text],</span>
<span id="cb44-23">        images<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>image_inputs,</span>
<span id="cb44-24">        videos<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>video_inputs,</span>
<span id="cb44-25">        padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb44-26">        return_tensors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pt"</span>,</span>
<span id="cb44-27">    )</span>
<span id="cb44-28">    inputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> inputs.to(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cuda"</span>)</span>
<span id="cb44-29"></span>
<span id="cb44-30">    generated_ids <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.generate(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>inputs, max_new_tokens<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>)</span>
<span id="cb44-31">    generated_ids_trimmed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb44-32">        out_ids[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(in_ids) :]</span>
<span id="cb44-33">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> in_ids, out_ids <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(inputs.input_ids, generated_ids)</span>
<span id="cb44-34">    ]</span>
<span id="cb44-35"></span>
<span id="cb44-36">    output_text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> processor.batch_decode(</span>
<span id="cb44-37">        generated_ids_trimmed,</span>
<span id="cb44-38">        skip_special_tokens<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb44-39">        clean_up_tokenization_spaces<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>,</span>
<span id="cb44-40">    )</span>
<span id="cb44-41"></span>
<span id="cb44-42">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> output_text</span></code></pre></div>
</div>
<p>Let‚Äôs now generate a response from the model for an example image from our UFO dataset.</p>
<div id="cell-66" class="cell" data-execution_count="51">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb45-1">generate_response(prompt, ds[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"image"</span>])</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="51">
<pre><code>['{\n  "broad_topical_query": "Document discussing the possibility of a cameraman going on the record in the future",\n  "broad_topical_explanation": "This query focuses on the main topic of the document, which is the discussion about the cameraman\'s potential to go on the record.",\n  "specific_detail_query": "Document mentioning Ray Santilli and his attempts to persuade the cameraman",\n  "specific_detail_explanation": "This query targets a specific detail in the document, which is Ray Santilli\'s efforts to contact the cameraman.",\n  "visual_element_query": "Document containing images of a damaged leg and an alien\'s foot",\n  "visual_element_explanation": "This query refers to the visual elements present in the document, which are images of a damaged leg and an alien\'s foot."\n}']</code></pre>
</div>
</div>
<p>We can see the model is doing a reasonable job of generating queries.</p>
<pre><code>['{\n  "broad_topical_query": "Document discussing the possibility of a cameraman going on the record in the future",\n  "broad_topical_explanation": "This query focuses on the main topic of the document, which is the discussion about the cameraman\'s potential to go on the record.",\n  "specific_detail_query": "Document mentioning Ray Santilli and his attempts to persuade the cameraman",\n  "specific_detail_explanation": "This query targets a specific detail in the document, which is Ray Santilli\'s efforts to contact the cameraman.",\n  "visual_element_query": "Document containing images of a damaged leg and an alien\'s foot",\n  "visual_element_explanation": "This query refers to the visual elements present in the document, which are images of a damaged leg and an alien\'s foot."\n}']</code></pre>
<pre class="tip"><code>One thing I have found in my experiments with generating synthetic data is that adding a request for an "explanation" from the model sometimes seems to help improve the quality of the generated data. I assume this is already noted somewhere in the literature (if not I'll call this `explain then generate`!). This seems to particularly helpful when generating more complex queries. Having the explanation can also give you a sense of how the model "understands" the task. This obviously comes with the donwside that it takes longer to generate the data and more tokens are required but it often seems worth trying. </code></pre>
</section>
<section id="generating-the-full-dataset" class="level2">
<h2 class="anchored" data-anchor-id="generating-the-full-dataset">Generating the full dataset</h2>
<p>As we play with the prompts and refine the queries we will often iterate quite quickly on a few examples. Once we‚Äôre reasonably confident in the queries we can generate a larger dataset to see how well our prompts work across a larger set of examples.</p>
<div id="cell-71" class="cell" data-execution_count="84">
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb49-1">ds</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="84">
<pre><code>Dataset({
    features: ['image'],
    num_rows: 212
})</code></pre>
</div>
</div>
<div id="cell-72" class="cell" data-execution_count="53">
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb51-1">sample <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ds.take(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span></code></pre></div>
</div>
<p>To generate our full dataset we just wrap our previous code in a loop and run it for all the examples in our dataset. We add a very broad exception handler to catch any errors and continue with the next example. This is obviously not production code but it‚Äôs good enough to get started with. If we scale to a much bigger dataset we might want to add some more robust error handling.</p>
<div id="cell-74" class="cell" data-execution_count="54">
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb52-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> tqdm.auto <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tqdm</span>
<span id="cb52-2"></span>
<span id="cb52-3">responses <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb52-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> row <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> tqdm(sample):</span>
<span id="cb52-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">try</span>:</span>
<span id="cb52-6">        resp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> generate_response(prompt, row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"image"</span>])</span>
<span id="cb52-7">        responses.append(resp)</span>
<span id="cb52-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">except</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">Exception</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> e:</span>
<span id="cb52-9">        responses.append(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"627ce7504864425cbbc6f2282dbd5132","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
</div>
<div id="cell-75" class="cell" data-execution_count="55">
<div class="sourceCode cell-code" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb53-1">responses[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="55">
<pre><code>['{\n  "broad_topical_query": "Document about the Sun and its influence on life",\n  "broad_topical_explanation": "This query focuses on the main subject of the document, which is the Sun and its impact on life.",\n  "specific_detail_query": "New York Times article on the Sun",\n  "specific_detail_explanation": "This query targets a specific detail mentioned in the document, which is the New York Times article on the Sun.",\n  "visual_element_query": "Document with a black and white image",\n  "visual_element_explanation": "This query refers to the visual element present in the document, which is a black and white image."\n}']</code></pre>
</div>
</div>
<p>We can see how many errors we have in our dataset.</p>
<div id="cell-77" class="cell" data-execution_count="56">
<div class="sourceCode cell-code" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb55-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>([r <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> r <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> responses <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> r <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>])</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="56">
<pre><code>0</code></pre>
</div>
</div>
<p>No bad generations!</p>
<p>We can also look at the first response to see what it looks like.</p>
<div id="cell-80" class="cell" data-execution_count="58">
<div class="sourceCode cell-code" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb57-1">responses[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="58">
<pre><code>'{\n  "broad_topical_query": "Document about the Sun and its influence on life",\n  "broad_topical_explanation": "This query focuses on the main subject of the document, which is the Sun and its impact on life.",\n  "specific_detail_query": "New York Times article on the Sun",\n  "specific_detail_explanation": "This query targets a specific detail mentioned in the document, which is the New York Times article on the Sun.",\n  "visual_element_query": "Document with a black and white image",\n  "visual_element_explanation": "This query refers to the visual element present in the document, which is a black and white image."\n}'</code></pre>
</div>
</div>
<p>Let‚Äôs see if we can parse this into a JSON object.</p>
<div id="cell-82" class="cell" data-execution_count="59">
<div class="sourceCode cell-code" id="cb59" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb59-1">json.loads(responses[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="59">
<pre><code>{'broad_topical_query': 'Document about the Sun and its influence on life',
 'broad_topical_explanation': 'This query focuses on the main subject of the document, which is the Sun and its impact on life.',
 'specific_detail_query': 'New York Times article on the Sun',
 'specific_detail_explanation': 'This query targets a specific detail mentioned in the document, which is the New York Times article on the Sun.',
 'visual_element_query': 'Document with a black and white image',
 'visual_element_explanation': 'This query refers to the visual element present in the document, which is a black and white image.'}</code></pre>
</div>
</div>
<p>first example seems to work, now let‚Äôs add this to our dataset and see how many we can parse.</p>
<div id="cell-84" class="cell" data-execution_count="61">
<div class="sourceCode cell-code" id="cb61" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb61-1">sample <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sample.add_column(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"raw_queries"</span>, responses)</span></code></pre></div>
</div>
<div id="cell-85" class="cell" data-execution_count="62">
<div class="sourceCode cell-code" id="cb62" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb62-1">sample</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="62">
<pre><code>Dataset({
    features: ['image', 'raw_queries'],
    num_rows: 100
})</code></pre>
</div>
</div>
<p>To deal with bad generations we‚Äôll create just fill out these column with <code>None</code> values. We can grab all the required keys from the valid first response.</p>
<div id="cell-87" class="cell" data-execution_count="71">
<div class="sourceCode cell-code" id="cb64" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb64-1">keys <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(json.loads(responses[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]).keys())</span>
<span id="cb64-2">keys</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="71">
<pre><code>['broad_topical_query',
 'broad_topical_explanation',
 'specific_detail_query',
 'specific_detail_explanation',
 'visual_element_query',
 'visual_element_explanation']</code></pre>
</div>
</div>
<p>and do something like this to fill out this row</p>
<div id="cell-89" class="cell" data-execution_count="73">
<div class="sourceCode cell-code" id="cb66" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb66-1">{k: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> k <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> keys}</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="73">
<pre><code>{'broad_topical_query': None,
 'broad_topical_explanation': None,
 'specific_detail_query': None,
 'specific_detail_explanation': None,
 'visual_element_query': None,
 'visual_element_explanation': None}</code></pre>
</div>
</div>
<p>We create a function to extract the data from the raw queries and parse them into a JSON object.</p>
<div id="cell-91" class="cell" data-execution_count="74">
<div class="sourceCode cell-code" id="cb68" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb68-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> extract_data(row):</span>
<span id="cb68-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">try</span>:</span>
<span id="cb68-3">        data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> json.loads(row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"raw_queries"</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb68-4">        data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"parsed_into_json"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb68-5">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> data</span>
<span id="cb68-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">except</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">Exception</span>:</span>
<span id="cb68-7">        data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {k: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> k <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> keys}</span>
<span id="cb68-8">        data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"parsed_into_json"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb68-9">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> data</span></code></pre></div>
</div>
<p>We can now use the <code>map</code> method to apply this function to our dataset.</p>
<div id="cell-93" class="cell" data-execution_count="76">
<div class="sourceCode cell-code" id="cb69" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb69-1">parsed_ds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sample.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(extract_data)</span></code></pre></div>
</div>
<p>We can then see how many we‚Äôve successfully parsed.</p>
<div id="cell-95" class="cell" data-execution_count="79">
<div class="sourceCode cell-code" id="cb70" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb70-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> collections <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Counter</span>
<span id="cb70-2"></span>
<span id="cb70-3">Counter(parsed_ds[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"parsed_into_json"</span>])</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="79">
<pre><code>Counter({True: 95, False: 5})</code></pre>
</div>
</div>
<p>So in this case 5% of the responses were not parseable. This isn‚Äôt too bad and we might be able to live with this.</p>
</section>
<section id="pushing-to-the-hub" class="level2">
<h2 class="anchored" data-anchor-id="pushing-to-the-hub">Pushing to the Hub</h2>
<p>We can now push this dataset to the Hugging Face Hub. This will also allow us to view the dataset in the Dataset Viewer. This can often be a very nice way of quickly checking through examples in a dataset to see how the quality looks.</p>
<p>If you are not authenticated you can use the <code>login</code> function to authenticate with the Hub.</p>
<div id="cell-99" class="cell" data-execution_count="80">
<div class="sourceCode cell-code" id="cb72" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb72-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> huggingface_hub <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> login</span></code></pre></div>
</div>
<div id="cell-100" class="cell" data-execution_count="81">
<div class="sourceCode cell-code" id="cb73" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb73-1">login()</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"bd4de41610614d4b83669c1cb8064e02","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
</div>
<div id="cell-101" class="cell" data-execution_count="82">
<div class="sourceCode cell-code" id="cb74" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb74-1">parsed_ds.push_to_hub(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"davanstrien/ufo-ColPali"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"6fedd93a30f34aebb0207d2f3ca8c52c","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"c4d1a1f443fe4b17976f7590434312d4","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"b08b902c59d447798473df4d5e1eeec1","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display" data-execution_count="82">
<pre><code>CommitInfo(commit_url='https://huggingface.co/datasets/davanstrien/ufo-ColPali/commit/c50c8e42cd01d2dde17ef64e66ea1b826c0ca4ec', commit_message='Upload dataset', commit_description='', oid='c50c8e42cd01d2dde17ef64e66ea1b826c0ca4ec', pr_url=None, repo_url=RepoUrl('https://huggingface.co/datasets/davanstrien/ufo-ColPali', endpoint='https://huggingface.co', repo_type='dataset', repo_id='davanstrien/ufo-ColPali'), pr_revision=None, pr_num=None)</code></pre>
</div>
</div>
<p>Here is what the dataset looks like in the Hugging Face Hub. You‚Äôll see there are actually more than a 100 examples since I did a larger generation of data since doing the first batch of a 100. You can be your own judge but my sense it that the queries are looking pretty good already.</p>
<iframe src="https://huggingface.co/datasets/davanstrien/ufo-ColPali/embed/viewer/default/train" frameborder="0" width="100%" height="560px">
</iframe>
</section>
<section id="conclusion-improvements-and-next-steps" class="level2">
<h2 class="anchored" data-anchor-id="conclusion-improvements-and-next-steps">Conclusion, improvements and next steps</h2>
<p>There are a few improvements that we could make to this process.</p>
<section id="structured-generation" class="level3">
<h3 class="anchored" data-anchor-id="structured-generation">Structured Generation</h3>
<p>One of the first things I think would be worth exploring further is using structured generation to improve the quality of the generated queries. This would allow us to properly use the Pydantic models to constrain the outputs. The <code>Outlines</code> library has functionality for doing this with for <a href="https://dottxt-ai.github.io/outlines/reference/models/transformers_vision/">VLMs</a>. Once I am more satisified with the quality of the queries I‚Äôll come back to this.</p>
</section>
<section id="more-diverse-queries" class="level3">
<h3 class="anchored" data-anchor-id="more-diverse-queries">More diverse queries</h3>
<p>I focused on generating a single type of query for each example in the UFO dataset. I think for a dataset of this size it would be worth taking a more diverse set of generations. Below you can see an apendix with a few options for these kinds of queries.</p>
</section>
<section id="next-steps" class="level3">
<h3 class="anchored" data-anchor-id="next-steps">Next Steps</h3>
<p>I am keen to test this approach with a few more domains and also work on the actual fine-tuning of ColPali models.</p>
</section>
</section>
<section id="appendix-more-diverse-queries" class="level2">
<h2 class="anchored" data-anchor-id="appendix-more-diverse-queries">Appendix more diverse queries</h2>
<p>Here are a few more examples of prompts I am experimenting with.</p>
<div id="cell-106" class="cell">
<div class="sourceCode cell-code" id="cb76" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb76-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pydantic <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> BaseModel</span>
<span id="cb76-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> typing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> List, Optional, Tuple, Union</span>
<span id="cb76-3"></span>
<span id="cb76-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Pydantic models for each prompt type</span></span>
<span id="cb76-5"></span>
<span id="cb76-6"></span>
<span id="cb76-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> GeneralRetrievalQuery(BaseModel):</span>
<span id="cb76-8">    broad_topical_query: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span></span>
<span id="cb76-9">    broad_topical_explanation: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span></span>
<span id="cb76-10">    specific_detail_query: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span></span>
<span id="cb76-11">    specific_detail_explanation: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span></span>
<span id="cb76-12">    visual_element_query: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span></span>
<span id="cb76-13">    visual_element_explanation: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span></span>
<span id="cb76-14"></span>
<span id="cb76-15"></span>
<span id="cb76-16"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> MultiDocumentComparisonQuery(BaseModel):</span>
<span id="cb76-17">    comparison_query: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span></span>
<span id="cb76-18">    comparison_explanation: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span></span>
<span id="cb76-19">    corroboration_contradiction_query: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span></span>
<span id="cb76-20">    corroboration_contradiction_explanation: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span></span>
<span id="cb76-21"></span>
<span id="cb76-22"></span>
<span id="cb76-23"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> DomainSpecificQuery(BaseModel):</span>
<span id="cb76-24">    identified_domain: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span></span>
<span id="cb76-25">    domain_specific_query: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span></span>
<span id="cb76-26">    domain_specific_explanation: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span></span>
<span id="cb76-27">    data_findings_query: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span></span>
<span id="cb76-28">    data_findings_explanation: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span></span>
<span id="cb76-29">    applications_implications_query: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span></span>
<span id="cb76-30">    applications_implications_explanation: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span></span>
<span id="cb76-31"></span>
<span id="cb76-32"></span>
<span id="cb76-33"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> VisualElementFocusQuery(BaseModel):</span>
<span id="cb76-34">    similar_visual_element_query: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span></span>
<span id="cb76-35">    similar_visual_element_explanation: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span></span>
<span id="cb76-36">    text_visual_combination_query: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span></span>
<span id="cb76-37">    text_visual_combination_explanation: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span></span>
<span id="cb76-38">    visual_content_understanding_query: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span></span>
<span id="cb76-39">    visual_content_understanding_explanation: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span></span>
<span id="cb76-40"></span>
<span id="cb76-41"></span>
<span id="cb76-42"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> TemporalMetadataQuery(BaseModel):</span>
<span id="cb76-43">    temporal_query: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span></span>
<span id="cb76-44">    temporal_explanation: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span></span>
<span id="cb76-45">    topic_metadata_combination_query: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span></span>
<span id="cb76-46">    topic_metadata_combination_explanation: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span></span>
<span id="cb76-47">    update_related_document_query: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span></span>
<span id="cb76-48">    update_related_document_explanation: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span></span>
<span id="cb76-49"></span>
<span id="cb76-50"></span>
<span id="cb76-51"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> DifficultyAmbiguityQuery(BaseModel):</span>
<span id="cb76-52">    simple_query: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span></span>
<span id="cb76-53">    simple_explanation: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span></span>
<span id="cb76-54">    complex_query: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span></span>
<span id="cb76-55">    complex_explanation: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span></span>
<span id="cb76-56">    ambiguous_query: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span></span>
<span id="cb76-57">    ambiguous_explanation: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span></span>
<span id="cb76-58"></span>
<span id="cb76-59"></span>
<span id="cb76-60"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> MultilingualMultimodalQuery(BaseModel):</span>
<span id="cb76-61">    multilingual_query: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span></span>
<span id="cb76-62">    multilingual_explanation: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span></span>
<span id="cb76-63">    multimodal_combination_query: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span></span>
<span id="cb76-64">    multimodal_combination_explanation: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span></span>
<span id="cb76-65">    text_visual_understanding_query: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span></span>
<span id="cb76-66">    text_visual_understanding_explanation: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span></span>
<span id="cb76-67"></span>
<span id="cb76-68"></span>
<span id="cb76-69"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_retrieval_prompt(</span>
<span id="cb76-70">    prompt_name: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>,</span>
<span id="cb76-71">) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> Tuple[</span>
<span id="cb76-72">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>,</span>
<span id="cb76-73">    Union[</span>
<span id="cb76-74">        GeneralRetrievalQuery,</span>
<span id="cb76-75">        MultiDocumentComparisonQuery,</span>
<span id="cb76-76">        DomainSpecificQuery,</span>
<span id="cb76-77">        VisualElementFocusQuery,</span>
<span id="cb76-78">        TemporalMetadataQuery,</span>
<span id="cb76-79">        DifficultyAmbiguityQuery,</span>
<span id="cb76-80">        MultilingualMultimodalQuery,</span>
<span id="cb76-81">    ],</span>
<span id="cb76-82">]:</span>
<span id="cb76-83">    prompts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb76-84">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"general"</span>: (</span>
<span id="cb76-85">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""You are an AI assistant specialized in document retrieval tasks. Given an image of a document page, your task is to generate retrieval queries that someone might use to find this document in a large corpus.</span></span>
<span id="cb76-86"></span>
<span id="cb76-87"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Please generate 3 different types of retrieval queries:</span></span>
<span id="cb76-88"></span>
<span id="cb76-89"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">1. A broad topical query: This should cover the main subject of the document.</span></span>
<span id="cb76-90"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">2. A specific detail query: This should focus on a particular fact, figure, or point made in the document.</span></span>
<span id="cb76-91"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">3. A visual element query: This should reference a chart, graph, image, or other visual component in the document, if present.</span></span>
<span id="cb76-92"></span>
<span id="cb76-93"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Important guidelines:</span></span>
<span id="cb76-94"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">- Ensure the queries are relevant for retrieval tasks, not just describing the page content.</span></span>
<span id="cb76-95"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">- Frame the queries as if someone is searching for this document, not asking questions about its content.</span></span>
<span id="cb76-96"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">- Make the queries diverse and representative of different search strategies.</span></span>
<span id="cb76-97"></span>
<span id="cb76-98"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">For each query, also provide a brief explanation of why this query would be effective in retrieving this document.</span></span>
<span id="cb76-99"></span>
<span id="cb76-100"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Format your response as a JSON object with the following structure:</span></span>
<span id="cb76-101"></span>
<span id="cb76-102"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb76-103"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  "broad_topical_query": "Your query here",</span></span>
<span id="cb76-104"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  "broad_topical_explanation": "Brief explanation",</span></span>
<span id="cb76-105"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  "specific_detail_query": "Your query here",</span></span>
<span id="cb76-106"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  "specific_detail_explanation": "Brief explanation",</span></span>
<span id="cb76-107"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  "visual_element_query": "Your query here",</span></span>
<span id="cb76-108"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  "visual_element_explanation": "Brief explanation"</span></span>
<span id="cb76-109"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb76-110"></span>
<span id="cb76-111"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">If there are no relevant visual elements, replace the third query with another specific detail query.</span></span>
<span id="cb76-112"></span>
<span id="cb76-113"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Here is the document image to analyze:</span></span>
<span id="cb76-114"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;image&gt;</span></span>
<span id="cb76-115"></span>
<span id="cb76-116"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Generate the queries based on this image and provide the response in the specified JSON format."""</span>,</span>
<span id="cb76-117">            GeneralRetrievalQuery,</span>
<span id="cb76-118">        ),</span>
<span id="cb76-119">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"comparison"</span>: (</span>
<span id="cb76-120">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""Imagine this document page is part of a larger corpus. Your task is to generate retrieval queries that would require comparing this document with others in the corpus.</span></span>
<span id="cb76-121"></span>
<span id="cb76-122"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Please generate 2 retrieval queries:</span></span>
<span id="cb76-123"></span>
<span id="cb76-124"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">1. A query comparing this document's topic with a related subject</span></span>
<span id="cb76-125"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">2. A query seeking documents that contradict or support the main point of this page</span></span>
<span id="cb76-126"></span>
<span id="cb76-127"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">For each query, provide a brief explanation of how it encourages document comparison and why it would be effective for retrieval.</span></span>
<span id="cb76-128"></span>
<span id="cb76-129"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Format your response as a JSON object with the following structure:</span></span>
<span id="cb76-130"></span>
<span id="cb76-131"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb76-132"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  "comparison_query": "Your query here",</span></span>
<span id="cb76-133"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  "comparison_explanation": "Brief explanation",</span></span>
<span id="cb76-134"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  "corroboration_contradiction_query": "Your query here",</span></span>
<span id="cb76-135"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  "corroboration_contradiction_explanation": "Brief explanation"</span></span>
<span id="cb76-136"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb76-137"></span>
<span id="cb76-138"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Here is the document image to analyze:</span></span>
<span id="cb76-139"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;image&gt;</span></span>
<span id="cb76-140"></span>
<span id="cb76-141"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Generate the queries based on this image and provide the response in the specified JSON format."""</span>,</span>
<span id="cb76-142">            MultiDocumentComparisonQuery,</span>
<span id="cb76-143">        ),</span>
<span id="cb76-144">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"domain"</span>: (</span>
<span id="cb76-145">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""Your task is to create retrieval queries that a professional in the document's domain might use to find this document in a large corpus.</span></span>
<span id="cb76-146"></span>
<span id="cb76-147"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">First, identify the domain of the document (e.g., scientific, financial, legal, medical, technical).</span></span>
<span id="cb76-148"></span>
<span id="cb76-149"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Then, generate 3 retrieval queries:</span></span>
<span id="cb76-150"></span>
<span id="cb76-151"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">1. A query using domain-specific terminology</span></span>
<span id="cb76-152"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">2. A query seeking specific data or findings presented in the document</span></span>
<span id="cb76-153"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">3. A query related to the document's potential applications or implications</span></span>
<span id="cb76-154"></span>
<span id="cb76-155"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">For each query, provide a brief explanation of its relevance to the domain and why it would be effective for retrieval.</span></span>
<span id="cb76-156"></span>
<span id="cb76-157"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Format your response as a JSON object with the following structure:</span></span>
<span id="cb76-158"></span>
<span id="cb76-159"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb76-160"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  "identified_domain": "Domain name",</span></span>
<span id="cb76-161"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  "domain_specific_query": "Your query here",</span></span>
<span id="cb76-162"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  "domain_specific_explanation": "Brief explanation",</span></span>
<span id="cb76-163"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  "data_findings_query": "Your query here",</span></span>
<span id="cb76-164"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  "data_findings_explanation": "Brief explanation",</span></span>
<span id="cb76-165"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  "applications_implications_query": "Your query here",</span></span>
<span id="cb76-166"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  "applications_implications_explanation": "Brief explanation"</span></span>
<span id="cb76-167"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb76-168"></span>
<span id="cb76-169"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Here is the document image to analyze:</span></span>
<span id="cb76-170"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;image&gt;</span></span>
<span id="cb76-171"></span>
<span id="cb76-172"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Generate the queries based on this image and provide the response in the specified JSON format."""</span>,</span>
<span id="cb76-173">            DomainSpecificQuery,</span>
<span id="cb76-174">        ),</span>
<span id="cb76-175">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"visual"</span>: (</span>
<span id="cb76-176">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""Your task is to generate retrieval queries focusing on the visual elements in this document page (charts, tables, images, diagrams).</span></span>
<span id="cb76-177"></span>
<span id="cb76-178"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Please generate 3 retrieval queries:</span></span>
<span id="cb76-179"></span>
<span id="cb76-180"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">1. A query specifically asking for documents with similar visual elements</span></span>
<span id="cb76-181"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">2. A query combining textual and visual information</span></span>
<span id="cb76-182"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">3. A query that would require understanding the content of the visual element to retrieve this document</span></span>
<span id="cb76-183"></span>
<span id="cb76-184"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">For each query, provide a brief explanation of how it incorporates visual elements and why it would be effective for retrieval.</span></span>
<span id="cb76-185"></span>
<span id="cb76-186"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Format your response as a JSON object with the following structure:</span></span>
<span id="cb76-187"></span>
<span id="cb76-188"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb76-189"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  "similar_visual_element_query": "Your query here",</span></span>
<span id="cb76-190"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  "similar_visual_element_explanation": "Brief explanation",</span></span>
<span id="cb76-191"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  "text_visual_combination_query": "Your query here",</span></span>
<span id="cb76-192"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  "text_visual_combination_explanation": "Brief explanation",</span></span>
<span id="cb76-193"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  "visual_content_understanding_query": "Your query here",</span></span>
<span id="cb76-194"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  "visual_content_understanding_explanation": "Brief explanation"</span></span>
<span id="cb76-195"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb76-196"></span>
<span id="cb76-197"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">If the document lacks significant visual elements, explain this and generate alternative queries focusing on the document's structure or layout.</span></span>
<span id="cb76-198"></span>
<span id="cb76-199"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Here is the document image to analyze:</span></span>
<span id="cb76-200"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;image&gt;</span></span>
<span id="cb76-201"></span>
<span id="cb76-202"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Generate the queries based on this image and provide the response in the specified JSON format."""</span>,</span>
<span id="cb76-203">            VisualElementFocusQuery,</span>
<span id="cb76-204">        ),</span>
<span id="cb76-205">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"temporal"</span>: (</span>
<span id="cb76-206">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""Assuming this document is part of a large, diverse corpus, your task is to generate retrieval queries that incorporate metadata or temporal aspects.</span></span>
<span id="cb76-207"></span>
<span id="cb76-208"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Please generate 3 retrieval queries:</span></span>
<span id="cb76-209"></span>
<span id="cb76-210"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">1. A query specifying a likely time frame for this document</span></span>
<span id="cb76-211"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">2. A query combining topical information with a metadata element (e.g., author, publication type)</span></span>
<span id="cb76-212"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">3. A query seeking updated or related documents on the same topic</span></span>
<span id="cb76-213"></span>
<span id="cb76-214"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">For each query, provide a brief explanation of how it uses temporal or metadata information and why it would be effective for retrieval.</span></span>
<span id="cb76-215"></span>
<span id="cb76-216"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Format your response as a JSON object with the following structure:</span></span>
<span id="cb76-217"></span>
<span id="cb76-218"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb76-219"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  "temporal_query": "Your query here",</span></span>
<span id="cb76-220"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  "temporal_explanation": "Brief explanation",</span></span>
<span id="cb76-221"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  "topic_metadata_combination_query": "Your query here",</span></span>
<span id="cb76-222"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  "topic_metadata_combination_explanation": "Brief explanation",</span></span>
<span id="cb76-223"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  "update_related_document_query": "Your query here",</span></span>
<span id="cb76-224"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  "update_related_document_explanation": "Brief explanation"</span></span>
<span id="cb76-225"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb76-226"></span>
<span id="cb76-227"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Here is the document image to analyze:</span></span>
<span id="cb76-228"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;image&gt;</span></span>
<span id="cb76-229"></span>
<span id="cb76-230"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Generate the queries based on this image and provide the response in the specified JSON format."""</span>,</span>
<span id="cb76-231">            TemporalMetadataQuery,</span>
<span id="cb76-232">        ),</span>
<span id="cb76-233">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"difficulty"</span>: (</span>
<span id="cb76-234">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""Your task is to create retrieval queries for this document at different levels of complexity and ambiguity.</span></span>
<span id="cb76-235"></span>
<span id="cb76-236"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Please generate 3 retrieval queries:</span></span>
<span id="cb76-237"></span>
<span id="cb76-238"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">1. A simple, straightforward query</span></span>
<span id="cb76-239"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">2. A complex query requiring understanding of multiple aspects of the document</span></span>
<span id="cb76-240"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">3. An ambiguous query that could retrieve this document among others</span></span>
<span id="cb76-241"></span>
<span id="cb76-242"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">For each query, provide a brief explanation of its complexity level or ambiguity and why it would be effective or challenging for retrieval.</span></span>
<span id="cb76-243"></span>
<span id="cb76-244"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Format your response as a JSON object with the following structure:</span></span>
<span id="cb76-245"></span>
<span id="cb76-246"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb76-247"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  "simple_query": "Your query here",</span></span>
<span id="cb76-248"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  "simple_explanation": "Brief explanation",</span></span>
<span id="cb76-249"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  "complex_query": "Your query here",</span></span>
<span id="cb76-250"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  "complex_explanation": "Brief explanation",</span></span>
<span id="cb76-251"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  "ambiguous_query": "Your query here",</span></span>
<span id="cb76-252"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  "ambiguous_explanation": "Brief explanation"</span></span>
<span id="cb76-253"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb76-254"></span>
<span id="cb76-255"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Here is the document image to analyze:</span></span>
<span id="cb76-256"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;image&gt;</span></span>
<span id="cb76-257"></span>
<span id="cb76-258"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Generate the queries based on this image and provide the response in the specified JSON format."""</span>,</span>
<span id="cb76-259">            DifficultyAmbiguityQuery,</span>
<span id="cb76-260">        ),</span>
<span id="cb76-261">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"multilingual"</span>: (</span>
<span id="cb76-262">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""Your task is to generate retrieval queries considering potential multilingual and multi-modal aspects of the document.</span></span>
<span id="cb76-263"></span>
<span id="cb76-264"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Please generate 3 retrieval queries:</span></span>
<span id="cb76-265"></span>
<span id="cb76-266"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">1. A query in a different language (if applicable) that would retrieve this document</span></span>
<span id="cb76-267"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">2. A query combining textual and non-textual elements</span></span>
<span id="cb76-268"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">3. A query that requires understanding both the text and visual elements to retrieve this document accurately</span></span>
<span id="cb76-269"></span>
<span id="cb76-270"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">For each query, provide a brief explanation of its multilingual or multi-modal nature and why it would be effective for retrieval.</span></span>
<span id="cb76-271"></span>
<span id="cb76-272"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Format your response as a JSON object with the following structure:</span></span>
<span id="cb76-273"></span>
<span id="cb76-274"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb76-275"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  "multilingual_query": "Your query here",</span></span>
<span id="cb76-276"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  "multilingual_explanation": "Brief explanation",</span></span>
<span id="cb76-277"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  "multimodal_combination_query": "Your query here",</span></span>
<span id="cb76-278"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  "multimodal_combination_explanation": "Brief explanation",</span></span>
<span id="cb76-279"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  "text_visual_understanding_query": "Your query here",</span></span>
<span id="cb76-280"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  "text_visual_understanding_explanation": "Brief explanation"</span></span>
<span id="cb76-281"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb76-282"></span>
<span id="cb76-283"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">If the document is not suitable for multilingual queries, explain why and provide an alternative query.</span></span>
<span id="cb76-284"></span>
<span id="cb76-285"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Here is the document image to analyze:</span></span>
<span id="cb76-286"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;image&gt;</span></span>
<span id="cb76-287"></span>
<span id="cb76-288"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Generate the queries based on this image and provide the response in the specified JSON format."""</span>,</span>
<span id="cb76-289">            MultilingualMultimodalQuery,</span>
<span id="cb76-290">        ),</span>
<span id="cb76-291">    }</span>
<span id="cb76-292"></span>
<span id="cb76-293">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> prompt_name <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> prompts:</span>
<span id="cb76-294">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ValueError</span>(</span>
<span id="cb76-295">            <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Invalid prompt name. Choose from: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">', '</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>join(prompts.keys())<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb76-296">        )</span>
<span id="cb76-297"></span>
<span id="cb76-298">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> prompts[prompt_name]</span>
<span id="cb76-299"></span>
<span id="cb76-300"></span>
<span id="cb76-301"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Example usage:</span></span>
<span id="cb76-302">prompt_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"general"</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># You can change this to any of the available prompt names</span></span>
<span id="cb76-303">prompt, pydantic_model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_retrieval_prompt(prompt_name)</span>
<span id="cb76-304"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Prompt for '</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>prompt_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">':"</span>)</span>
<span id="cb76-305"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(prompt)</span>
<span id="cb76-306"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">Pydantic model for this prompt: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>pydantic_model<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
</div>


</section>

 ]]></description>
  <guid>https://danielvanstrien.xyz/posts/post-with-code/colpali/2024-09-23-generate_colpali_dataset.html</guid>
  <pubDate>Mon, 23 Sep 2024 00:00:00 GMT</pubDate>
  <media:content url="https://danielvanstrien.xyz/posts/post-with-code/colpali/cJkPlaOVIju5yR7TaO0fD.png" medium="image" type="image/png" height="216" width="144"/>
</item>
<item>
  <title>Synthetic dataset generation techniques: generating custom sentence similarity data</title>
  <link>https://danielvanstrien.xyz/posts/plain-text/synthetic-data-generation/2024-05-03-synethic-data-1.html</link>
  <description><![CDATA[ 




<p><em>This post is part of a series on synthetic data generation techniques. You may also want to check out <a href="https://github.com/davanstrien/awesome-synthetic-datasets">Awesome Synthetic (text) datasets</a>, where I will be collecting these posts.</em></p>
<p>One of the most exciting use cases for LLMs is generating synthetic datasets that can be used to train non-LLM models. In the past, gathering enough data was one of the most significant barriers to training task-specific models, such as text classification models. LLMs can potentially help in this area.</p>
<section id="creating-data-for-training-and-fine-tuning-embedding-models-using-llms" class="level2">
<h2 class="anchored" data-anchor-id="creating-data-for-training-and-fine-tuning-embedding-models-using-llms">Creating data for training and fine-tuning embedding models using LLMs?</h2>
<p>One area where synthetic data can be compelling is generating data for training sentence similarity models.</p>
<blockquote class="blockquote">
<p>Sentence Similarity is the task of determining how similar two texts are. Sentence similarity models convert input texts into vectors (embeddings) that capture semantic information and calculate how close (similar) they are between them. This task is particularly useful for information retrieval and clustering/grouping. <a href="https://huggingface.co/tasks/sentence-similarity">source</a></p>
</blockquote>
<p>Whilst some strong open embedding models can be used for sentence similarity tasks, there are times when additional data for fine-tuning a model might be helpful:</p>
<ul>
<li>When working in a domain where generic models don‚Äôt work well.</li>
<li>When you want to optimize a model for a particular use, i.e.&nbsp;retrieval vs classification</li>
<li>Scaling, scaling, scaling: you want to train a general embedding model and need more data.</li>
</ul>
<p>For the latter example, LLMs are useful not only because they allow you to scale the amount of data but also because they allow you to control what data you have in your training data. Many embedding models use some weak supervision of data found ‚Äúin the wild‚Äù. While using this data allows the model to learn how to model similarity, there is also quite a lot of noise in this data. A recent paper <a href="https://huggingface.co/papers/2401.00368"><em>Improving Text Embeddings with Large Language Models</em></a> showed generating data that aimed to be diverse to the kinds of data an embedding model would work with reducing the amount of data needed compared to using a much larger but noisier weakly labeled dataset.</p>
</section>
<section id="what-is-similar" class="level2">
<h2 class="anchored" data-anchor-id="what-is-similar">What is similar</h2>
<p>One frustration I‚Äôve sometimes had when people discuss sentence similarity as a task is that what ‚Äúsimilarity‚Äù means is usually pretty poorly defined (sorry, this is my humanities training rearing its head). This is one of the reasons why I really like the paper <a href="https://arxiv.org/html/2305.12517v3">Description-Based Text Similarity</a>. In this papers the authors describe one of the issues with existing approaches:</p>
<blockquote class="blockquote">
<p>The notion of similarity‚Ä¶is not explicitly defined but rather learned from vast datasets containing pairs of texts labeled as similar, often mixing various different kinds of similarity (Kaster et al., 2021; Opitz &amp; Frank, 2022). This makes them sub-optimal for information seeking queries, as it is hard to control or predict the results of a given similarity-based query. What is a good query representation and similarity definition for a semantic-search use case?</p>
</blockquote>
<p>The approach they take in their paper is to use an LLM to generate new query sentences which aim to be ‚Äúabstract descriptions of sentences‚Äù which can be trained alongside their instantiations. To make it more clear here are some examples they produce in the paper:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://cdn-uploads.huggingface.co/production/uploads/60107b385ac3e86b3ea4fc34/hf8ZT_hJfKoy8TyUEX-vw.png" class="img-fluid figure-img"></p>
<figcaption>image/png</figcaption>
</figure>
</div>
</section>
<section id="generating-custom-sentence-similarity-data" class="level2">
<h2 class="anchored" data-anchor-id="generating-custom-sentence-similarity-data">Generating custom sentence similarity data</h2>
<p>While this paper is focused on the task of generating ‚Äòabstract‚Äô queries for sentences the approach can be adapted to other more targeted similarity datasets. In the rest of this post I will briefly give some examples of how you can generate this kind of data (the full notebook in the Awesome Synthetic Datasets repo has the full code).</p>
<section id="using-inference-endpoints-via-the-huggingface_hub-library." class="level3">
<h3 class="anchored" data-anchor-id="using-inference-endpoints-via-the-huggingface_hub-library.">Using Inference Endpoints via the huggingface_hub library.</h3>
<p>In the paper the authors use GPT3.5 from OpenAI. In this post we‚Äôll switch that out with an open model <a href="https://huggingface.co/meta-llama/Meta-Llama-3-70B-Instruct">meta-llama/Meta-Llama-3-70B-Instruct</a> which we‚Äôll call via the <code>huggingface_hub</code> library.</p>
<p>First we can import the required libraries:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> huggingface_hub <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> get_token</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> huggingface_hub <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> InferenceClient</span></code></pre></div>
<p>We can then use <code>InferenceClient</code> to specify which model we want to use.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">client <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> InferenceClient(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"meta-llama/Meta-Llama-3-70B-Instruct"</span>, token<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>get_token())</span></code></pre></div>
</section>
<section id="the-prompts" class="level3">
<h3 class="anchored" data-anchor-id="the-prompts">The prompts</h3>
<p>For generating the descriptions of Wikipedia this prompt is used:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">wiki_prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"""</span></span>
<span id="cb3-2"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">Let's write abstract descriptions of sentences. Example:</span></span>
<span id="cb3-3"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">Sentence: Pilate's role in the events leading to the crucifixion lent themselves to melodrama , even tragedy , and Pilate often has a role in medieval mystery plays .</span></span>
<span id="cb3-4"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">Description: A description of a historical religious figure's involvement in a significant event and its later portrayal in art.</span></span>
<span id="cb3-5"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">Note: Descriptions can differ in the level of abstraction, granularity and the part of the sentence they focus on. Some descriptions need to be abstract, while others should be concrete and detailed.</span></span>
<span id="cb3-6"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">For the following sentence, write up 5 good and stand-alone, independent descriptions and 5 bad descriptions (which may be related, but are clearly wrong). Output a json file with keys 'good', 'bad'.</span></span>
<span id="cb3-7"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">Sentence: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>sentence<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-8"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">Start your answer with a curly bracket.</span></span>
<span id="cb3-9"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span></code></pre></div>
<p>Let‚Äôs generate some sentences using this prompt. We‚Äôll use this sentence as an example:</p>
<blockquote class="blockquote">
<p>‚ÄúIn Greek mythology, Achilles ( ) or Achilleus () was a hero of the Trojan War who was known as being the greatest of all the Greek warriors. A central character in Homer‚Äôs Iliad, he was the son of the Nereid Thetis and Peleus, king of Phthia and famous Argonaut. Achilles was raised in Phthia along his childhood companion Patroclus and received his education by the centaur Chiron. In the Iliad, he is presented as the commander of the mythical tribe of the Myrmidons.‚Äù</p>
</blockquote>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">resp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.text_generation(wiki_prompt.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(sentence<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>sentence))</span>
<span id="cb4-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(resp)</span></code></pre></div>
<pre><code>{
"good": [
"A description of a mythological figure's background and characteristics",
"A summary of a legendary hero's life and exploits",
"A passage about a character from ancient Greek literature",
"A biographical sketch of a famous warrior from mythology",
"A description of a central character in a famous epic poem"
],
"bad": [
"A description of a real person's life",
"A summary of a historical event",
"A passage about a character from a novel",
"A biographical sketch of a king",
"A</code></pre>
<p>We can see that we have roughly what‚Äôs requests in the prompt but let‚Äôs try and load this as JSON:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> json</span>
<span id="cb6-2"></span>
<span id="cb6-3">json.loads(resp)</span></code></pre></div>
<pre><code>---------------------------------------------------------------------------

JSONDecodeError                           Traceback (most recent call last)

Cell In[82], line 3
      1 import json
----&gt; 3 json.loads(resp)


File ~/.pyenv/versions/3.11.1/lib/python3.11/json/__init__.py:346, in loads(s, cls, object_hook, parse_float, parse_int, parse_constant, object_pairs_hook, **kw)
    341     s = s.decode(detect_encoding(s), 'surrogatepass')
    343 if (cls is None and object_hook is None and
    344         parse_int is None and parse_float is None and
    345         parse_constant is None and object_pairs_hook is None and not kw):
--&gt; 346     return _default_decoder.decode(s)
    347 if cls is None:
    348     cls = JSONDecoder


File ~/.pyenv/versions/3.11.1/lib/python3.11/json/decoder.py:337, in JSONDecoder.decode(self, s, _w)
    332 def decode(self, s, _w=WHITESPACE.match):
    333     """Return the Python representation of ``s`` (a ``str`` instance
    334     containing a JSON document).
    335
    336     """
--&gt; 337     obj, end = self.raw_decode(s, idx=_w(s, 0).end())
    338     end = _w(s, end).end()
    339     if end != len(s):


File ~/.pyenv/versions/3.11.1/lib/python3.11/json/decoder.py:353, in JSONDecoder.raw_decode(self, s, idx)
    344 """Decode a JSON document from ``s`` (a ``str`` beginning with
    345 a JSON document) and return a 2-tuple of the Python
    346 representation and the index in ``s`` where the document ended.
   (...)
    350
    351 """
    352 try:
--&gt; 353     obj, end = self.scan_once(s, idx)
    354 except StopIteration as err:
    355     raise JSONDecodeError("Expecting value", s, err.value) from None


JSONDecodeError: Unterminated string starting at: line 14 column 1 (char 489)</code></pre>
</section>
</section>
<section id="structured-generation" class="level2">
<h2 class="anchored" data-anchor-id="structured-generation">Structured Generation</h2>
<p>One way we could help the model generate valid JSON is to increase the number of tokens. However, we can also use another approach, Structured Text Generation. This can be used to constrain the model‚Äôs output to a more specific format.</p>
<p>We can use Structured Text Generation via Inference API models which are hosted using <a href="https://huggingface.co/docs/text-generation-inference/index">Text Generation Inference</a>. We won‚Äôt discuss how this works under the hood in this post (see https://huggingface.co/docs/text-generation-inference/conceptual/guidance for a nice guide on this). We‚Äôll instead focus on how we can use this to improve the results we‚Äôre getting from our open LLM.</p>
<p>When doing structured text generation we use something known as a ‚Äúgrammar‚Äù to specify what we want our output to look like. There are various ways of creating these but one way is to use a <a href="https://docs.pydantic.dev/latest/">Pydantic</a> model. <a href="https://docs.pydantic.dev/latest/">Pydantic</a> is a very heavily used data validation library for Python which can be used to validate data fits a certain format. This library was originally designed more for validating data coming via APIs etc but can also be very useful in the context of LLMs.</p>
<p>A simple way to define our data is to create a model called <code>Sentences</code> and specify that we want two attributes, <code>good</code> and <code>bad</code>. Each attribute should be a list of strings. You‚Äôll notice that in this example, these are specified via standard Python types.</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pydantic <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> BaseModel</span>
<span id="cb8-2"></span>
<span id="cb8-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Sentences(BaseModel):</span>
<span id="cb8-4">    good: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>]</span>
<span id="cb8-5">    bad: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>]</span></code></pre></div>
<p>To use this model via the <code>huggingface_hub</code> library we need to pass it as a JSON Schema. Let‚Äôs see what the schema for this model looks like:</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">schema <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Sentences.model_json_schema()</span>
<span id="cb9-2">schema</span></code></pre></div>
<pre><code>{'properties': {'good': {'items': {'type': 'string'},
   'title': 'Good',
   'type': 'array'},
  'bad': {'items': {'type': 'string'}, 'title': 'Bad', 'type': 'array'}},
 'required': ['good', 'bad'],
 'title': 'Sentences',
 'type': 'object'}</code></pre>
<p>We can pass this schema to the <code>text_generation</code> method for our client.</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">resp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.text_generation(</span>
<span id="cb11-2">    wiki_prompt.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(sentence<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>sentence),</span>
<span id="cb11-3">    grammar<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"json"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"value"</span>: Sentences.model_json_schema()},</span>
<span id="cb11-4">    max_new_tokens<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2000</span>,</span>
<span id="cb11-5">)</span></code></pre></div>
<p>We can see that we can now load our response into a valid JSON object</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">json.loads(resp)</span></code></pre></div>
<pre><code>{'bad': ["Achilles' biography",
  'A description of a person',
  'A passage about a book',
  'A story about a king',
  'A summary of a myth'],
 'good': ["A description of a mythological figure's background and character in ancient Greek literature",
  'A characterization of a legendary warrior in Greek mythology',
  'A summary of the early life and education of a hero in ancient Greek mythology',
  'A description of a central character in a famous epic poem',
  "A portrayal of a mythological hero's family and upbringing"]}</code></pre>
<section id="more-control" class="level3">
<h3 class="anchored" data-anchor-id="more-control">More control</h3>
<p>The focus here isn‚Äôt to dig into structured generation in great detail but you can add more control to your generations. For example, we might think that the <code>bad</code> examples generated above are too short. We can use <code>StringConstraints</code> to specify a minimum length for these strings.</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pydantic.types <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Annotated, StringConstraints</span>
<span id="cb14-2"></span>
<span id="cb14-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Sentences(BaseModel):</span>
<span id="cb14-4">    good: Annotated[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>], StringConstraints(min_length<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)]</span>
<span id="cb14-5">    bad: Annotated[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>], StringConstraints(min_length<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)]</span></code></pre></div>
<p>Finally, we could also specify how many generations we want. The original prompt specified a max of five examples for good and bad. We can add this constraint to our model.</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pydantic.types <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Annotated, StringConstraints</span>
<span id="cb15-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pydantic <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Field</span>
<span id="cb15-3"></span>
<span id="cb15-4"></span>
<span id="cb15-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Sentences(BaseModel):</span>
<span id="cb15-6">    good: Annotated[</span>
<span id="cb15-7">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>],</span>
<span id="cb15-8">        Field(</span>
<span id="cb15-9">            max_items<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,</span>
<span id="cb15-10">            item_type<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>StringConstraints(</span>
<span id="cb15-11">                min_length<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>,</span>
<span id="cb15-12">            ),</span>
<span id="cb15-13">        ),</span>
<span id="cb15-14">    ]</span>
<span id="cb15-15">    bad: Annotated[</span>
<span id="cb15-16">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>],</span>
<span id="cb15-17">        Field(</span>
<span id="cb15-18">            max_items<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,</span>
<span id="cb15-19">            item_type<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>StringConstraints(</span>
<span id="cb15-20">                min_length<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>,</span>
<span id="cb15-21">            ),</span>
<span id="cb15-22">        ),</span>
<span id="cb15-23">    ]</span></code></pre></div>
</section>
</section>
<section id="abstract-descriptions" class="level2">
<h2 class="anchored" data-anchor-id="abstract-descriptions">Abstract descriptions</h2>
<p>One extra step the authors of the paper take is to use the descriptions generated by the first prompt along with a second prompt focused on generating a more abstract representation of the sentence. We‚Äôll quickly see one example of what this looks like using one of our examples:</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">prompt_abstract <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Sentence: in spite of excellent pediatric health care , several educational problems could be noted in this tertiary pediatric center .</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Description: Despite having advanced healthcare resources, certain deficiencies in education were identified at a medical center that serves children.</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">A very abstract description: The provision of care at a specialized medical center was not optimal in one particular area, despite the presence of advanced resources.</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Sentence: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{sentence}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Description: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{description}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">A very abstract description:"</span></span></code></pre></div>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> generate_abstract_description(sentence, description):</span>
<span id="cb17-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> client.text_generation(</span>
<span id="cb17-3">        prompt_abstract.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(sentence<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>sentence, description<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>description),</span>
<span id="cb17-4">    )</span></code></pre></div>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">description <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>json.loads(resp).get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'good'</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span></code></pre></div>
<p>Our original sentence and description look like this</p>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Sentence: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>sentence<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">Description: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>description<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<pre><code>Sentence: In Greek mythology, Achilles ( ) or Achilleus () was a hero of the Trojan War who was known as being the greatest of all the Greek warriors. A central character in Homer's Iliad, he was the son of the Nereid Thetis and Peleus, king of Phthia and famous Argonaut. Achilles was raised in Phthia along his childhood companion Patroclus and received his education by the centaur Chiron. In the Iliad, he is presented as the commander of the mythical tribe of the Myrmidons.
Description: A characterization of a legendary hero in a famous epic poem</code></pre>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Abstract version: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>generate_abstract_description(sentence, description)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<pre><code>Abstract version:  A figure from ancient mythology is described in terms of their family, upbringing, and role in a famous story.</code></pre>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>Whilst there would still be some details to take care of if you want to scale up the generation of this kind of data, the above example hopefully shows how an open LLM can be used to generate more tailored data for training similarity models. Whilst the prompts here are borrowed from the paper, they could, of course, be adapted to focus on generating other kinds of similarity data.</p>


</section>

 ]]></description>
  <category>data</category>
  <category>synthetic-data</category>
  <guid>https://danielvanstrien.xyz/posts/plain-text/synthetic-data-generation/2024-05-03-synethic-data-1.html</guid>
  <pubDate>Thu, 23 May 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Synthetic dataset generation techniques: Self-Instruct</title>
  <link>https://danielvanstrien.xyz/posts/plain-text/2024-05-15-self-instruct.html</link>
  <description><![CDATA[ 




<p><em>This post is part of a series on synthetic data generation techniques. You may also want to check out <a href="https://github.com/davanstrien/awesome-synthetic-datasets">Awesome Synthetic (text) datasets</a>, where I will be collecting these posts.</em></p>
<p>For training an LLM to be better at following instructions or functioning as a chat model, you usually want a dataset with some combination of instructions and responses. Since creating this data by hand can be very time-consuming, more people are using LLMs to generate this data.</p>
<p>In its simplest form, you could create synthetic instruction following datasets using an LLM to generate responses to handwritten prompts/instructions. However, for many applications, there are a considerable number of prompts you may want to have in your final datasets. Creating all this data by hand will be challenging while ensuring its diversity. There are various ways in which you can try to remove this bottleneck.</p>
<p>In this blog post, I‚Äôll discuss the technique outlined in the paper <a href="https://huggingface.co/papers/2212.10560">SELF-INSTRUCT: Aligning Language Models with Self-Generated Instructions</a>, which, as the paper‚Äôs title suggests, aims to overcome the need to generate instructions by hand.</p>
<blockquote class="blockquote">
<p>Self-Instruct is a framework that helps language models improve their ability to follow natural language instructions. It does this by using the model‚Äôs own generations to create a large collection of instructional data. With Self-Instruct, it is possible to improve the instruction-following capabilities of language models without relying on extensive manual annotation. <a href="https://github.com/yizhongw/self-instruct?tab=readme-ov-file#introduction">source</a></p>
</blockquote>
<p>The paper outlines a pipeline that bootstraps from an initial seed dataset of instructions to a larger dataset of synthetically generated instructions. <img src="https://github.com/yizhongw/self-instruct/raw/main/docs/pipeline.JPG" class="img-fluid" alt="Pipeline Diagram"></p>
<p>The authors include steps for generating instructions and a filtering step to clean up the data in the paper. Since our goal is to focus on the core technique of a particular paper, we‚Äôll focus only on the instruction generation part. This step can also be combined with other approaches to data filtering that have been introduced since this paper was published (or your own custom filters).</p>
<section id="instruction-generation" class="level2">
<h2 class="anchored" data-anchor-id="instruction-generation">Instruction Generation</h2>
<p>Returning to our original challenge: how do we generate instructions without writing them all by hand? As you can see in the diagram above, the steps involve sampling from the original seeds, filtering the seed tasks to see if they are classification tasks or not, and then generating the new instructions. After the new instructions are generated, they are filtered and added to the task pool. In this way, you can keep creating new instructions from your initial seed tasks and growing the seed task pool. Using the data filtering steps aims to ensure you still have diversity in the prompts and avoid adding very repetitive instructions to your dataset.</p>
<section id="what-does-this-look-like-in-practice" class="level3">
<h3 class="anchored" data-anchor-id="what-does-this-look-like-in-practice">What does this look like in practice?</h3>
<p>Let‚Äôs take a look at an example from the 175 initial seeds task dataset:</p>
<pre><code>{"id": "seed_task_0",
"name": "breakfast_suggestion",
"instruction": "Is there anything I can eat for a breakfast that doesn't include eggs, yet includes protein, and has roughly 700-1000 calories?",
"instances": [{"input": "", "output": "Yes, you can have 1 oatmeal banana protein shake and 4 strips of bacon. The oatmeal banana protein shake may contain 1/2 cup oatmeal, 60 grams whey protein powder, 1/2 medium banana, 1tbsp flaxseed oil and 1/2 cup watter, totalling about 550 calories. The 4 strips of bacon contains about 200 calories."}],
"is_classification": false}</code></pre>
<p>As you can see, this row contains fairly standard instructions, such as ‚ÄúIs there anything‚Ä¶‚Äù, some responses (i.e., the instances field), and a label indicating if it‚Äôs a classification task. The paper outlines two main approaches to generating new instructions from this data. If an instruction is a classification task, one prompting approach is used; if it‚Äôs a standard generation task, another prompt is used. Let‚Äôs start with how the extra nonclassification task instructions prompt looks:</p>
<pre><code>&gt; Come up with a series of tasks:
&gt;
&gt; Task 1: {instruction for existing task 1}
&gt; Task 2: {instruction for existing task 2}
&gt; Task 3: {instruction for existing task 3}
&gt; Task 4: {instruction for existing task 4}
&gt; Task 5: {instruction for existing task 5}
&gt; Task 6: {instruction for existing task 6}
&gt; Task 7: {instruction for existing task 7}
&gt; Task 8: {instruction for existing task 8}
&gt; Task 9:</code></pre>
<p>As you can see, the prompt gives the llm some examples of tasks and encourages the model to generate new instructions. A crucial detail to note is in the original paper; the authors used GPT3 rather than an instruction-tuned/chat model. Since this is not an instruction-tuned model, a prompt that gives a few examples in a structured format can often be better for guiding the model toward a useful set of generations.</p>
<p>We can see what this process looks like in practice (using <code>huggingface_hub</code> and the BigScience Bloom model in place of the GPT-3):</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> huggingface_hub <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> InferenceClient</span>
<span id="cb3-2"></span>
<span id="cb3-3">client <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> InferenceClient(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bigscience/bloom'</span>)</span>
<span id="cb3-4"></span>
<span id="cb3-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> encode_prompt(prompt_instructions, classification<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>):</span>
<span id="cb3-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Encode multiple prompt instructions into a single string."""</span></span>
<span id="cb3-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> classification:</span>
<span id="cb3-8">        prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Come up with a series of classification tasks. Try to specify the possible output labels when possible.</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb3-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb3-10">        prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Come up with a series of tasks:</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb3-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> idx, instruction <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(prompt_instructions):</span>
<span id="cb3-12">        instruction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> re.sub(<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"\s+"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" "</span>, instruction).strip().rstrip(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">":"</span>)</span>
<span id="cb3-13">        prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>idx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">. </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>instruction<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb3-14">    prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(prompt_instructions) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">."</span></span>
<span id="cb3-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> prompt</span>
<span id="cb3-16"></span>
<span id="cb3-17">prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> encode_prompt(dataset[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'instruction'</span>]) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#</span></span></code></pre></div>
<p>For a non-classification task, this produces a prompt which looks like this:</p>
<pre><code>Come up with a series of tasks:
1. Is there anything I can eat for a breakfast that doesn't include eggs, yet includes protein, and has roughly 700-1000 calories?
2. What is the relation between the given pairs?
3. Generate a one-sentence description for each of the following people.
4. Describe a situation in which the given stereotype can harm you.
5. Generate an appropriate subjective title for the following email
6. How do you answer this question in a job interview?
7. Brainstorm a list of possible New Year's resolutions.
8. Explain the following idiom to me, and try to give me some examples.
9.</code></pre>
<p>We can then pass this prompt to an LLM.</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">client.text_generation(prompt, return_full_text<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, temperature<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.7</span>, max_new_tokens<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>)</span>
<span id="cb5-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;&gt;</span>  Think of a time when you were incredibly confident, <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> explain why.\n10. What <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> the difference between a real <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> normal friend?</span></code></pre></div>
<p>We can see the LLM responds with new instructions (we also get some extra text from the LLM). If we wanted to use this in practice, we could do more work to optimize the generation parameters (temperature, etc.).</p>
<p>The process and prompts for the text classification tasks are slightly different. To try to avoid the LLM just responding with the label token, they put the label first and then show the text that generated that label i.e.&nbsp;something like this:</p>
<pre><code>Instruction: Find out if the given text is positive about the company discussed.
Class Label: Positive
Input: Hugging Face is a wonderful platform for machine learning developers.</code></pre>
<p><strong>note</strong>you can find a notebook with these examples <a href="https://github.com/davanstrien/awesome-synthetic-datasets/blob/main/techniques/self_instruct/SelfInstruct.ipynb">here</a>.</p>
</section>
</section>
<section id="using-self-instruct" class="level2">
<h2 class="anchored" data-anchor-id="using-self-instruct">Using Self Instruct</h2>
<p>This paper has had&nbsp;a very big&nbsp;impact&nbsp;both&nbsp;in academic research (over 1,000 <a href="https://www.semanticscholar.org/paper/Self-Instruct%3A-Aligning-Language-Models-with-Wang-Kordi/e65b346d442e9962a4276dc1c1af2956d9d5f1eb#citing-papers">citations</a> and in&nbsp;the practical adoption of the method&nbsp;by the community (you can find some datasets citing the method <a href="https://huggingface.co/datasets?other=arxiv:2212.10560">here</a>.</p>
<p>There are several implementations of the Self Instruct method:</p>
<ul>
<li>Official GitHub repository: <a href="https://github.com/yizhongw/self-instruct">https://github.com/yizhongw/self-instruct</a></li>
<li><a href="https://distilabel.argilla.io/latest/reference/distilabel/steps/tasks/#distilabel.steps.tasks.SelfInstruct">Distilabel implementation</a></li>
<li><a href="https://github.com/jondurbin/airoboros">airoboros</a>: a modified version of self instruct.</li>
</ul>
<p>In practice, most uses of this approach have moved away from strictly following the prompts/approach outlined in the paper. Since the quality of open and closed-source instruction following models has significantly improved since his paper was published, it often makes more sense to use this to prompt a model to generate new instructions more directly.</p>
<p>While the exact approach outlined in the paper is often adapted, the paper is still helpful for better understanding how to approach synthetic data generation.</p>


</section>

 ]]></description>
  <category>data</category>
  <category>synthetic-data</category>
  <guid>https://danielvanstrien.xyz/posts/plain-text/2024-05-15-self-instruct.html</guid>
  <pubDate>Wed, 15 May 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Tracing Text Generation Inference calls</title>
  <dc:creator>Daniel van Strien</dc:creator>
  <link>https://danielvanstrien.xyz/posts/post-with-code/langfuse-tracing/Langfuse_+_HF_inference_endpoints.html</link>
  <description><![CDATA[ 




<div id="cell-1" class="cell" data-outputid="be7ed8e0-ad25-4d97-88a8-799f85591f8f" data-execution_count="2">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>pip install openai langfuse <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span>quiet</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Note: you may need to restart the kernel to use updated packages.</code></pre>
</div>
</div>
<pre><code>LANGFUSE_SECRET_KEY="sk-lf-..."
LANGFUSE_PUBLIC_KEY="pk-lf-..."
LANGFUSE_HOST="https://cloud.langfuse.com" # üá™üá∫ EU region</code></pre>
<div id="cell-3" class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> google.colab <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> userdata</span>
<span id="cb4-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span></code></pre></div>
</div>
<div id="cell-4" class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">os.environ[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"LANGFUSE_SECRET_KEY"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> userdata.get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'LANGFUSE_SECRET_KEY'</span>)</span>
<span id="cb5-2">os.environ[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"LANGFUSE_PUBLIC_KEY"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> userdata.get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'LANGFUSE_PUBLIC_KEY'</span>)</span>
<span id="cb5-3">HF_TOKEN <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> userdata.get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'HF_TOKEN'</span>)</span></code></pre></div>
</div>
<div id="cell-6" class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langfuse.decorators <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> observe</span>
<span id="cb6-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langfuse.openai <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> openai, OpenAI <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># OpenAI integration</span></span>
<span id="cb6-3"></span>
<span id="cb6-4"></span>
<span id="cb6-5">client <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> OpenAI(</span>
<span id="cb6-6">        base_url<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://api-inference.huggingface.co/models/mistralai/Mixtral-8x7B-Instruct-v0.1/v1"</span>,</span>
<span id="cb6-7">        api_key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>HF_TOKEN,</span>
<span id="cb6-8">    )</span></code></pre></div>
</div>
<div id="cell-7" class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">chat_completion <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.chat.completions.create(</span>
<span id="cb7-2">    model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tgi"</span>,</span>
<span id="cb7-3">    messages<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb7-4">        {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"What is Hugging Face?"</span>}</span>
<span id="cb7-5">    ],</span>
<span id="cb7-6">    stream<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb7-7">)</span></code></pre></div>
</div>
<div id="cell-8" class="cell" data-outputid="9ecdea98-6c15-464c-e9c8-1425188b63fd">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">chat_completion</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="14">
<pre><code>ChatCompletion(id='', choices=[Choice(finish_reason='length', index=0, logprobs=None, message=ChatCompletionMessage(content=" Hugging Face is a technology company that specializes in natural language processing (NLP) and artificial intelligence (AI). The company is best known for its development of Transformers, an open-source library that provides a wide range of pre-trained models for various NLP tasks, such as text classification, question answering, and language translation.\n\nHugging Face's Transformers library has gained widespread popularity among developers and researchers due to its ease of use, flexibility, and", role='assistant', function_call=None, tool_calls=None))], created=1712314124, model='text-generation-inference/Mixtral-8x7B-Instruct-v0.1-medusa', object='text_completion', system_fingerprint='1.4.3-sha-e6bb3ff', usage=CompletionUsage(completion_tokens=100, prompt_tokens=15, total_tokens=115))</code></pre>
</div>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://danielvanstrien.xyz/posts/post-with-code/langfuse-tracing/langfuse.png" class="img-fluid figure-img"></p>
<figcaption>Langfuse Trace</figcaption>
</figure>
</div>



 ]]></description>
  <guid>https://danielvanstrien.xyz/posts/post-with-code/langfuse-tracing/Langfuse_+_HF_inference_endpoints.html</guid>
  <pubDate>Fri, 05 Apr 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Extracting Insights from Model Cards Using Open Large Language Models</title>
  <link>https://danielvanstrien.xyz/posts/plain-text/2023-11-27-model-card.html</link>
  <description><![CDATA[ 




<p><a href="https://huggingface.co/docs/hub/model-cards">Model Cards</a> are a vital tool for documenting machine learning models. Model Cards are stored in <code>README.md</code> files on the Hugging Face Hub.</p>
<p>There are currently over 400,000 models openly shared on the Hugging Face Hub. How can we better understand what information is shared in these model cards?</p>
<p align="center">
<img src="https://cdn-uploads.huggingface.co/production/uploads/60107b385ac3e86b3ea4fc34/of0NdtzeiXm6JEN2HCCAE.png" alt="Wordcloud image with words like training, model, information. "><br> <em>Some of the concepts we‚Äôll see emerge from Model Card READMEs</em>
</p>
<section id="what-do-people-talk-about-in-their-model-readme.md" class="level2">
<h2 class="anchored" data-anchor-id="what-do-people-talk-about-in-their-model-readme.md">What do people talk about in their model README.md?</h2>
<p>Various organisations, groups and individuals develop models on the Hugging Face Hub; they cover a broad range of tasks and have a wide variety of audiences in mind. In turn, READMEs for models are also diverse. Some READMEs will follow a Model Card <a href="https://huggingface.co/docs/hub/model-card-annotated">template</a>, whilst others will use a very different format and focus on describing very different attributes of a model. How can we better understand what people discuss in model cards?</p>
</section>
<section id="can-we-extract-metadata-from-model-readmes" class="level2">
<h2 class="anchored" data-anchor-id="can-we-extract-metadata-from-model-readmes">Can we extract metadata from model READMEs?</h2>
<p>One of the things I want to understand better is what information people are talking about in their READMEs. Are they mostly talking about the training? How often do they mention the dataset? Do they discuss evaluations in detail? Partly, I want to understand this purely out of curiosity, but I am also interested in knowing if there are features that regularly appear in model cards that could potentially be extracted into more structured metadata for a model.</p>
<p>As an example of this kind of work, recently, the Hub added a metadata field for <code>base_model</code>. This metadata makes it easier to know the model used as a starting point for fine-tuning a new model. You can, for example, find models fine-tuned from <a href="https://huggingface.co/mistralai/Mistral-7B-v0.1">mistralai/Mistral-7B-v0.1</a> using this filter <a href="">https://huggingface.co/models?other=base_model:mistralai/Mistral-7B-v0.1</a>. However, for this to be possible, the <code>base_model</code> field has to be stored as metadata. In the run to adding this <code>base_model</code> filtering to the Hub via <a href="https://huggingface.co/librarian-bots">Librarian-Bots</a>, I made a bunch of automated pull requests adding this metadata using the information available in the model <code>README.md</code>.</p>
<p align="center">
<img src="https://cdn-uploads.huggingface.co/production/uploads/60107b385ac3e86b3ea4fc34/VHDwba0v0YB4IZCbMBtnh.png" alt="Screenshot of a Pull Request"><br> <em>An example of a pull request made to add metadata to a model</em>
</p>
<p>Potentially, other data of this kind could also be drawn out of model cards and exposed in a more structured way, which makes filtering and searching for models on the Hub easier.</p>
</section>
<section id="annotating-with-large-language-models" class="level2">
<h2 class="anchored" data-anchor-id="annotating-with-large-language-models">Annotating with Large Language Models?</h2>
<p>As part of my work as Hugging Face‚Äôs Machine Learning Librarian, I have created a <a href="https://huggingface.co/datasets/librarian-bots/model_cards_with_metadata">dataset</a> of model cards from the Hugging Face Hub. This dataset is updated daily. This dataset currently has over 400,000 rows. This makes analysing this data by hand difficult.</p>
<p>A recent <a href="https://www.numind.ai/blog/a-foundation-model-for-entity-recognition">blog post</a> from NuMind discusses their approach to creating a foundation model for Named Entity Recognition. As part of this work, they created a large dataset using an LLM to annotate concepts ‚Äî the term they use for entities ‚Äî in a large dataset derived from the Pile. They do this by prompting the model to annotate in an open-ended way, i.e.&nbsp;instead of prompting the model to label specific types of entities; they prompt the model to label ‚Äúas many entities, concepts, and ideas as possible in the input text.‚Äù</p>
<p>Whilst we sometimes want to have an LLM help annotate a specific type of entity, this open approach allows us to use an LLM to <em>help</em> us explore a dataset.</p>
<p>In the NuMind work, they used GPT-4. I wanted to use an open LLM instead. After some exploring I landed on <a href="https://huggingface.co/teknium/OpenHermes-2.5-Mistral-7B">teknium/OpenHermes-2.5-Mistral-7B</a>:</p>
<blockquote class="blockquote">
<p>OpenHermes 2.5 Mistral 7B is a state of the art Mistral Fine-tune, a continuation of OpenHermes 2 model, which trained on additional code datasets.</p>
</blockquote>
<p>I found that the model responded well to an adapted version of the original prompt used by NuMind, and since the model is a 7 Billion parameter model, it‚Äôs a little expensive to run both financially and in terms of environmental impact compared to other larger models which could also be used for this task.</p>
<p>I hosted the model on <a href="https://huggingface.co/inference-endpoints">Inference Endpoints</a> and ran inference using the <code>huggingface_hub</code> Python library. The code for getting an annotation looked roughly like this:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_annotations(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>):</span>
<span id="cb1-2">    message <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"""</span></span>
<span id="cb1-3"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">    The goal is to create a dataset for entity recognition.</span></span>
<span id="cb1-4"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">    Label as many entities, concepts, and ideas as possible in the input text.</span></span>
<span id="cb1-5"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">    Invent new entity types that may not exist in traditional NER Tasks such as more abstract concepts and ideas.</span></span>
<span id="cb1-6"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">    Make sure the entity concept is not part of speech but something more meaningful.</span></span>
<span id="cb1-7"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">    Avoid finding meaningless entities.</span></span>
<span id="cb1-8"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">    Output format (separate entities with new lines, everything, including description, and entity concept is written in English): entity from the text -|- entity concept -|- description of entity group/concept.</span></span>
<span id="cb1-9"></span>
<span id="cb1-10"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">    Example:</span></span>
<span id="cb1-11"></span>
<span id="cb1-12"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">    Input: "Fine-tuned XLSR-53 large model for speech recognition in English"</span></span>
<span id="cb1-13"></span>
<span id="cb1-14"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">    Output:</span></span>
<span id="cb1-15"></span>
<span id="cb1-16"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">    XLSR-53 -|- model -|- a large pre-trained language model specifically designed for speech recognition in English.</span></span>
<span id="cb1-17"></span>
<span id="cb1-18"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">    English -|- language -|- the language of the text and the model's target language.</span></span>
<span id="cb1-19"></span>
<span id="cb1-20"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">    Fine-tuned -|- model modification -|- the process of adapting the pre-trained model to a specific task, in this case, speech recognition.</span></span>
<span id="cb1-21"></span>
<span id="cb1-22"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">    Input: "</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb1-23"></span>
<span id="cb1-24"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">    Output:"""</span></span>
<span id="cb1-25">    messages <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb1-26">        {</span>
<span id="cb1-27">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"system"</span>,</span>
<span id="cb1-28">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"You are Hermes 2. A system designed to annotate textual data"</span>,</span>
<span id="cb1-29">        },</span>
<span id="cb1-30">        {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: message},</span>
<span id="cb1-31">    ]</span>
<span id="cb1-32">    gen_input <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tokenizer.apply_chat_template(messages, tokenize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb1-33"></span>
<span id="cb1-34">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> client.text_generation(</span>
<span id="cb1-35">        gen_input,</span>
<span id="cb1-36">        max_new_tokens<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">450</span>,</span>
<span id="cb1-37">        do_sample<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb1-38">        temperature<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.7</span>,</span>
<span id="cb1-39">        top_k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>,</span>
<span id="cb1-40">        top_p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.95</span>,</span>
<span id="cb1-41">    )</span></code></pre></div>
<p>Some examples of output I got from this:</p>
<pre><code>Input: Fine-tuned XLSR-53 large model for speech recognition in English

Output:

XLSR-53 -|- model -|- a large pre-trained language model specifically designed for speech recognition in English.

English -|- language -|- the language of the text and the model's target language.

Fine-tuned -|- model modification -|- the process of adapting the pre-trained model to a specific task, in this case, speech recognition.</code></pre>
<p>As you can see, the model did a pretty good job of labelling concepts. Let‚Äôs take a deeper dive into the results.</p>
</section>
<section id="what-concepts-did-we-find-in-model-cards" class="level2">
<h2 class="anchored" data-anchor-id="what-concepts-did-we-find-in-model-cards">What concepts did we find in Model Cards?</h2>
<p>The dataset we‚Äôve produced via this approach contains annotations for the original entity/concept, i.e.&nbsp;the word that the model annotated, a ‚Äúcategory‚Äù, which is the type of that concept (as labelled by the model), as well as a description produced by the LLM about that category.</p>
<p>To start, here is some high-level information about our dataset:</p>
<ul>
<li>146,800 total annotations, i.e.&nbsp;concepts</li>
<li>46,240 unique subjects</li>
<li>16,581 unique categories</li>
</ul>
<p>We can see the number of unique subjects and even unique subjects and categories. Whilst this wouldn‚Äôt be desirable if we had a fixed set of labels we wanted to annotate, for this more open-ended exploration, this is less of an issue and more of a challenge for us in how best to understand this data!</p>
<section id="the-most-frequently-appearing-subjects" class="level3">
<h3 class="anchored" data-anchor-id="the-most-frequently-appearing-subjects">The most frequently appearing subjects</h3>
<p>To start with let‚Äôs take a look at the top 20 most frequently appearing subjects in our model cards:</p>
<table class="caption-top table">
<thead>
<tr class="header">
<th>subject</th>
<th>proportion (%)</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Training</td>
<td>1.00272</td>
</tr>
<tr class="even">
<td>Entry</td>
<td>0.807221</td>
</tr>
<tr class="odd">
<td>More</td>
<td>0.651226</td>
</tr>
<tr class="even">
<td>Model</td>
<td>0.612398</td>
</tr>
<tr class="odd">
<td>model</td>
<td>0.54564</td>
</tr>
<tr class="even">
<td>information</td>
<td>0.504087</td>
</tr>
<tr class="odd">
<td>needed</td>
<td>0.501362</td>
</tr>
<tr class="even">
<td>Limitations</td>
<td>0.472071</td>
</tr>
<tr class="odd">
<td>More Information Needed</td>
<td>0.433243</td>
</tr>
<tr class="even">
<td>learning_rate</td>
<td>0.398501</td>
</tr>
<tr class="odd">
<td>Fine-tuned</td>
<td>0.387602</td>
</tr>
<tr class="even">
<td>Transformers</td>
<td>0.378747</td>
</tr>
<tr class="odd">
<td>Tokenizers</td>
<td>0.376703</td>
</tr>
<tr class="even">
<td>Intended uses</td>
<td>0.370572</td>
</tr>
<tr class="odd">
<td>hyperparameters</td>
<td>0.361717</td>
</tr>
<tr class="even">
<td>Evaluation</td>
<td>0.360354</td>
</tr>
<tr class="odd">
<td>Training procedure</td>
<td>0.358992</td>
</tr>
<tr class="even">
<td>Versions</td>
<td>0.352861</td>
</tr>
<tr class="odd">
<td>Adam</td>
<td>0.34673</td>
</tr>
<tr class="even">
<td>Hyperparameters</td>
<td>0.343324</td>
</tr>
</tbody>
</table>
<p>We may see some of these terms like ‚ÄúMore‚Äù, ‚Äúinformation‚Äù, ‚Äúneeded‚Äù are artefacts from placeholder text put into the model card templates. It‚Äôs reassuring to see ‚ÄúEvaluation‚Äù and ‚ÄúIntended uses‚Äù appearing this frequently. Since the ‚Äúsubjects‚Äù are quite diverse, let‚Äôs also take a look at the 20 most common categories:</p>
<table class="caption-top table">
<thead>
<tr class="header">
<th>category</th>
<th>proportion</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>model</td>
<td>3.97752</td>
</tr>
<tr class="even">
<td>model modification</td>
<td>2.29837</td>
</tr>
<tr class="odd">
<td>numerical value</td>
<td>2.01226</td>
</tr>
<tr class="even">
<td>action</td>
<td>1.68869</td>
</tr>
<tr class="odd">
<td>dataset</td>
<td>1.53951</td>
</tr>
<tr class="even">
<td>metric</td>
<td>1.25409</td>
</tr>
<tr class="odd">
<td>process</td>
<td>1.23229</td>
</tr>
<tr class="even">
<td>software</td>
<td>1.22684</td>
</tr>
<tr class="odd">
<td>entity</td>
<td>1.15736</td>
</tr>
<tr class="even">
<td>software version</td>
<td>1.14237</td>
</tr>
<tr class="odd">
<td>concept</td>
<td>1.09741</td>
</tr>
<tr class="even">
<td>data</td>
<td>0.936649</td>
</tr>
<tr class="odd">
<td>data type</td>
<td>0.867166</td>
</tr>
<tr class="even">
<td>person</td>
<td>0.787466</td>
</tr>
<tr class="odd">
<td>quantity</td>
<td>0.773842</td>
</tr>
<tr class="even">
<td>organization</td>
<td>0.730926</td>
</tr>
<tr class="odd">
<td>language</td>
<td>0.729564</td>
</tr>
<tr class="even">
<td>library</td>
<td>0.647139</td>
</tr>
<tr class="odd">
<td>numeric value</td>
<td>0.626022</td>
</tr>
<tr class="even">
<td>version</td>
<td>0.613079</td>
</tr>
</tbody>
</table>
<p>We would expect to see many of these categories, i.e.&nbsp;‚Äòmodel‚Äô and ‚Äòmodel modification‚Äô, ‚Äònumerical value‚Äô. Some of these categories are a little more abstract, i.e.&nbsp;‚Äòaction‚Äô. Let‚Äôs look at the <code>description</code> field for some of these:</p>
<pre><code>['the process of adding new software to a system.',
 'the action of preserving or retaining something.',
 'an invitation to interact with the content, usually by clicking on a link or button.',
 'the action of visiting or viewing the webpage.',
 'the interaction between the user and the software.']</code></pre>
<p>and at the actual ‚Äúsubjects‚Äù where this has been applied</p>
<pre><code>['install', 'Kept', 'click', 'accessed', 'experience']</code></pre>
<p>We can also view these categories as a wordcloud (the subject wordcloud is at the start of this post) <img src="https://cdn-uploads.huggingface.co/production/uploads/60107b385ac3e86b3ea4fc34/Pf7-6Kx3O_O13rZL03HgF.png" class="img-fluid" alt="image/png"></p>
</section>
</section>
<section id="what-can-we-extract" class="level2">
<h2 class="anchored" data-anchor-id="what-can-we-extract">What can we extract?</h2>
<p>Coming back to one of the motivations of this work, trying to find ‚Äòconcepts‚Äô in model cards that could be extracted as metadata, what might we consider interesting to extract? From the categories, we can see datasets appear frequently. While I have already done some work to extract those, there is more to be done on extracting all dataset mentions from model cards.</p>
<p>Whilst likely more challenging, we can see that the ‚Äòmetric‚Äô category appears pretty often. Let‚Äôs filter the dataset to examples where the category has been labelled ‚Äòmetric‚Äô and take the top 30 most frequent examples.</p>
<table class="caption-top table">
<thead>
<tr class="header">
<th style="text-align: left;">subject</th>
<th style="text-align: right;">proportion</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">Validation Loss</td>
<td style="text-align: right;">11.6212</td>
</tr>
<tr class="even">
<td style="text-align: left;">Training Loss</td>
<td style="text-align: right;">7.63271</td>
</tr>
<tr class="odd">
<td style="text-align: left;">Accuracy</td>
<td style="text-align: right;">6.97274</td>
</tr>
<tr class="even">
<td style="text-align: left;">Loss</td>
<td style="text-align: right;">6.74319</td>
</tr>
<tr class="odd">
<td style="text-align: left;">f1</td>
<td style="text-align: right;">5.39455</td>
</tr>
<tr class="even">
<td style="text-align: left;">accuracy</td>
<td style="text-align: right;">3.18508</td>
</tr>
<tr class="odd">
<td style="text-align: left;">results</td>
<td style="text-align: right;">2.38164</td>
</tr>
<tr class="even">
<td style="text-align: left;">recall</td>
<td style="text-align: right;">2.066</td>
</tr>
<tr class="odd">
<td style="text-align: left;">Recall</td>
<td style="text-align: right;">2.066</td>
</tr>
<tr class="even">
<td style="text-align: left;">precision</td>
<td style="text-align: right;">1.95122</td>
</tr>
<tr class="odd">
<td style="text-align: left;">Validation Accuracy</td>
<td style="text-align: right;">1.66428</td>
</tr>
<tr class="even">
<td style="text-align: left;">Results</td>
<td style="text-align: right;">1.5495</td>
</tr>
<tr class="odd">
<td style="text-align: left;">‚Äòf1‚Äô</td>
<td style="text-align: right;">1.46341</td>
</tr>
<tr class="even">
<td style="text-align: left;">‚Äòprecision‚Äô</td>
<td style="text-align: right;">1.43472</td>
</tr>
<tr class="odd">
<td style="text-align: left;">‚Äòrecall‚Äô</td>
<td style="text-align: right;">1.43472</td>
</tr>
<tr class="even">
<td style="text-align: left;">Train Loss</td>
<td style="text-align: right;">1.34864</td>
</tr>
<tr class="odd">
<td style="text-align: left;">training_precision</td>
<td style="text-align: right;">1.34864</td>
</tr>
<tr class="even">
<td style="text-align: left;">Precision</td>
<td style="text-align: right;">1.29125</td>
</tr>
<tr class="odd">
<td style="text-align: left;">Rouge1</td>
<td style="text-align: right;">0.774749</td>
</tr>
<tr class="even">
<td style="text-align: left;">‚Äúaccuracy‚Äù</td>
<td style="text-align: right;">0.774749</td>
</tr>
<tr class="odd">
<td style="text-align: left;">Validation</td>
<td style="text-align: right;">0.659971</td>
</tr>
<tr class="even">
<td style="text-align: left;">Performance</td>
<td style="text-align: right;">0.631277</td>
</tr>
<tr class="odd">
<td style="text-align: left;">Rouge2</td>
<td style="text-align: right;">0.573888</td>
</tr>
<tr class="even">
<td style="text-align: left;">Train Accuracy</td>
<td style="text-align: right;">0.573888</td>
</tr>
<tr class="odd">
<td style="text-align: left;">F1</td>
<td style="text-align: right;">0.516499</td>
</tr>
<tr class="even">
<td style="text-align: left;">Bleu</td>
<td style="text-align: right;">0.487805</td>
</tr>
<tr class="odd">
<td style="text-align: left;">Iou</td>
<td style="text-align: right;">0.45911</td>
</tr>
<tr class="even">
<td style="text-align: left;">num_epochs</td>
<td style="text-align: right;">0.45911</td>
</tr>
<tr class="odd">
<td style="text-align: left;">Micro F1 score</td>
<td style="text-align: right;">0.373027</td>
</tr>
<tr class="even">
<td style="text-align: left;">Matthews Correlation</td>
<td style="text-align: right;">0.344333</td>
</tr>
</tbody>
</table>
<p>While the results here are a little noisy, with a bit of work, we can potentially begin to think about how to extract mentions of metrics from model cards and merge duplicated metrics that have been expressed differently. This sort of data could start to give us very interesting ‚Äòon-the-ground‚Äô insights into how people are evaluating their models.</p>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>If you want to play with the results yourself, you can find the full dataset here: <a href="https://huggingface.co/datasets/librarian-bots/model-card-sentences-annotated">librarian-bots/model-card-sentences-annotated</a>.</p>
<p>You may also want to check out the <a href="https://huggingface.co/docs/hub/model-card-guidebook">Model Card GuideBook</a></p>
<p>If you have other ideas about working with this kind of data, I‚Äôd love to hear from you! You can follow me on the <a href="https://huggingface.co/davanstrien">Hub</a> (you should also follow <a href="https://huggingface.co/librarian-bot">Librarian bot!</a>).</p>


</section>

 ]]></description>
  <category>Hugging Face</category>
  <guid>https://danielvanstrien.xyz/posts/plain-text/2023-11-27-model-card.html</guid>
  <pubDate>Mon, 27 Nov 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>How to load a Hugging Face dataset into Qdrant?</title>
  <dc:creator>Daniel van Strien</dc:creator>
  <link>https://danielvanstrien.xyz/posts/post-with-code/datasets-with-qdrant/2023-11-08-datasets_to_qdrant.html</link>
  <description><![CDATA[ 




<div id="cell-1" class="cell" data-outputid="a6cd4388-15c3-4259-f684-d0398e3d6d9c" data-execution_count="39">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>pip install datasets qdrant<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>client <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span>q</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
[notice] A new release of pip available: 22.3.1 -&gt; 23.3.1
[notice] To update, run: pip install --upgrade pip
Note: you may need to restart the kernel to use updated packages.</code></pre>
</div>
</div>
<section id="loading-our-dataset" class="level2">
<h2 class="anchored" data-anchor-id="loading-our-dataset">Loading our dataset</h2>
<p>For this post we‚Äôll use the <a href="https://huggingface.co/datasets/Cohere/wikipedia-22-12-simple-embeddings">Cohere/wikipedia-22-12-simple-embeddings</a> dataset which has already had embeddings generated for it. This dataset was created by Cohere and creates embeddings for millions of Wikipedia articles. See this <a href="https://txt.cohere.com/embedding-archives-wikipedia/">post</a> for more details.</p>
<p>We‚Äôll use the <a href="https://huggingface.co/docs/datasets/index.html">Hugging Face datasets library</a> to load the dataset.</p>
<div id="cell-3" class="cell" data-outputid="076ed6bd-993c-4c69-8da0-42ffd58f1c62" data-execution_count="2">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> datasets <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> load_dataset</span>
<span id="cb3-2"></span>
<span id="cb3-3">dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> load_dataset(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Cohere/wikipedia-22-12-simple-embeddings"</span>, split<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"train"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"65e2f3d81ae24802b571d4da05859b4f","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"d9a4387393924e94b48caf9be271ab3e","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"e370b35057004af0b603b53bf525bd5d","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"bf4026c42e0c4667b962369f5ca871a3","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"730bb61ab2794bd59db3ade71462aa64","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"644e1e53113348e297f49425f5792e98","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"98c7e6c85ef841dc8a9b9e1f0496d210","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"c077d4786b134470808f0a37b2301e45","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"4e51e5bf21664f0f962f57dcb8f731e0","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>/Users/davanstrien/Documents/daniel/blog/venv/lib/python3.10/site-packages/datasets/table.py:1421: FutureWarning: promote has been superseded by mode='default'.
  table = cls._concat_blocks(blocks, axis=0)</code></pre>
</div>
</div>
<p>Let‚Äôs take a quick look at the dataset.</p>
<div id="cell-5" class="cell" data-outputid="55153ba5-3e76-4bf0-a864-925cc00b012d" data-execution_count="3">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">dataset</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="3">
<pre><code>Dataset({
    features: ['id', 'title', 'text', 'url', 'wiki_id', 'views', 'paragraph_id', 'langs', 'emb'],
    num_rows: 485859
})</code></pre>
</div>
</div>
<p>We can see the dataset has a <code>emb</code> column which contains the embeddings for each article. Alongside this we see the <code>title</code> and <code>text</code> for the articles alongside some other metadata. Let‚Äôs also take a look at the features of the dataset.</p>
<p>Let‚Äôs also take a quick look at the features of the dataset. Hugging Face Dataset objects have a <code>features</code> attribute which contains the features of the dataset. We can see that the <code>emb</code> column is a <code>Sequence</code> of <code>float32</code> values. We also have some other columns with <code>string</code> values, <code>int32</code> and <code>float32</code> values.</p>
<div id="cell-7" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">dataset.features</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="6">
<pre><code>{'id': Value(dtype='int32', id=None),
 'title': Value(dtype='string', id=None),
 'text': Value(dtype='string', id=None),
 'url': Value(dtype='string', id=None),
 'wiki_id': Value(dtype='int32', id=None),
 'views': Value(dtype='float32', id=None),
 'paragraph_id': Value(dtype='int32', id=None),
 'langs': Value(dtype='int32', id=None),
 'emb': Sequence(feature=Value(dtype='float32', id=None), length=-1, id=None)}</code></pre>
</div>
</div>
<p>Qdrant has <a href="https://qdrant.tech/documentation/concepts/payload/">support</a> for a pretty varied range of types. All of these types in our dataset are supported by Qdrant so we don‚Äôt need to do any conversion.</p>
<section id="creating-a-qdrant-collection" class="level3">
<h3 class="anchored" data-anchor-id="creating-a-qdrant-collection">Creating a Qdrant collection</h3>
<p>We‚Äôll use the <a href="https://github.com/qdrant/qdrant-client">Qdrant Python client</a> for this post. This client is really nice since it allows you to create a local collection using pure Python i.e.&nbsp;no need to run a Qdrant server. This is great for testing and development. Once you‚Äôre ready to deploy your collection you can use the same client to connect to a remote Qdrant server.</p>
<div id="cell-10" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> qdrant_client <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> QdrantClient</span></code></pre></div>
</div>
<p>We first create a client, in this case using a local path for our DB.</p>
<div id="cell-12" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">client <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> QdrantClient(path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"db"</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Persists changes to disk</span></span></code></pre></div>
</div>
</section>
<section id="configuring-our-qdrant-collection" class="level3">
<h3 class="anchored" data-anchor-id="configuring-our-qdrant-collection">Configuring our Qdrant collection</h3>
<p>Qdrant is very flexible but we need to let Qdrant now a few things about our collection. These include the name, and a config for the vectors we want to store. This config includes the dimensionality of the vectors and the distance metric we want to use. Let‚Äôs first check out the dimensionality of our vectors.</p>
<div id="cell-14" class="cell" data-outputid="3887e08c-a035-4fd6-cdce-436d0f16634a" data-execution_count="10">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">vector_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(dataset[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'emb'</span>])</span></code></pre></div>
</div>
<p>We‚Äôll also store our collection in a variable so we can use it later.</p>
<div id="cell-16" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">collection_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cohere_wikipedia"</span></span></code></pre></div>
</div>
<div id="cell-17" class="cell" data-outputid="9b187f76-97ee-4685-ac67-2026f5c8dede" data-execution_count="14">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> qdrant_client.models <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Distance, VectorParams</span>
<span id="cb13-2"></span>
<span id="cb13-3">client.recreate_collection(</span>
<span id="cb13-4">    collection_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>collection_name,</span>
<span id="cb13-5">    vectors_config<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>VectorParams(size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>vector_size, distance<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>Distance.COSINE),</span>
<span id="cb13-6">)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="14">
<pre><code>True</code></pre>
</div>
</div>
</section>
</section>
<section id="adding-our-data-to-qdrant" class="level2">
<h2 class="anchored" data-anchor-id="adding-our-data-to-qdrant">Adding our data to Qdrant</h2>
<p><strong>Note</strong> this code can be heavily optimized but gives an idea of how easy adding data to Qdrant can be. For many datasets this naive approach will work fine.</p>
<p>The approach we‚Äôll take below is to loop through our dataset and yield each row as a <code>PointStruct</code>. This is a Qdrant object that contains the vector and any other data, referred to as the payload, that we want to store.</p>
<div id="cell-19" class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> qdrant_client.models <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> PointStruct</span></code></pre></div>
</div>
<div id="cell-20" class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> yield_rows(dataset):</span>
<span id="cb16-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> idx, row <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(dataset, start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb16-3">        vector <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"emb"</span>] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># grab the vector</span></span>
<span id="cb16-4">        payload <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {k: v <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> k, v <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> row.items() <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"emb"</span>} <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># grab the rest of the fields without the vector</span></span>
<span id="cb16-5">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">yield</span> PointStruct(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>idx, vector<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>vector, payload<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>payload)</span></code></pre></div>
</div>
<p>For this post we‚Äôll use a smallish subset of the dataset. We‚Äôll use the first 100_000 rows. Big enough to be interesting but small enough to play around with quickly.</p>
<div id="cell-22" class="cell" data-execution_count="22">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">sample <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dataset.select(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100_000</span>))</span></code></pre></div>
</div>
<p>We‚Äôll use the <code>toolz</code> libraries <code>partition_all</code> function to get batches from our yield_rows function. We‚Äôll use <code>tqdm</code> to show a progress bar.</p>
<div id="cell-24" class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> toolz <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> partition_all</span>
<span id="cb18-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> tqdm.auto <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tqdm</span></code></pre></div>
</div>
<div id="cell-25" class="cell" data-execution_count="23">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span>time</span>
<span id="cb19-2">bs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span>
<span id="cb19-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> batch <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> tqdm(partition_all(bs, yield_rows(sample)), total<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(sample) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> bs):</span>
<span id="cb19-4">    client.upsert(collection_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>collection_name, points<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(batch), wait<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"c4dd51c24caf4f92a394ece9ce360c25","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>CPU times: user 30.9 s, sys: 35.7 s, total: 1min 6s
Wall time: 1min 19s</code></pre>
</div>
</div>
<p>On my 2021 MacBook Pro with an M1 chip this takes about 90 seconds to run. As mentioned above this can be heavily optimized but this gives an idea of how easy it is to add data to Qdrant from a Hugging Face dataset.</p>
</section>
<section id="searching-our-qdrant-collection" class="level2">
<h2 class="anchored" data-anchor-id="searching-our-qdrant-collection">Searching our Qdrant collection</h2>
<p>What can we do with our Qdrant collection? We can use our embeddings to find similar wikipedia articles. Let‚Äôs see how we can do that.</p>
<p>First we‚Äôll use the <code>get_collection</code> method to see some information about our collection.</p>
<div id="cell-28" class="cell" data-execution_count="26">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rich <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span></span>
<span id="cb21-2"></span>
<span id="cb21-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(client.get_collection(collection_name))</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #800080; text-decoration-color: #800080; font-weight: bold">CollectionInfo</span><span style="font-weight: bold">(</span>
    <span style="color: #808000; text-decoration-color: #808000">status</span>=<span style="font-weight: bold">&lt;</span><span style="color: #ff00ff; text-decoration-color: #ff00ff; font-weight: bold">CollectionStatus.GREEN:</span><span style="color: #000000; text-decoration-color: #000000"> </span><span style="color: #008000; text-decoration-color: #008000">'green'</span><span style="color: #000000; text-decoration-color: #000000">&gt;,</span>
<span style="color: #000000; text-decoration-color: #000000">    </span><span style="color: #808000; text-decoration-color: #808000">optimizer_status</span><span style="color: #000000; text-decoration-color: #000000">=&lt;OptimizersStatusOneOf.OK: </span><span style="color: #008000; text-decoration-color: #008000">'ok'</span><span style="color: #000000; text-decoration-color: #000000">&gt;,</span>
<span style="color: #000000; text-decoration-color: #000000">    </span><span style="color: #808000; text-decoration-color: #808000">vectors_count</span><span style="color: #000000; text-decoration-color: #000000">=</span><span style="color: #008080; text-decoration-color: #008080; font-weight: bold">100000</span><span style="color: #000000; text-decoration-color: #000000">,</span>
<span style="color: #000000; text-decoration-color: #000000">    </span><span style="color: #808000; text-decoration-color: #808000">indexed_vectors_count</span><span style="color: #000000; text-decoration-color: #000000">=</span><span style="color: #008080; text-decoration-color: #008080; font-weight: bold">0</span><span style="color: #000000; text-decoration-color: #000000">,</span>
<span style="color: #000000; text-decoration-color: #000000">    </span><span style="color: #808000; text-decoration-color: #808000">points_count</span><span style="color: #000000; text-decoration-color: #000000">=</span><span style="color: #008080; text-decoration-color: #008080; font-weight: bold">100000</span><span style="color: #000000; text-decoration-color: #000000">,</span>
<span style="color: #000000; text-decoration-color: #000000">    </span><span style="color: #808000; text-decoration-color: #808000">segments_count</span><span style="color: #000000; text-decoration-color: #000000">=</span><span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span><span style="color: #000000; text-decoration-color: #000000">,</span>
<span style="color: #000000; text-decoration-color: #000000">    </span><span style="color: #808000; text-decoration-color: #808000">config</span><span style="color: #000000; text-decoration-color: #000000">=</span><span style="color: #800080; text-decoration-color: #800080; font-weight: bold">CollectionConfig</span><span style="color: #000000; text-decoration-color: #000000; font-weight: bold">(</span>
<span style="color: #000000; text-decoration-color: #000000">        </span><span style="color: #808000; text-decoration-color: #808000">params</span><span style="color: #000000; text-decoration-color: #000000">=</span><span style="color: #800080; text-decoration-color: #800080; font-weight: bold">CollectionParams</span><span style="color: #000000; text-decoration-color: #000000; font-weight: bold">(</span>
<span style="color: #000000; text-decoration-color: #000000">            </span><span style="color: #808000; text-decoration-color: #808000">vectors</span><span style="color: #000000; text-decoration-color: #000000">=</span><span style="color: #800080; text-decoration-color: #800080; font-weight: bold">VectorParams</span><span style="color: #000000; text-decoration-color: #000000; font-weight: bold">(</span>
<span style="color: #000000; text-decoration-color: #000000">                </span><span style="color: #808000; text-decoration-color: #808000">size</span><span style="color: #000000; text-decoration-color: #000000">=</span><span style="color: #008080; text-decoration-color: #008080; font-weight: bold">768</span><span style="color: #000000; text-decoration-color: #000000">,</span>
<span style="color: #000000; text-decoration-color: #000000">                </span><span style="color: #808000; text-decoration-color: #808000">distance</span><span style="color: #000000; text-decoration-color: #000000">=&lt;Distance.COSINE: </span><span style="color: #008000; text-decoration-color: #008000">'Cosine'</span><span style="font-weight: bold">&gt;</span>,
                <span style="color: #808000; text-decoration-color: #808000">hnsw_config</span>=<span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>,
                <span style="color: #808000; text-decoration-color: #808000">quantization_config</span>=<span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>,
                <span style="color: #808000; text-decoration-color: #808000">on_disk</span>=<span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>
            <span style="font-weight: bold">)</span>,
            <span style="color: #808000; text-decoration-color: #808000">shard_number</span>=<span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>,
            <span style="color: #808000; text-decoration-color: #808000">replication_factor</span>=<span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>,
            <span style="color: #808000; text-decoration-color: #808000">write_consistency_factor</span>=<span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>,
            <span style="color: #808000; text-decoration-color: #808000">read_fan_out_factor</span>=<span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>,
            <span style="color: #808000; text-decoration-color: #808000">on_disk_payload</span>=<span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>
        <span style="font-weight: bold">)</span>,
        <span style="color: #808000; text-decoration-color: #808000">hnsw_config</span>=<span style="color: #800080; text-decoration-color: #800080; font-weight: bold">HnswConfig</span><span style="font-weight: bold">(</span>
            <span style="color: #808000; text-decoration-color: #808000">m</span>=<span style="color: #008080; text-decoration-color: #008080; font-weight: bold">16</span>,
            <span style="color: #808000; text-decoration-color: #808000">ef_construct</span>=<span style="color: #008080; text-decoration-color: #008080; font-weight: bold">100</span>,
            <span style="color: #808000; text-decoration-color: #808000">full_scan_threshold</span>=<span style="color: #008080; text-decoration-color: #008080; font-weight: bold">10000</span>,
            <span style="color: #808000; text-decoration-color: #808000">max_indexing_threads</span>=<span style="color: #008080; text-decoration-color: #008080; font-weight: bold">0</span>,
            <span style="color: #808000; text-decoration-color: #808000">on_disk</span>=<span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>,
            <span style="color: #808000; text-decoration-color: #808000">payload_m</span>=<span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>
        <span style="font-weight: bold">)</span>,
        <span style="color: #808000; text-decoration-color: #808000">optimizer_config</span>=<span style="color: #800080; text-decoration-color: #800080; font-weight: bold">OptimizersConfig</span><span style="font-weight: bold">(</span>
            <span style="color: #808000; text-decoration-color: #808000">deleted_threshold</span>=<span style="color: #008080; text-decoration-color: #008080; font-weight: bold">0.2</span>,
            <span style="color: #808000; text-decoration-color: #808000">vacuum_min_vector_number</span>=<span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1000</span>,
            <span style="color: #808000; text-decoration-color: #808000">default_segment_number</span>=<span style="color: #008080; text-decoration-color: #008080; font-weight: bold">0</span>,
            <span style="color: #808000; text-decoration-color: #808000">max_segment_size</span>=<span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>,
            <span style="color: #808000; text-decoration-color: #808000">memmap_threshold</span>=<span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>,
            <span style="color: #808000; text-decoration-color: #808000">indexing_threshold</span>=<span style="color: #008080; text-decoration-color: #008080; font-weight: bold">20000</span>,
            <span style="color: #808000; text-decoration-color: #808000">flush_interval_sec</span>=<span style="color: #008080; text-decoration-color: #008080; font-weight: bold">5</span>,
            <span style="color: #808000; text-decoration-color: #808000">max_optimization_threads</span>=<span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span>
        <span style="font-weight: bold">)</span>,
        <span style="color: #808000; text-decoration-color: #808000">wal_config</span>=<span style="color: #800080; text-decoration-color: #800080; font-weight: bold">WalConfig</span><span style="font-weight: bold">(</span><span style="color: #808000; text-decoration-color: #808000">wal_capacity_mb</span>=<span style="color: #008080; text-decoration-color: #008080; font-weight: bold">32</span>, <span style="color: #808000; text-decoration-color: #808000">wal_segments_ahead</span>=<span style="color: #008080; text-decoration-color: #008080; font-weight: bold">0</span><span style="font-weight: bold">)</span>,
        <span style="color: #808000; text-decoration-color: #808000">quantization_config</span>=<span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>
    <span style="font-weight: bold">)</span>,
    <span style="color: #808000; text-decoration-color: #808000">payload_schema</span>=<span style="font-weight: bold">{}</span>
<span style="font-weight: bold">)</span>
</pre>
</div>
</div>
<p>We can see a bunch of information about our collection. Including the vector count, the dimensionality of the vectors and the distance metric we‚Äôre using. You‚Äôll see that there are plenty of knobs to turn here to optimize your collection but that‚Äôs for another post.</p>
<p>We can use the <code>scroll</code> method to get the first vector from our collection</p>
<div id="cell-30" class="cell" data-execution_count="29">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(client.scroll(collection_name,limit<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #800080; text-decoration-color: #800080; font-weight: bold">Record</span><span style="font-weight: bold">(</span>
    <span style="color: #808000; text-decoration-color: #808000">id</span>=<span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span>,
    <span style="color: #808000; text-decoration-color: #808000">payload</span>=<span style="font-weight: bold">{</span>
        <span style="color: #008000; text-decoration-color: #008000">'id'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">0</span>,
        <span style="color: #008000; text-decoration-color: #008000">'title'</span>: <span style="color: #008000; text-decoration-color: #008000">'24-hour clock'</span>,
        <span style="color: #008000; text-decoration-color: #008000">'text'</span>: <span style="color: #008000; text-decoration-color: #008000">'The 24-hour clock is a way of telling the time in which the day runs from midnight to midnight and</span>
<span style="color: #008000; text-decoration-color: #008000">is divided into 24 hours, numbered from 0 to 23. It does not use a.m. or p.m. This system is also referred to (only</span>
<span style="color: #008000; text-decoration-color: #008000">in the US and the English speaking parts of Canada) as military time or (only in the United Kingdom and now very </span>
<span style="color: #008000; text-decoration-color: #008000">rarely) as continental time. In some parts of the world, it is called railway time. Also, the international </span>
<span style="color: #008000; text-decoration-color: #008000">standard notation of time (ISO 8601) is based on this format.'</span>,
        <span style="color: #008000; text-decoration-color: #008000">'url'</span>: <span style="color: #008000; text-decoration-color: #008000">'https://simple.wikipedia.org/wiki?curid=9985'</span>,
        <span style="color: #008000; text-decoration-color: #008000">'wiki_id'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">9985</span>,
        <span style="color: #008000; text-decoration-color: #008000">'views'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">2450.62548828125</span>,
        <span style="color: #008000; text-decoration-color: #008000">'paragraph_id'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">0</span>,
        <span style="color: #008000; text-decoration-color: #008000">'langs'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">30</span>
    <span style="font-weight: bold">}</span>,
    <span style="color: #808000; text-decoration-color: #808000">vector</span>=<span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>
<span style="font-weight: bold">)</span>
</pre>
</div>
</div>
<p>We can also grab items from the payload for each point.</p>
<div id="cell-32" class="cell" data-execution_count="31">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(client.scroll(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cohere_wikipedia'</span>,limit<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].payload[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'text'</span>])</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace">The <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">24</span>-hour clock is a way of telling the time in which the day runs from midnight to midnight and is divided into 
<span style="color: #008080; text-decoration-color: #008080; font-weight: bold">24</span> hours, numbered from <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">0</span> to <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">23</span>. It does not use a.m. or p.m. This system is also referred to <span style="font-weight: bold">(</span>only in the US and 
the English speaking parts of Canada<span style="font-weight: bold">)</span> as military time or <span style="font-weight: bold">(</span>only in the United Kingdom and now very rarely<span style="font-weight: bold">)</span> as 
continental time. In some parts of the world, it is called railway time. Also, the international standard notation 
of time <span style="font-weight: bold">(</span>ISO <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">8601</span><span style="font-weight: bold">)</span> is based on this format.
</pre>
</div>
</div>
<p>We can see this article is about the 24-hour clock system. Let‚Äôs see what other pages are similar to this one. We can optionally get the vector for the query point.</p>
<div id="cell-34" class="cell" data-execution_count="32">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">vector <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.scroll(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cohere_wikipedia'</span>,limit<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,with_vectors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].vector</span></code></pre></div>
</div>
<p>We can use our vector as a query to find similar vectors in our collection. We‚Äôll use the <code>search</code> method to do this.</p>
<div id="cell-36" class="cell" data-execution_count="34">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">query_vector <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.scroll(collection_name, limit<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, with_vectors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].vector</span>
<span id="cb25-2">hits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.search(</span>
<span id="cb25-3">    collection_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>collection_name,</span>
<span id="cb25-4">    query_vector<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>query_vector,</span>
<span id="cb25-5">    limit<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Return 5 closest points</span></span>
<span id="cb25-6">)</span></code></pre></div>
</div>
<p>Let‚Äôs look at some of the results. We can see that the first result is the same article. The rest also seem to be about time/24 hour clock systems!</p>
<div id="cell-38" class="cell" data-execution_count="36">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> hit <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> hits:</span>
<span id="cb26-2">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>hit<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>payload[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'title'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> | </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>hit<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>payload[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'text'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb26-3">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"---"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #008080; text-decoration-color: #008080; font-weight: bold">24</span>-hour clock | The <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">24</span>-hour clock is a way of telling the time in which the day runs from midnight to midnight and 
is divided into <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">24</span> hours, numbered from <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">0</span> to <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">23</span>. It does not use a.m. or p.m. This system is also referred to <span style="font-weight: bold">(</span>only
in the US and the English speaking parts of Canada<span style="font-weight: bold">)</span> as military time or <span style="font-weight: bold">(</span>only in the United Kingdom and now very 
rarely<span style="font-weight: bold">)</span> as continental time. In some parts of the world, it is called railway time. Also, the international 
standard notation of time <span style="font-weight: bold">(</span>ISO <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">8601</span><span style="font-weight: bold">)</span> is based on this format.
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace">---
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #008080; text-decoration-color: #008080; font-weight: bold">24</span>-hour clock | However, the US military prefers not to say <span style="color: #00ff00; text-decoration-color: #00ff00; font-weight: bold">24:00</span> - they do not like to have two names for the same
thing, so they always say <span style="color: #008000; text-decoration-color: #008000">"23:59"</span>, which is one minute before midnight.
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace">---
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #008080; text-decoration-color: #008080; font-weight: bold">24</span>-hour clock | <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">24</span>-hour clock time is used in computers, military, public safety, and transport. In many Asian, 
European and Latin American countries people use it to write the time. Many European people use it in speaking.
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace">---
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #008080; text-decoration-color: #008080; font-weight: bold">24</span>-hour clock | In railway timetables <span style="color: #00ff00; text-decoration-color: #00ff00; font-weight: bold">24:00</span> means the <span style="color: #008000; text-decoration-color: #008000">"end"</span> of the day. For example, a train due to arrive at a 
station during the last minute of a day arrives at <span style="color: #00ff00; text-decoration-color: #00ff00; font-weight: bold">24:00</span>; but trains which depart during the first minute of the 
day go at <span style="color: #00ff00; text-decoration-color: #00ff00; font-weight: bold">00:00</span>.
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace">---
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #008080; text-decoration-color: #008080; font-weight: bold">24</span>-hour clock | A time in the <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">24</span>-hour clock is written in the form hours:minutes <span style="font-weight: bold">(</span>for example, <span style="color: #00ff00; text-decoration-color: #00ff00; font-weight: bold">01:23</span><span style="font-weight: bold">)</span>, or 
hours:minutes:seconds <span style="font-weight: bold">(</span><span style="color: #00ff00; text-decoration-color: #00ff00; font-weight: bold">01:23:45</span><span style="font-weight: bold">)</span>. Numbers under <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">10</span> have a zero in front <span style="font-weight: bold">(</span>called a leading zero<span style="font-weight: bold">)</span>; e.g. <span style="color: #00ff00; text-decoration-color: #00ff00; font-weight: bold">09:07</span>. Under 
the <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">24</span>-hour clock system, the day begins at midnight, <span style="color: #00ff00; text-decoration-color: #00ff00; font-weight: bold">00:00</span>, and the last minute of the day begins at <span style="color: #00ff00; text-decoration-color: #00ff00; font-weight: bold">23:59</span> and 
ends at <span style="color: #00ff00; text-decoration-color: #00ff00; font-weight: bold">24:00</span>, which is identical to <span style="color: #00ff00; text-decoration-color: #00ff00; font-weight: bold">00:00</span> of the following day. <span style="color: #00ff00; text-decoration-color: #00ff00; font-weight: bold">12:00</span> can only be mid-day. Midnight is called 
<span style="color: #00ff00; text-decoration-color: #00ff00; font-weight: bold">24:00</span> and is used to mean the end of the day and <span style="color: #00ff00; text-decoration-color: #00ff00; font-weight: bold">00:00</span> is used to mean the beginning of the day. For example, you 
would say <span style="color: #008000; text-decoration-color: #008000">"Tuesday at 24:00"</span> and <span style="color: #008000; text-decoration-color: #008000">"Wednesday at 00:00"</span> to mean exactly the same time.
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace">---
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #008080; text-decoration-color: #008080; font-weight: bold">12</span>-hour clock | The <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">12</span>-hour clock is a way of dividing the <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">24</span> hours of the day into two sections. The two halves 
are called ante meridiem <span style="font-weight: bold">(</span>a.m.<span style="font-weight: bold">)</span> and post meridiem <span style="font-weight: bold">(</span>p.m.<span style="font-weight: bold">)</span>.
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace">---
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #008080; text-decoration-color: #008080; font-weight: bold">12</span>-hour clock | Both names are from Latin, and numbered from <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">2</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">3</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">4</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">5</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">6</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">7</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">8</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">9</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">10</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">11</span> and <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">12</span>. Time from 
midnight to noon is a.m. and from noon to midnight p.m. The table at right shows how it relates to the <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">24</span>-hour 
clock.
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace">---
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace">Hour | An hour <span style="font-weight: bold">(</span>abbreviation: h or hr<span style="font-weight: bold">)</span> is a unit of measurement used to measure time. An hour is equal to <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">60</span> 
minutes. <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">24</span> hours are equal to one day. Unlike the second, the hour is not a base SI unit.
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace">---
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace">Midnight | The time period <span style="color: #008000; text-decoration-color: #008000">"00:00 - 00:01"</span> is midnight. On computer clocks, the day changes to the next day the 
<span style="color: #800080; text-decoration-color: #800080; font-weight: bold">minute</span><span style="font-weight: bold">(</span>s<span style="font-weight: bold">)</span> after midnight.
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace">---
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace">Chinese zodiac | In the old days, China and Japan used a <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">12</span>-hour system to tell the time of day and night <span style="font-weight: bold">(</span>unlike 
the <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">24</span> hour system used today<span style="font-weight: bold">)</span>. The <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">12</span> hour system divides the day of <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">24</span> hours into <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">12</span> hours, each of which has a 
sign of the zodiac:
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace">---
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace">Coordinated Universal Time | Note that UTC uses the <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">24</span>-hour clock. That means there is no <span style="color: #008000; text-decoration-color: #008000">'AM'</span> or <span style="color: #008000; text-decoration-color: #008000">'PM'</span>. For 
example, <span style="color: #00ff00; text-decoration-color: #00ff00; font-weight: bold">4:00</span>PM would be <span style="color: #00ff00; text-decoration-color: #00ff00; font-weight: bold">16:00</span> or <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1600</span>. UTC also does not use daylight savings time - that way the time stays 
consistent the entire year.
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace">---
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace">Midnight | In the world, midnight is the start of one day and the end of the last day. It's the dividing point 
between two days.
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace">---
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace">Noon | Noon is the time exactly halfway through the day <span style="font-weight: bold">(</span><span style="color: #008080; text-decoration-color: #008080; font-weight: bold">12.00</span>-<span style="color: #00ff00; text-decoration-color: #00ff00; font-weight: bold">12:00</span> in the <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">24</span>-hour clock and <span style="color: #00ff00; text-decoration-color: #00ff00; font-weight: bold">12:00</span> PM-<span style="color: #00ff00; text-decoration-color: #00ff00; font-weight: bold">12:00</span> PM in 
the <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">12</span>-hour clock<span style="font-weight: bold">)</span>. Midday also means noon, although this also means <span style="color: #008000; text-decoration-color: #008000">"around"</span> noon, or very early afternoon.
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace">---
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace">Coordinated Universal Time | The standard before was Greenwich Mean Time <span style="font-weight: bold">(</span>GMT<span style="font-weight: bold">)</span>. UTC and GMT are almost the same. In
fact, there is no practical difference which would be noticed by ordinary people.
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace">---
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace">Midnight | In the United States and Canada, digital clocks and computers usually show <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">12</span>&nbsp;a.m. right at midnight. 
However, people have to remember that any time is actually an instant. The <span style="color: #008000; text-decoration-color: #008000">"a.m."</span> shown on clock displays means the
<span style="color: #008080; text-decoration-color: #008080; font-weight: bold">12</span>-hour period after the instant of midnight. So when a clock says <span style="color: #008000; text-decoration-color: #008000">"12:00 a.m."</span>, midnight has already passed and a 
new day has started. In other words, <span style="color: #00ff00; text-decoration-color: #00ff00; font-weight: bold">11:59</span>&nbsp;p.m.&nbsp;shows until midnight; at the instant of midnight, it changes to 
<span style="color: #00ff00; text-decoration-color: #00ff00; font-weight: bold">12:00</span>. At the same time, the p.m. changes to a.m., but a.m. does not mean the instant of midnight which separates 
p.m. and a.m.
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace">---
</pre>
</div>
</div>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>This post showed how it‚Äôs possible to easily convert a Hugging Face dataset into a Qdrant collection. We then showed how we can use this collection to find similar articles.</p>
<p>There is a lot of scope for optimization here. For example, we could use a more efficient way to add data to Qdrant. We could also use a more efficient way to search our collection. It would be very cool to directly have a <code>from_hf_datasets</code> method in the Qdrant Python client that would do all of this for us and include some optimizations!</p>
<p>I hope this post has shown how easy it is to use Qdrant with Hugging Face datasets. If you have any questions or comments please let me know on <a href="https://twitter.com/vanstriendaniel">Twitter</a>.</p>


</section>

 ]]></description>
  <guid>https://danielvanstrien.xyz/posts/post-with-code/datasets-with-qdrant/2023-11-08-datasets_to_qdrant.html</guid>
  <pubDate>Wed, 08 Nov 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>How to do groupby for Hugging Face datasets</title>
  <dc:creator>Daniel van Strien</dc:creator>
  <link>https://danielvanstrien.xyz/posts/post-with-code/datasets-groupby/2023-09-18-datasets-groupby.html</link>
  <description><![CDATA[ 




<p>There is no native support for GroupBy in the Hugging Face <code>datasets</code> library but since there is a <code>polars</code> integration, we can use that to do groupby operations. In this notebook, I will show you how to do a groupby operation on a Hugging Face dataset using <code>polars</code>.</p>
<div id="cell-2" class="cell" data-outputid="6075cf6e-252a-4b77-b7d7-3c2e6a0c5c63" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>pip install datasets polars matplotlib <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span>quiet</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Note: you may need to restart the kernel to use updated packages.</code></pre>
</div>
</div>
<div id="cell-3" class="cell" data-outputid="b6e2eef7-0008-42c5-a404-f409a2e5842f" data-execution_count="2">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> datasets <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> load_dataset</span>
<span id="cb3-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> polars <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pl</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>/Users/davanstrien/Documents/daniel/new_blog/.venv/lib/python3.11/site-packages/tqdm/auto.py:21: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html
  from .autonotebook import tqdm as notebook_tqdm</code></pre>
</div>
</div>
<p>We can use the <code>datasets</code> library to load the dataset and then convert it to a <code>polars</code> DataFrame. After that, we can use the <a href="https://docs.pola.rs/api/python/stable/reference/dataframe/api/polars.DataFrame.group_by.html"><code>group_by</code></a> method to group the data by a specific column and then apply an aggregation function to the grouped data.</p>
<div id="cell-5" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">ds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> load_dataset(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"argilla/databricks-dolly-15k-curated-en"</span>)</span></code></pre></div>
</div>
<div id="cell-6" class="cell" data-outputid="d0366ba2-a8ed-4a08-e878-b6e4f56870b7" data-execution_count="4">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">ds[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train'</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">
<pre><code>{'id': '0',
 'category': 'closed_qa',
 'original-instruction': 'When did Virgin Australia start operating?',
 'original-context': "Virgin Australia, the trading name of Virgin Australia Airlines Pty Ltd, is an Australian-based airline. It is the largest airline by fleet size to use the Virgin brand. It commenced services on 31 August 2000 as Virgin Blue, with two aircraft on a single route.[3] It suddenly found itself as a major airline in Australia's domestic market after the collapse of Ansett Australia in September 2001. The airline has since grown to directly serve 32 cities in Australia, from hubs in Brisbane, Melbourne and Sydney.[4]",
 'original-response': 'Virgin Australia commenced services on 31 August 2000 as Virgin Blue, with two aircraft on a single route.',
 'new-instruction': {'user_id': [None],
  'value': ['When did Virgin Australia start operating?'],
  'status': ['submitted']},
 'new-context': {'user_id': [None],
  'value': ["Virgin Australia, the trading name of Virgin Australia Airlines Pty Ltd, is an Australian-based airline. It is the largest airline by fleet size to use the Virgin brand. It commenced services on 31 August 2000 as Virgin Blue, with two aircraft on a single route. It suddenly found itself as a major airline in Australia's domestic market after the collapse of Ansett Australia in September 2001. The airline has since grown to directly serve 32 cities in Australia, from hubs in Brisbane, Melbourne and Sydney."],
  'status': ['submitted']},
 'new-response': {'user_id': [None],
  'value': ['Virgin Australia commenced services on 31 August 2000 as Virgin Blue, with two aircraft on a single route.'],
  'status': ['submitted']},
 'external_id': None}</code></pre>
</div>
</div>
<div id="cell-7" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ds[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train'</span>].to_polars()</span></code></pre></div>
</div>
<section id="loading-directly-into-polars" class="level3">
<h3 class="anchored" data-anchor-id="loading-directly-into-polars">Loading directly into Polars!</h3>
<p>Since this post was originally written <code>polars</code> have added a direct integration with the Hub so you can easily load the data directly into a <code>polars</code> DataFrame. You can load a parquet dataset as follows:</p>
<div id="cell-9" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pl.read_parquet(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'hf://datasets/argilla/databricks-dolly-15k-curated-en/data/train-00000-of-00001-15a05aeec7726f9d.parquet'</span>)</span></code></pre></div>
</div>
<p>The Hub will directly show you how to load a dataset in polars for compatible datasets.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://danielvanstrien.xyz/posts/post-with-code/datasets-groupby/use-in-polars.png" class="img-fluid figure-img"></p>
<figcaption>The How to use from the Polars library helper on the Hub</figcaption>
</figure>
</div>
<p>One very neat feature of <code>polars</code> is loading a subset of the column from a dataset in the Hub. This is very useful when you have a large dataset and you only need a few columns.</p>
<div id="cell-12" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">pl.read_parquet(</span>
<span id="cb10-2">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hf://datasets/argilla/databricks-dolly-15k-curated-en/data/train-00000-of-00001-15a05aeec7726f9d.parquet"</span>,</span>
<span id="cb10-3">    columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"category"</span>],</span>
<span id="cb10-4">)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="7">
<div><style>
.dataframe > thead > tr,
.dataframe > tbody > tr {
  text-align: right;
  white-space: pre-wrap;
}
</style>
<small>shape: (15_015, 1)</small>
<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">category</th>
</tr>
<tr class="odd">
<th>str</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>"closed_qa"</td>
</tr>
<tr class="even">
<td>"classification"</td>
</tr>
<tr class="odd">
<td>"open_qa"</td>
</tr>
<tr class="even">
<td>"open_qa"</td>
</tr>
<tr class="odd">
<td>"closed_qa"</td>
</tr>
<tr class="even">
<td>‚Ä¶</td>
</tr>
<tr class="odd">
<td>"brainstorming"</td>
</tr>
<tr class="even">
<td>"summarization"</td>
</tr>
<tr class="odd">
<td>"open_qa"</td>
</tr>
<tr class="even">
<td>"general_qa"</td>
</tr>
<tr class="odd">
<td>"general_qa"</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<p>Let‚Äôs see how we can groupby the category column of this dataset and then get the mean length of the instruction column</p>
<div id="cell-14" class="cell" data-outputid="91cc5719-77f8-434a-ba6c-c6558f39169d" data-execution_count="8">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">grouped <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.group_by(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'category'</span>).agg(pl.col(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'original-instruction'</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>.len_bytes().alias(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'length'</span>).mean())</span>
<span id="cb11-2">grouped</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="8">
<div><style>
.dataframe > thead > tr,
.dataframe > tbody > tr {
  text-align: right;
  white-space: pre-wrap;
}
</style>
<small>shape: (8, 2)</small>
<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">category</th>
<th data-quarto-table-cell-role="th">length</th>
</tr>
<tr class="odd">
<th>str</th>
<th>f64</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>"open_qa"</td>
<td>45.715868</td>
</tr>
<tr class="even">
<td>"classification"</td>
<td>123.231273</td>
</tr>
<tr class="odd">
<td>"summarization"</td>
<td>56.284244</td>
</tr>
<tr class="even">
<td>"closed_qa"</td>
<td>73.166758</td>
</tr>
<tr class="odd">
<td>"brainstorming"</td>
<td>60.71267</td>
</tr>
<tr class="even">
<td>"creative_writing"</td>
<td>89.729958</td>
</tr>
<tr class="odd">
<td>"general_qa"</td>
<td>74.157919</td>
</tr>
<tr class="even">
<td>"information_extraction"</td>
<td>74.921958</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<p>We can already get a good sense of how different categories compare in terms of the length of the instructions. We can also create a visualization to show this comparison.</p>
<div id="cell-16" class="cell" data-execution_count="30">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">grouped <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> grouped.sort(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'length'</span>)</span></code></pre></div>
</div>
<div id="cell-17" class="cell" data-outputid="3ec7475b-1662-466d-d62f-892ef38c55cf" data-execution_count="31">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb13-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib</span>
<span id="cb13-3"></span>
<span id="cb13-4">matplotlib.style.use(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'fivethirtyeight'</span>)</span>
<span id="cb13-5">categories <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> grouped[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'category'</span>]</span>
<span id="cb13-6">lengths <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> grouped[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'length'</span>]</span>
<span id="cb13-7"></span>
<span id="cb13-8"></span>
<span id="cb13-9">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb13-10">plt.bar(categories, lengths)</span>
<span id="cb13-11">plt.xticks(rotation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">45</span>, ha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'right'</span>)</span>
<span id="cb13-12">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Mean Length'</span>)</span>
<span id="cb13-13">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'original-instruction length for each category'</span>)</span>
<span id="cb13-14">plt.tight_layout()</span>
<span id="cb13-15">plt.savefig(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'groupby-fig.png'</span>)</span>
<span id="cb13-16">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://danielvanstrien.xyz/posts/post-with-code/datasets-groupby/2023-09-18-datasets-groupby_files/figure-html/cell-11-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="big-datasets" class="level2">
<h2 class="anchored" data-anchor-id="big-datasets">Big datasets</h2>
<p>Since polars supports lazy evaluation, you can work with very large datasets. This is very useful when you have a dataset that is too large to fit in memory. You can perform operations on the dataset without loading the entire dataset into memory. For a Hub dataset we can use the <code>scan_parquet</code> method to load the dataset lazily.</p>
<div id="cell-19" class="cell" data-execution_count="24">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pl.scan_parquet(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'hf://datasets/BAAI/Infinity-Instruct/3M/*.parquet'</span>)</span></code></pre></div>
</div>
<p>You‚Äôll see this returns a lazy DataFrame that you can use to perform operations on the dataset.</p>
<div id="cell-21" class="cell" data-execution_count="32">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>(df)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="32">
<pre><code>polars.lazyframe.frame.LazyFrame</code></pre>
</div>
</div>
<p>If we do a similar groupby operation on this dataset</p>
<div id="cell-23" class="cell" data-execution_count="26">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.group_by(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'langdetect'</span>).agg(</span>
<span id="cb17-2">    pl.col(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'conversations'</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>().mean().alias(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mean_conversation_length'</span>)</span>
<span id="cb17-3">)</span></code></pre></div>
</div>
<p>you‚Äôll see that we don‚Äôt get back an immediate result but a lazy DataFrame that we can use to perform operations on the dataset.</p>
<div id="cell-25" class="cell" data-execution_count="33">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">result</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="33">
<h4 class="anchored">NAIVE QUERY PLAN</h4><p>run <b>LazyFrame.show_graph()</b> to see the optimized version</p><!--?xml version="1.0" encoding="UTF-8" standalone="no"?-->

<!-- Generated by graphviz version 12.0.0 (20240704.0754)
 -->
<!-- Title: polars_query Pages: 1 -->
<svg width="814pt" height="143pt" viewbox="0.00 0.00 813.75 142.50" xmlns="http://www.w3.org/2000/svg" xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 138.5)">
<title>polars_query</title>
<polygon fill="white" stroke="none" points="-4,4 -4,-138.5 809.75,-138.5 809.75,4 -4,4"></polygon>
<!-- p1 -->
<g id="node1" class="node">
<title>p1</title>
<polygon fill="none" stroke="black" points="640.38,-134.5 165.38,-134.5 165.38,-77 640.38,-77 640.38,-134.5"></polygon>
<text text-anchor="middle" x="402.88" y="-117.2" font-family="Times,serif" font-size="14.00">AGG [col("conversations").list.length().mean().alias("mean_conversation_length")]</text>
<text text-anchor="middle" x="402.88" y="-100.7" font-family="Times,serif" font-size="14.00">BY</text>
<text text-anchor="middle" x="402.88" y="-84.2" font-family="Times,serif" font-size="14.00">[col("langdetect")]</text>
</g>
<!-- p2 -->
<g id="node2" class="node">
<title>p2</title>
<polygon fill="none" stroke="black" points="805.75,-41 0,-41 0,0 805.75,0 805.75,-41"></polygon>
<text text-anchor="middle" x="402.88" y="-23.7" font-family="Times,serif" font-size="14.00">Parquet SCAN [https://huggingface.co/datasets/BAAI%2FInfinity-Instruct/resolve/main/3M%2Ftrain-00000-of-00035.parquet, ... 34 other files]</text>
<text text-anchor="middle" x="402.88" y="-7.2" font-family="Times,serif" font-size="14.00">œÄ */5;</text>
</g>
<!-- p1&#45;&#45;p2 -->
<g id="edge1" class="edge">
<title>p1--p2</title>
<path fill="none" stroke="black" d="M402.88,-76.57C402.88,-64.96 402.88,-51.8 402.88,-41.25"></path>
</g>
</g>
</svg>
</div>
</div>
<p>Where possible <code>polars</code> will also add some optimizations to the query to make it faster.</p>
<div id="cell-27" class="cell" data-execution_count="28">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">result.show_graph()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://danielvanstrien.xyz/posts/post-with-code/datasets-groupby/2023-09-18-datasets-groupby_files/figure-html/cell-16-output-1.svg" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>We can then use the <code>collect</code> method to get the result of the query.</p>
<div id="cell-29" class="cell" data-execution_count="29">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">result.collect()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="29">
<div><style>
.dataframe > thead > tr,
.dataframe > tbody > tr {
  text-align: right;
  white-space: pre-wrap;
}
</style>
<small>shape: (2, 2)</small>
<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">langdetect</th>
<th data-quarto-table-cell-role="th">mean_conversation_length</th>
</tr>
<tr class="odd">
<th>str</th>
<th>f64</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>"en"</td>
<td>3.068929</td>
</tr>
<tr class="even">
<td>"zh-cn"</td>
<td>3.214509</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>


</section>

 ]]></description>
  <guid>https://danielvanstrien.xyz/posts/post-with-code/datasets-groupby/2023-09-18-datasets-groupby.html</guid>
  <pubDate>Mon, 18 Sep 2023 00:00:00 GMT</pubDate>
  <media:content url="https://danielvanstrien.xyz/posts/post-with-code/datasets-groupby/groupby-fig.png" medium="image" type="image/png" height="86" width="144"/>
</item>
<item>
  <title>Exploring language metadata for datasets on the Hugging Face Hub</title>
  <dc:creator>Daniel van Strien</dc:creator>
  <link>https://danielvanstrien.xyz/posts/post-with-code/2023-06-07-hub-dataset-danguage_detection.html</link>
  <description><![CDATA[ 




<div id="cell-1" class="cell" data-outputid="c5372f71-2186-4255-e8dd-2219a835a396" data-execution_count="3">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>pip install huggingface_hub backoff wordcloud tabulate toolz matplotlib</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Requirement already satisfied: huggingface_hub in ./.venv/lib/python3.11/site-packages (0.15.1)
Requirement already satisfied: backoff in ./.venv/lib/python3.11/site-packages (2.2.1)
Requirement already satisfied: wordcloud in ./.venv/lib/python3.11/site-packages (1.9.2)
Requirement already satisfied: tabulate in ./.venv/lib/python3.11/site-packages (0.9.0)
Requirement already satisfied: filelock in ./.venv/lib/python3.11/site-packages (from huggingface_hub) (3.12.2)
Requirement already satisfied: fsspec in ./.venv/lib/python3.11/site-packages (from huggingface_hub) (2023.6.0)
Requirement already satisfied: requests in ./.venv/lib/python3.11/site-packages (from huggingface_hub) (2.31.0)
Requirement already satisfied: tqdm&gt;=4.42.1 in ./.venv/lib/python3.11/site-packages (from huggingface_hub) (4.65.0)
Requirement already satisfied: pyyaml&gt;=5.1 in ./.venv/lib/python3.11/site-packages (from huggingface_hub) (6.0)
Requirement already satisfied: typing-extensions&gt;=3.7.4.3 in ./.venv/lib/python3.11/site-packages (from huggingface_hub) (4.7.1)
Requirement already satisfied: packaging&gt;=20.9 in ./.venv/lib/python3.11/site-packages (from huggingface_hub) (23.1)
Requirement already satisfied: numpy&gt;=1.6.1 in ./.venv/lib/python3.11/site-packages (from wordcloud) (1.25.0)
Requirement already satisfied: pillow in ./.venv/lib/python3.11/site-packages (from wordcloud) (10.0.0)
Requirement already satisfied: matplotlib in ./.venv/lib/python3.11/site-packages (from wordcloud) (3.7.1)
Requirement already satisfied: contourpy&gt;=1.0.1 in ./.venv/lib/python3.11/site-packages (from matplotlib-&gt;wordcloud) (1.1.0)
Requirement already satisfied: cycler&gt;=0.10 in ./.venv/lib/python3.11/site-packages (from matplotlib-&gt;wordcloud) (0.11.0)
Requirement already satisfied: fonttools&gt;=4.22.0 in ./.venv/lib/python3.11/site-packages (from matplotlib-&gt;wordcloud) (4.40.0)
Requirement already satisfied: kiwisolver&gt;=1.0.1 in ./.venv/lib/python3.11/site-packages (from matplotlib-&gt;wordcloud) (1.4.4)
Requirement already satisfied: pyparsing&gt;=2.3.1 in ./.venv/lib/python3.11/site-packages (from matplotlib-&gt;wordcloud) (3.1.0)
Requirement already satisfied: python-dateutil&gt;=2.7 in ./.venv/lib/python3.11/site-packages (from matplotlib-&gt;wordcloud) (2.8.2)
Requirement already satisfied: charset-normalizer&lt;4,&gt;=2 in ./.venv/lib/python3.11/site-packages (from requests-&gt;huggingface_hub) (3.1.0)
Requirement already satisfied: idna&lt;4,&gt;=2.5 in ./.venv/lib/python3.11/site-packages (from requests-&gt;huggingface_hub) (3.4)
Requirement already satisfied: urllib3&lt;3,&gt;=1.21.1 in ./.venv/lib/python3.11/site-packages (from requests-&gt;huggingface_hub) (2.0.3)
Requirement already satisfied: certifi&gt;=2017.4.17 in ./.venv/lib/python3.11/site-packages (from requests-&gt;huggingface_hub) (2023.5.7)
Requirement already satisfied: six&gt;=1.5 in ./.venv/lib/python3.11/site-packages (from python-dateutil&gt;=2.7-&gt;matplotlib-&gt;wordcloud) (1.16.0)
Note: you may need to restart the kernel to use updated packages.</code></pre>
</div>
</div>
<div id="cell-2" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> huggingface_hub <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> list_datasets</span>
<span id="cb3-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> toolz <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> valmap, countby, groupby, topk, valmap</span>
<span id="cb3-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> wordcloud <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> WordCloud</span>
<span id="cb3-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span></code></pre></div>
</div>
<section id="load-datasets" class="level2">
<h2 class="anchored" data-anchor-id="load-datasets">Load datasets</h2>
<div id="cell-4" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">datasets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">iter</span>(list_datasets(full<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, sort<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"downloads"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)))</span></code></pre></div>
</div>
<div id="cell-5" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_lang(dataset):</span>
<span id="cb5-2">    card_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dataset.cardData</span>
<span id="cb5-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> card_data:</span>
<span id="cb5-4">        lang <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> card_data.get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"language"</span>)</span>
<span id="cb5-5">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> lang <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb5-6">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb5-7">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(lang) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb5-8">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb5-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> card_data:</span>
<span id="cb5-10">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"No card data"</span></span></code></pre></div>
</div>
<div id="cell-6" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">has_lang <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> groupby(get_lang, datasets)</span></code></pre></div>
</div>
<div id="cell-7" class="cell" data-outputid="ba68ff95-d18a-4a37-d5ef-001287c14a7b" data-execution_count="8">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">has_lang.keys()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="8">
<pre><code>dict_keys([True, 'No card data', False, None])</code></pre>
</div>
</div>
<div id="cell-8" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">has_language_freqs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> countby(get_lang, datasets)</span>
<span id="cb9-2">has_language_percents <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> valmap(</span>
<span id="cb9-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(has_language_freqs.values()) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, ndigits<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>),</span>
<span id="cb9-4">    has_language_freqs,</span>
<span id="cb9-5">)</span></code></pre></div>
</div>
<div id="cell-9" class="cell" data-outputid="a0909426-6ca3-4935-b648-d9acd5bd99c4" data-execution_count="10">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"></span>
<span id="cb10-2">plt.style.use(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ggplot"</span>)</span>
<span id="cb10-3">data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>: <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">13.31</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"No card data"</span>: <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">42.03</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>: <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">44.5</span>}</span>
<span id="cb10-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert the keys to strings</span></span>
<span id="cb10-5">keys <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(key) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> key <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> data]</span>
<span id="cb10-6"></span>
<span id="cb10-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Separate the values from the dictionary</span></span>
<span id="cb10-8">values <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(data.values())</span>
<span id="cb10-9"></span>
<span id="cb10-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a bar chart</span></span>
<span id="cb10-11">plt.bar(keys, values)</span>
<span id="cb10-12"></span>
<span id="cb10-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the labels for x and y axes</span></span>
<span id="cb10-14">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Percent"</span>)</span>
<span id="cb10-15"></span>
<span id="cb10-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the title of the chart</span></span>
<span id="cb10-17">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Has language information?"</span>)</span>
<span id="cb10-18"></span>
<span id="cb10-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the chart</span></span>
<span id="cb10-20">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://danielvanstrien.xyz/posts/post-with-code/2023-06-07-hub-dataset-danguage_detection_files/figure-html/cell-9-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="filter-to-datasets-with-language-information" class="level2">
<h2 class="anchored" data-anchor-id="filter-to-datasets-with-language-information">Filter to datasets with language information</h2>
<div id="cell-11" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">with_lang <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> has_lang[<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>]</span></code></pre></div>
</div>
<div id="cell-12" class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> count_langs(dataset):</span>
<span id="cb12-2">    langs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dataset.cardData.get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"language"</span>)</span>
<span id="cb12-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(langs)</span></code></pre></div>
</div>
</section>
<section id="top-ten-most-frequent-languages-amounts" class="level1">
<h1>Top ten most frequent languages amounts</h1>
<div id="cell-14" class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">countby(count_langs, with_lang).items(), key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: x[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span></code></pre></div>
</div>
<div id="cell-15" class="cell" data-outputid="2105e545-b419-4ba3-e568-abdf36ee02b8" data-execution_count="13">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">topk(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, countby(count_langs, with_lang).items(), key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: x[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="13">
<pre><code>((1, 5107),
 (2, 662),
 (3, 76),
 (4, 35),
 (6, 28),
 (11, 26),
 (7, 23),
 (5, 20),
 (12, 19),
 (10, 18))</code></pre>
</div>
</div>
<p>highest number of languages</p>
<div id="cell-18" class="cell" data-outputid="e638708a-dc99-4af4-f3f8-b56fc1a6542b" data-execution_count="14">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(countby(count_langs, with_lang).keys())</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="14">
<pre><code>641</code></pre>
</div>
</div>
<section id="get-languages" class="level2">
<h2 class="anchored" data-anchor-id="get-languages">Get languages</h2>
<div id="cell-20" class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_langs(dataset):</span>
<span id="cb18-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> dataset.cardData.get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"language"</span>)</span></code></pre></div>
</div>
<div id="cell-21" class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> toolz <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> concat, frequencies</span></code></pre></div>
</div>
<div id="cell-22" class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">lang_freqs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> frequencies(concat(get_langs(d) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> d <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> with_lang))</span></code></pre></div>
</div>
<p>Number of unique languages specified on the hub</p>
<div id="cell-24" class="cell" data-outputid="6299ab54-65e8-4243-b2bd-8a97093f9c44" data-execution_count="18">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(lang_freqs.keys())</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="18">
<pre><code>1719</code></pre>
</div>
</div>
<div id="cell-25" class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span></code></pre></div>
<div class="cell-output cell-output-error">
<div class="ansi-escaped-output">
<pre><span class="ansi-red-fg">---------------------------------------------------------------------------</span>
<span class="ansi-red-fg">ModuleNotFoundError</span>                       Traceback (most recent call last)
Cell <span class="ansi-green-fg">In[19], line 1</span>
<span class="ansi-green-fg">----&gt; 1</span> import pandas as pd

<span class="ansi-red-fg">ModuleNotFoundError</span>: No module named 'pandas'</pre>
</div>
</div>
</div>
<div id="cell-26" class="cell" data-outputid="88ea78fe-f552-4f8f-82f1-feb0857fd22b">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Language"</span>: lang_freqs.keys(), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Frequency"</span>: lang_freqs.values()})</span>
<span id="cb24-2">df</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="81">

  <div id="df-2d0dc39a-74af-4005-a96d-5e92fd378187">
    <div class="colab-df-container">
      <div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Language</th>
<th data-quarto-table-cell-role="th">Frequency</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>en</td>
<td>3949</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>ja</td>
<td>221</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>ace</td>
<td>19</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>acm</td>
<td>6</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>acq</td>
<td>5</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">...</td>
<td>...</td>
<td>...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">1714</td>
<td>mr-</td>
<td>1</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1715</td>
<td>xx</td>
<td>1</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">1716</td>
<td>nbl</td>
<td>2</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1717</td>
<td>sep</td>
<td>1</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">1718</td>
<td>ssw</td>
<td>2</td>
</tr>
</tbody>
</table>

<p>1719 rows √ó 2 columns</p>
</div>
      <button class="colab-df-convert" onclick="convertToInteractive('df-2d0dc39a-74af-4005-a96d-5e92fd378187')" title="Convert this dataframe to an interactive table." style="display:none;">
        
  <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewbox="0 0 24 24" width="24px">
    <path d="M0 0h24v24H0V0z" fill="none"></path>
    <path d="M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z"></path><path d="M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z"></path>
  </svg>
      </button>
      
  <style>
    .colab-df-container {
      display:flex;
      flex-wrap:wrap;
      gap: 12px;
    }

    .colab-df-convert {
      background-color: #E8F0FE;
      border: none;
      border-radius: 50%;
      cursor: pointer;
      display: none;
      fill: #1967D2;
      height: 32px;
      padding: 0 0 0 0;
      width: 32px;
    }

    .colab-df-convert:hover {
      background-color: #E2EBFA;
      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);
      fill: #174EA6;
    }

    [theme=dark] .colab-df-convert {
      background-color: #3B4455;
      fill: #D2E3FC;
    }

    [theme=dark] .colab-df-convert:hover {
      background-color: #434B5C;
      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);
      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));
      fill: #FFFFFF;
    }
  </style>

      <script>
        const buttonEl =
          document.querySelector('#df-2d0dc39a-74af-4005-a96d-5e92fd378187 button.colab-df-convert');
        buttonEl.style.display =
          google.colab.kernel.accessAllowed ? 'block' : 'none';

        async function convertToInteractive(key) {
          const element = document.querySelector('#df-2d0dc39a-74af-4005-a96d-5e92fd378187');
          const dataTable =
            await google.colab.kernel.invokeFunction('convertToInteractive',
                                                     [key], {});
          if (!dataTable) return;

          const docLinkHtml = 'Like what you see? Visit the ' +
            '<a target="_blank" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'
            + ' to learn more about interactive tables.';
          element.innerHTML = '';
          dataTable['output_type'] = 'display_data';
          await google.colab.output.renderOutput(dataTable, element);
          const docLink = document.createElement('div');
          docLink.innerHTML = docLinkHtml;
          element.appendChild(docLink);
        }
      </script>
    </div>
  </div>
  
</div>
</div>
<div id="cell-27" class="cell" data-outputid="34150b53-326c-4477-f600-7d4a134685f8">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">df.sort_values(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Frequency"</span>, ascending<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>).iloc[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>].set_index(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Language"</span>).plot.bar()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://danielvanstrien.xyz/posts/post-with-code/2023-06-07-hub-dataset-danguage_detection_files/figure-html/cell-22-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="cell-28" class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Percent"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (df.Frequency <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> df.Frequency.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
</div>
<div id="cell-29" class="cell" data-outputid="e90a3070-3fca-4338-aaae-6828fade0b20">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(</span>
<span id="cb27-2">    df.sort_values(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Frequency"</span>, ascending<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb27-3">    .iloc[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>]</span>
<span id="cb27-4">    .set_index(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Language"</span>)</span>
<span id="cb27-5">    .to_markdown()</span>
<span id="cb27-6">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>| Language   |   Frequency |   Percent |
|:-----------|------------:|----------:|
| en         |        3949 |    19.04  |
| fr         |         394 |     1.9   |
| zh         |         390 |     1.88  |
| es         |         358 |     1.726 |
| de         |         350 |     1.687 |
| ru         |         333 |     1.606 |
| pt         |         238 |     1.147 |
| it         |         229 |     1.104 |
| ja         |         221 |     1.066 |
| pl         |         207 |     0.998 |
| ar         |         195 |     0.94  |
| ko         |         184 |     0.887 |
| nl         |         182 |     0.877 |
| tr         |         156 |     0.752 |
| vi         |         155 |     0.747 |
| sv         |         153 |     0.738 |
| id         |         149 |     0.718 |
| hi         |         148 |     0.714 |
| th         |         145 |     0.699 |
| fi         |         144 |     0.694 |</code></pre>
</div>
</div>
<div id="cell-30" class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.drop(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Percent"</span>)</span></code></pre></div>
</div>
<div id="cell-31" class="cell" data-outputid="b78cbd0f-25fb-42bc-f566-7570e158a3c0">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1">df.sort_values(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Frequency"</span>, ascending<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>).iloc[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>].set_index(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Language"</span>).plot.barh()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://danielvanstrien.xyz/posts/post-with-code/2023-06-07-hub-dataset-danguage_detection_files/figure-html/cell-26-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="cell-32" class="cell" data-outputid="206a52fa-1a5b-484b-e281-3f398d78ca40">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb31-2"></span>
<span id="cb31-3">df[df.Language <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"en"</span>].sort_values(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Frequency"</span>, ascending<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>).iloc[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>].set_index(</span>
<span id="cb31-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Language"</span></span>
<span id="cb31-5">).plot.bar(ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax)</span>
<span id="cb31-6"></span>
<span id="cb31-7">ax.set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Language"</span>)</span>
<span id="cb31-8">ax.set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Frequency"</span>)</span>
<span id="cb31-9">ax.set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Top 50 Languages (excluding English)"</span>)</span>
<span id="cb31-10">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://danielvanstrien.xyz/posts/post-with-code/2023-06-07-hub-dataset-danguage_detection_files/figure-html/cell-27-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="cell-33" class="cell">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> matplotlib.colors <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> LinearSegmentedColormap</span>
<span id="cb32-2"></span>
<span id="cb32-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define Hugging Face brand colors</span></span>
<span id="cb32-4">hugging_face_colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#FFD21E"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#FF9D00"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#6B7280"</span>]</span>
<span id="cb32-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create custom colormap</span></span>
<span id="cb32-6">color_map <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LinearSegmentedColormap.from_list(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hugging_face"</span>, hugging_face_colors)</span></code></pre></div>
</div>
<div id="cell-34" class="cell" data-outputid="226b2208-e220-41b9-9acf-4ce2bf8d136e">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1">wordcloud <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> WordCloud(width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">800</span>, height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">400</span>, colormap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>color_map)</span>
<span id="cb33-2"></span>
<span id="cb33-3">wordcloud.generate_from_frequencies(lang_freqs)</span>
<span id="cb33-4"></span>
<span id="cb33-5">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span>
<span id="cb33-6">plt.imshow(wordcloud, interpolation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bilinear"</span>)</span>
<span id="cb33-7">plt.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"off"</span>)</span>
<span id="cb33-8">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://danielvanstrien.xyz/posts/post-with-code/2023-06-07-hub-dataset-danguage_detection_files/figure-html/cell-29-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>


</section>
</section>

 ]]></description>
  <guid>https://danielvanstrien.xyz/posts/post-with-code/2023-06-07-hub-dataset-danguage_detection.html</guid>
  <pubDate>Wed, 07 Jun 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Dynamically updating a Hugging Face hub organization README</title>
  <dc:creator>Daniel van Strien</dc:creator>
  <link>https://danielvanstrien.xyz/posts/post-with-code/readme_auto_generate/2023-03-07-readme-template.html</link>
  <description><![CDATA[ 




<p>tl;dr we can use the <code>huggingface_hub</code> library to auto generate a model card readme for the <a href="https://huggingface.co/biglam">BigLAM organization</a>.</p>
<section id="what-are-we-aiming-to-do" class="level2">
<h2 class="anchored" data-anchor-id="what-are-we-aiming-to-do">What are we aiming to do?</h2>
<p>The Hugging Face hub allows organizations to create a README card to describe their organization.</p>
<p><img src="https://github.com/davanstrien/blog/raw/master/images/_readme_auto_generate/before_readme.png" class="img-fluid"></p>
<p>Whilst you can manually create this there might be some content that would be nice to auto populate. For example, for the BigLAM organization, we‚Äôre mainly focused on collecting datasets. Since we have many tasks supported by these datasets we might want to create a list of datasets organized by task. Ideally we don‚Äôt want to have to manually update this. Let‚Äôs see how we can do this!</p>
<p>First we‚Äôll install the <code>huggingface_hub</code> library which allows us to interact with the hub. We‚Äôll install <code>Jinja2</code> for templating and <code>toolz</code> because <code>toolz</code> makes Python infinitely more delightful!</p>
<div id="cell-4" class="cell" data-outputid="b856754e-887d-452e-d65d-152a92d39c7f">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>pip install huggingface_hub toolz Jinja2</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Requirement already satisfied: huggingface_hub in /Users/davanstrien/Documents/daniel/blog/venv/lib/python3.10/site-packages (0.11.1)
Requirement already satisfied: toolz in /Users/davanstrien/Documents/daniel/blog/venv/lib/python3.10/site-packages (0.12.0)
Requirement already satisfied: Jinja2 in /Users/davanstrien/Documents/daniel/blog/venv/lib/python3.10/site-packages (3.1.2)
Requirement already satisfied: pyyaml&gt;=5.1 in /Users/davanstrien/Documents/daniel/blog/venv/lib/python3.10/site-packages (from huggingface_hub) (6.0)
Requirement already satisfied: packaging&gt;=20.9 in /Users/davanstrien/Documents/daniel/blog/venv/lib/python3.10/site-packages (from huggingface_hub) (23.0)
Requirement already satisfied: requests in /Users/davanstrien/Documents/daniel/blog/venv/lib/python3.10/site-packages (from huggingface_hub) (2.28.2)
Requirement already satisfied: filelock in /Users/davanstrien/Documents/daniel/blog/venv/lib/python3.10/site-packages (from huggingface_hub) (3.9.0)
Requirement already satisfied: typing-extensions&gt;=3.7.4.3 in /Users/davanstrien/Documents/daniel/blog/venv/lib/python3.10/site-packages (from huggingface_hub) (4.4.0)
Requirement already satisfied: tqdm in /Users/davanstrien/Documents/daniel/blog/venv/lib/python3.10/site-packages (from huggingface_hub) (4.64.1)
Requirement already satisfied: MarkupSafe&gt;=2.0 in /Users/davanstrien/Documents/daniel/blog/venv/lib/python3.10/site-packages (from Jinja2) (2.1.1)
Requirement already satisfied: urllib3&lt;1.27,&gt;=1.21.1 in /Users/davanstrien/Documents/daniel/blog/venv/lib/python3.10/site-packages (from requests-&gt;huggingface_hub) (1.26.14)
Requirement already satisfied: idna&lt;4,&gt;=2.5 in /Users/davanstrien/Documents/daniel/blog/venv/lib/python3.10/site-packages (from requests-&gt;huggingface_hub) (3.4)
Requirement already satisfied: certifi&gt;=2017.4.17 in /Users/davanstrien/Documents/daniel/blog/venv/lib/python3.10/site-packages (from requests-&gt;huggingface_hub) (2022.12.7)
Requirement already satisfied: charset-normalizer&lt;4,&gt;=2 in /Users/davanstrien/Documents/daniel/blog/venv/lib/python3.10/site-packages (from requests-&gt;huggingface_hub) (3.0.1)

[notice] A new release of pip available: 22.3.1 -&gt; 23.0.1
[notice] To update, run: pip install --upgrade pip
Note: you may need to restart the kernel to use updated packages.</code></pre>
</div>
</div>
<div id="cell-5" class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> toolz</span>
<span id="cb3-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> huggingface_hub <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> list_datasets</span></code></pre></div>
</div>
<p>We list all the datasets under this organization</p>
<div id="cell-7" class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">big_lam_datasets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">iter</span>(list_datasets(author<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"biglam"</span>, limit<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, full<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)))</span></code></pre></div>
</div>
<p>We want to check which tasks our organization currently has. If we look at an example of one dataset:</p>
<div id="cell-9" class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">big_lam_datasets[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="43">
<pre><code>DatasetInfo: {
    id: biglam/illustrated_ads
    sha: 688e7d96e99cd5730a17a5c55b0964d27a486904
    lastModified: 2023-01-18T20:38:15.000Z
    tags: ['task_categories:image-classification', 'task_ids:multi-class-image-classification', 'annotations_creators:expert-generated', 'size_categories:n&lt;1K', 'license:cc0-1.0', 'lam', 'historic newspapers']
    private: False
    author: biglam
    description: The Dataset contains images derived from the Newspaper Navigator (news-navigator.labs.loc.gov/), a dataset of images drawn from the Library of Congress Chronicling America collection.
    citation: @dataset{van_strien_daniel_2021_5838410,
  author       = {van Strien, Daniel},
  title        = {{19th Century United States Newspaper Advert images 
                   with 'illustrated' or 'non illustrated' labels}},
  month        = oct,
  year         = 2021,
  publisher    = {Zenodo},
  version      = {0.0.1},
  doi          = {10.5281/zenodo.5838410},
  url          = {https://doi.org/10.5281/zenodo.5838410}}
    cardData: {'annotations_creators': ['expert-generated'], 'language': [], 'language_creators': [], 'license': ['cc0-1.0'], 'multilinguality': [], 'pretty_name': "19th Century United States Newspaper Advert images with 'illustrated' or 'non illustrated' labels", 'size_categories': ['n&lt;1K'], 'source_datasets': [], 'tags': ['lam', 'historic newspapers'], 'task_categories': ['image-classification'], 'task_ids': ['multi-class-image-classification']}
    siblings: []
    _id: 62b9bb453b3301c319d5b53e
    disabled: False
    gated: False
    gitalyUid: 4a051da032bb27da0bc286b288384bb3362f56546a387b130121cd279db336e1
    likes: 3
    downloads: 11
}</code></pre>
</div>
</div>
<p>We can see the <code>cardData</code> attribute contains an item containing the tasks supported by a dataset</p>
<div id="cell-11" class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">big_lam_datasets[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].cardData[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'task_categories'</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="46">
<pre><code>['image-classification']</code></pre>
</div>
</div>
<div id="cell-12" class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_task_categories(dataset):</span>
<span id="cb9-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">try</span>:</span>
<span id="cb9-3">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">yield</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">from</span> dataset.cardData[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'task_categories'</span>]</span>
<span id="cb9-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">except</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">KeyError</span>:</span>
<span id="cb9-5">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span></code></pre></div>
</div>
<p>We can use the <code>toolz.frequencies</code> function to get counts of these tasks in our org.</p>
<div id="cell-14" class="cell" data-outputid="87475cb1-e278-4078-e76a-d3c5a4986d58">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">task_frequencies <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> toolz.frequencies(</span>
<span id="cb10-2">    toolz.concat(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(get_task_categories, big_lam_datasets))</span>
<span id="cb10-3">)</span>
<span id="cb10-4">task_frequencies</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="51">
<pre><code>{'image-classification': 8,
 'text-classification': 6,
 'image-to-text': 2,
 'text-generation': 7,
 'object-detection': 5,
 'fill-mask': 2,
 'text-to-image': 1,
 'image-to-image': 1,
 'token-classification': 1}</code></pre>
</div>
</div>
<p>Since we want to organize by task type, let‚Äôs grab the names of all the tasks in the BigLAM organization.</p>
<div id="cell-16" class="cell" data-outputid="ff2e4a3c-e3ce-4023-b348-0378df89bab4">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">tasks <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> task_frequencies.keys()</span>
<span id="cb12-2">tasks</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="52">
<pre><code>dict_keys(['image-classification', 'text-classification', 'image-to-text', 'text-generation', 'object-detection', 'fill-mask', 'text-to-image', 'image-to-image', 'token-classification'])</code></pre>
</div>
</div>
<p>We now want to group together datasets by the task(s) they support. We can use a default dict to create a dictionary where the keys are the task and the values are a list of datasets supporting that task. <strong>Note</strong> some datasets support multiple tasks so may appear under more than one task key.</p>
<div id="cell-18" class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> collections <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> defaultdict</span></code></pre></div>
</div>
<div id="cell-19" class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">datasets_by_task <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> defaultdict(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>)</span></code></pre></div>
</div>
<div id="cell-20" class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> dataset <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> big_lam_datasets:</span>
<span id="cb16-2">    tasks <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_task_categories(dataset)</span>
<span id="cb16-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> task <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> tasks:</span>
<span id="cb16-4">        datasets_by_task[task].append(dataset)</span></code></pre></div>
</div>
<p>We now have a dictionary which allows us to get all datasets supporting a task, for example <code>fill-mask</code></p>
<div id="cell-22" class="cell" data-outputid="939fbb63-21c0-4aaf-fb70-c71cf962ce5c">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">datasets_by_task[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fill-mask"</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="57">
<pre><code>[DatasetInfo: {
    id: biglam/berlin_state_library_ocr
    sha: a890935d5bd754ddc5b85f56b6f34f6d2bb4abba
    lastModified: 2022-08-05T09:36:24.000Z
    tags: ['task_categories:fill-mask', 'task_categories:text-generation', 'task_ids:masked-language-modeling', 'task_ids:language-modeling', 'annotations_creators:machine-generated', 'language_creators:expert-generated', 'multilinguality:multilingual', 'size_categories:1M&lt;n&lt;10M', 'language:de', 'language:nl', 'language:en', 'language:fr', 'language:es', 'license:cc-by-4.0', 'ocr', 'library']
    private: False
    author: biglam
    description: None
    citation: None
    cardData: {'annotations_creators': ['machine-generated'], 'language': ['de', 'nl', 'en', 'fr', 'es'], 'language_creators': ['expert-generated'], 'license': ['cc-by-4.0'], 'multilinguality': ['multilingual'], 'pretty_name': 'Berlin State Library OCR', 'size_categories': ['1M&lt;n&lt;10M'], 'source_datasets': [], 'tags': ['ocr', 'library'], 'task_categories': ['fill-mask', 'text-generation'], 'task_ids': ['masked-language-modeling', 'language-modeling']}
    siblings: []
    _id: 62e0431281d9ca6484efac31
    disabled: False
    gated: False
    gitalyUid: 3818ba9c8b624d79f1fcfb0c79bd197fb5b3a3f9de2452aed5028e8b6435f56a
    likes: 3
    downloads: 5
 },
 DatasetInfo: {
    id: biglam/bnl_newspapers1841-1879
    sha: 588db6c242ecae417b92830d5646121c15726fea
    lastModified: 2022-11-15T09:25:43.000Z
    tags: ['task_categories:text-generation', 'task_categories:fill-mask', 'task_ids:language-modeling', 'task_ids:masked-language-modeling', 'annotations_creators:no-annotation', 'language_creators:expert-generated', 'multilinguality:multilingual', 'size_categories:100K&lt;n&lt;1M', 'source_datasets:original', 'language:de', 'language:fr', 'language:lb', 'language:nl', 'language:la', 'language:en', 'license:cc0-1.0', 'newspapers', '1800-1900']
    private: False
    author: biglam
    description: None
    citation: None
    cardData: {'annotations_creators': ['no-annotation'], 'language': ['de', 'fr', 'lb', 'nl', 'la', 'en'], 'language_creators': ['expert-generated'], 'license': ['cc0-1.0'], 'multilinguality': ['multilingual'], 'pretty_name': 'BnL Newspapers 1841-1879', 'size_categories': ['100K&lt;n&lt;1M'], 'source_datasets': ['original'], 'tags': ['newspapers', '1800-1900'], 'task_categories': ['text-generation', 'fill-mask'], 'task_ids': ['language-modeling', 'masked-language-modeling']}
    siblings: []
    _id: 6372286ce8891da06b2a5d2f
    disabled: False
    gated: False
    gitalyUid: 039f217af964cfa1317f03d58c367ba6f0e415721b107a298cd4e75cbad50e8b
    likes: 2
    downloads: 3
 }]</code></pre>
</div>
</div>
</section>
<section id="how-can-we-create-a-readme-that-dynamically-updates" class="level2">
<h2 class="anchored" data-anchor-id="how-can-we-create-a-readme-that-dynamically-updates">How can we create a README that dynamically updates</h2>
<p>We now have our datasets organized by task. However, at the moment, this is in the form of a Python dictionary. It would be much nicer to render it a more pleasing format. This is where a <a href="https://www.fullstackpython.com/template-engines.html">templating engine</a> can help. In this case we‚Äôll use <a href="https://jinja.palletsprojects.com/en/3.0.x/templates/">Jinja</a>.</p>
<p>A templating engine allows us to create a template which can dynamically be updated based on values we pass in. We won‚Äôt go in depth to templating engines/Jinja in this blog post because I‚Äôm not an expert in templating engines. This <a href="https://realpython.com/primer-on-jinja-templating/">Real Python article</a> is a nice introduction to Jinja.</p>
<div id="cell-24" class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> jinja2 <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Environment, FileSystemLoader</span></code></pre></div>
</div>
<p>We can start by taking a look at our template. Since a lot of the template I created doesn‚Äôt update, we‚Äôll use <code>tail</code> to look at the bottom of the template which is dynamically updating.</p>
<div id="cell-26" class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>tail <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>n <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span> templates<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>readme.jinja</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>An overview of datasets currently made available via BigLam organised by task type.

{% for task_type, datasets in task_dictionary.items() %}

&lt;details&gt;
  &lt;summary&gt;{{ task_type }}&lt;/summary&gt;
    {% for dataset in datasets %}
  - [{{dataset.cardData['pretty_name']}}](https://huggingface.co/datasets/biglam/{{ dataset.id }})
  {%- endfor %}

&lt;/details&gt;
{% endfor %}</code></pre>
</div>
</div>
<p>Even if you aren‚Äôt familiar with templating engines, you can probably see roughly what this does. We look through all the keys and values in our dictionary, create a section for that task based on the dictionary key. We next loop through the dictionary values (which in this case is a list) and create a link for that dataset. Since we‚Äôre looping through <code>DatasetInfo</code> objects in the list we can grab things like the <code>pretty_name</code> for the dataset and dynamically create a URL link.</p>
<p>We can load this template as follows</p>
<div id="cell-29" class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">environment <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Environment(loader<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>FileSystemLoader(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"templates/"</span>))</span>
<span id="cb22-2">template <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> environment.get_template(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"readme.jinja"</span>)</span></code></pre></div>
</div>
<p>Create a context dictionary which we use to pass through our dictionary</p>
<div id="cell-31" class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">context <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb23-2">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"task_dictionary"</span>: datasets_by_task,</span>
<span id="cb23-3">}</span></code></pre></div>
</div>
<p>We can now render this and see how it looks</p>
<div id="cell-33" class="cell" data-outputid="5b98c9f5-c152-4012-9f19-aee61b695aa4">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(template.render(context))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>---
title: README
emoji: üìö
colorFrom: pink
colorTo: gray
sdk: static
pinned: false
---

BigScience üå∏ is an open scientific collaboration of nearly 600 researchers from 50 countries and 250 institutions who collaborate on various projects within the natural language processing (NLP) space to broaden the accessibility of language datasets while working on challenging scientific questions around training language models.


BigLAM started as a [datasets hackathon](https://github.com/bigscience-workshop/lam) focused on making data from Libraries, Archives, and Museums (LAMS) with potential machine-learning applications accessible via the Hugging Face Hub.
We are continuing to work on making more datasets available via the Hugging Face hub to help make these datasets more discoverable, open them up to new audiences, and help ensure that machine-learning datasets more closely reflect the richness of human culture.


## Dataset Overview

An overview of datasets currently made available via BigLam organised by task type.



&lt;details&gt;
  &lt;summary&gt;image-classification&lt;/summary&gt;
    
  - [19th Century United States Newspaper Advert images with 'illustrated' or 'non illustrated' labels](https://huggingface.co/datasets/biglam/biglam/illustrated_ads)
  - [Brill Iconclass AI Test Set ](https://huggingface.co/datasets/biglam/biglam/brill_iconclass)
  - [National Library of Scotland Chapbook Illustrations](https://huggingface.co/datasets/biglam/biglam/nls_chapbook_illustrations)
  - [Encyclopaedia Britannica Illustrated](https://huggingface.co/datasets/biglam/biglam/encyclopaedia_britannica_illustrated)
  - [V4Design Europeana style dataset](https://huggingface.co/datasets/biglam/biglam/v4design_europeana_style_dataset)
  - [Early Printed Books Font Detection Dataset](https://huggingface.co/datasets/biglam/biglam/early_printed_books_font_detection)
  - [Dataset of Pages from Early Printed Books with Multiple Font Groups](https://huggingface.co/datasets/biglam/biglam/early_printed_books_with_multiple_font_groups)
  - [DEArt: Dataset of European Art](https://huggingface.co/datasets/biglam/biglam/european_art)

&lt;/details&gt;


&lt;details&gt;
  &lt;summary&gt;text-classification&lt;/summary&gt;
    
  - [Annotated dataset to assess the accuracy of the textual description of cultural heritage records](https://huggingface.co/datasets/biglam/biglam/cultural_heritage_metadata_accuracy)
  - [Atypical Animacy](https://huggingface.co/datasets/biglam/biglam/atypical_animacy)
  - [Old Bailey Proceedings](https://huggingface.co/datasets/biglam/biglam/old_bailey_proceedings)
  - [Lampeter Corpus](https://huggingface.co/datasets/biglam/biglam/lampeter_corpus)
  - [Hansard Speeches](https://huggingface.co/datasets/biglam/biglam/hansard_speech)
  - [Contentious Contexts Corpus](https://huggingface.co/datasets/biglam/biglam/contentious_contexts)

&lt;/details&gt;


&lt;details&gt;
  &lt;summary&gt;image-to-text&lt;/summary&gt;
    
  - [Brill Iconclass AI Test Set ](https://huggingface.co/datasets/biglam/biglam/brill_iconclass)
  - [Old Book Illustrations](https://huggingface.co/datasets/biglam/biglam/oldbookillustrations)

&lt;/details&gt;


&lt;details&gt;
  &lt;summary&gt;text-generation&lt;/summary&gt;
    
  - [Old Bailey Proceedings](https://huggingface.co/datasets/biglam/biglam/old_bailey_proceedings)
  - [Hansard Speeches](https://huggingface.co/datasets/biglam/biglam/hansard_speech)
  - [Berlin State Library OCR](https://huggingface.co/datasets/biglam/biglam/berlin_state_library_ocr)
  - [Literary fictions of Gallica](https://huggingface.co/datasets/biglam/biglam/gallica_literary_fictions)
  - [Europeana Newspapers ](https://huggingface.co/datasets/biglam/biglam/europeana_newspapers)
  - [Gutenberg Poetry Corpus](https://huggingface.co/datasets/biglam/biglam/gutenberg-poetry-corpus)
  - [BnL Newspapers 1841-1879](https://huggingface.co/datasets/biglam/biglam/bnl_newspapers1841-1879)

&lt;/details&gt;


&lt;details&gt;
  &lt;summary&gt;object-detection&lt;/summary&gt;
    
  - [National Library of Scotland Chapbook Illustrations](https://huggingface.co/datasets/biglam/biglam/nls_chapbook_illustrations)
  - [YALTAi Tabular Dataset](https://huggingface.co/datasets/biglam/biglam/yalta_ai_tabular_dataset)
  - [YALTAi Tabular Dataset](https://huggingface.co/datasets/biglam/biglam/yalta_ai_segmonto_manuscript_dataset)
  - [Beyond Words](https://huggingface.co/datasets/biglam/biglam/loc_beyond_words)
  - [DEArt: Dataset of European Art](https://huggingface.co/datasets/biglam/biglam/european_art)

&lt;/details&gt;


&lt;details&gt;
  &lt;summary&gt;fill-mask&lt;/summary&gt;
    
  - [Berlin State Library OCR](https://huggingface.co/datasets/biglam/biglam/berlin_state_library_ocr)
  - [BnL Newspapers 1841-1879](https://huggingface.co/datasets/biglam/biglam/bnl_newspapers1841-1879)

&lt;/details&gt;


&lt;details&gt;
  &lt;summary&gt;text-to-image&lt;/summary&gt;
    
  - [Old Book Illustrations](https://huggingface.co/datasets/biglam/biglam/oldbookillustrations)

&lt;/details&gt;


&lt;details&gt;
  &lt;summary&gt;image-to-image&lt;/summary&gt;
    
  - [Old Book Illustrations](https://huggingface.co/datasets/biglam/biglam/oldbookillustrations)

&lt;/details&gt;


&lt;details&gt;
  &lt;summary&gt;token-classification&lt;/summary&gt;
    
  - [Unsilencing Colonial Archives via Automated Entity Recognition](https://huggingface.co/datasets/biglam/biglam/unsilence_voc)

&lt;/details&gt;
</code></pre>
</div>
</div>
<div id="cell-34" class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/tmp/README.md'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'w'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb26-2">    f.write(template.render(context))</span></code></pre></div>
</div>
</section>
<section id="updating-the-readme-on-the-hugging-face-hub" class="level2">
<h2 class="anchored" data-anchor-id="updating-the-readme-on-the-hugging-face-hub">Updating the README on the Hugging Face Hub</h2>
<p>This looks pretty good! It would be nice to also update the org README without having to manually edit the file. The <code>huggingface_hub</code> library helps us out here once again. Since the organization README is actually a special type of Hugging Face Space, we can interact with it in the same way we could for models or datasets.</p>
<div id="cell-37" class="cell">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> huggingface_hub <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> HfApi</span>
<span id="cb27-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> huggingface_hub <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> notebook_login</span></code></pre></div>
</div>
<p>We‚Äôll create a <code>HFApi</code> instance.</p>
<div id="cell-39" class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1">api <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> HfApi()</span></code></pre></div>
</div>
<p>Since we‚Äôre planning to write to a repo we‚Äôll need to login to the hub.</p>
<div id="cell-41" class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1">notebook_login()</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"40591d8ec7df49b0aacc1210b1f81af1","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
</div>
<p>We can now upload the rendered README file we created above to our <code>biglam/README</code> space.</p>
<div id="cell-43" class="cell">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1">api.upload_file(</span>
<span id="cb30-2">    path_or_fileobj<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/tmp/readme.md"</span>,</span>
<span id="cb30-3">    path_in_repo<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"README.md"</span>,</span>
<span id="cb30-4">    repo_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"biglam/README"</span>,</span>
<span id="cb30-5">    repo_type<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"space"</span>,</span>
<span id="cb30-6">)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="41">
<pre><code>'https://huggingface.co/spaces/biglam/README/blob/main/README.md'</code></pre>
</div>
</div>
<p>If we look at our updated README, we‚Äôll see we now have some nice collapsible sections for each task type containing the datasets for that task</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://danielvanstrien.xyz/posts/post-with-code/readme_auto_generate/after_readme.png" class="img-fluid figure-img"></p>
<figcaption>After README</figcaption>
</figure>
</div>
<p>Next steps, whilst this was already quite useful, at the moment we still have to run this code when we want to regenerate our README. <a href="https://huggingface.co/docs/hub/webhooks">Webhooks</a> make it possible to make this fully automated by creating a webhook that monitors any changes to repos under the BigLAM org. Would love to hear from anyone who tries this out!</p>


</section>

 ]]></description>
  <guid>https://danielvanstrien.xyz/posts/post-with-code/readme_auto_generate/2023-03-07-readme-template.html</guid>
  <pubDate>Tue, 07 Mar 2023 00:00:00 GMT</pubDate>
  <media:content url="https://danielvanstrien.xyz/posts/post-with-code/readme_auto_generate/preview.png" medium="image" type="image/png" height="62" width="144"/>
</item>
<item>
  <title>Using Hugging Face AutoTrain to train an image classifier without writing any code.</title>
  <link>https://danielvanstrien.xyz/posts/plain-text/autotrain/2023-02-22-autotrain.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>There are many potential uses of computer vision in GLAM (Galleries, Libraries, Archives and Museums). These uses include:</p>
<ul>
<li>image similarity search, i.e., given an image, find similar images</li>
<li>text search of images, i.e., given a text string ‚Äúa picture of a dog eating an ice cream,‚Äù return relevant images</li>
<li>page layout recognition, i.e., pull out semantically important parts of a document (articles, photos, titles, etc.)</li>
<li>Optical Character Recognition (OCR)</li>
</ul>
<p>All of these use cases require some technical work to implement or use. Usually, they need some programming knowledge too. However, there are many tasks in GLAM where computer vision could be helpful to, requiring less technical work to implement. In particular, many uses of computer vision can be framed as an image classification task (putting images into categories).</p>
<p>Last year, Kaspar Beelen, Melvin Wevers, Thomas Smits, Katherine McDonough, and I shared a two-part Programming Historian lesson, <a href="https://programminghistorian.org/en/lessons/computer-vision-deep-learning-pt1"><em>Computer Vision for the Humanities: An Introduction to Deep Learning for Image Classification</em></a>.</p>
<p>This lesson aimed to provide an introduction to how computer vision can be leveraged to work with images ‚Äòat scale‚Äô ‚Äì in particular for research applications. While we tried hard to make the lesson (particularly part one) accessible, there are still barriers to getting started:</p>
<ul>
<li>You need some Python knowledge: while we tried to keep the Python code simple (helped massively by the <a href="https://docs.fast.ai">fastai</a> library we use in the lesson), knowing how to code is still required. I couldn‚Äôt find a good citation for this, but most estimates for the number of people who know how to program are around 0.5-1% of the global population. Of this percentage, fewer will know Python.</li>
<li>Need to have access to a GPU: whilst you can train deep learning models (the type of machine learning model introduced in our Programming Historian tutorial), it is a lot slower without them. However, setting up access to a GPU can be annoying. While ‚Äòfree‚Äô access is possible, this can also come with constraints.</li>
<li>The costs involved in training deep learning models can be hard to predict. You can usually get started for free, but often at some point, you need to invest some money in cloud computing. However, it can be difficult to know <em>before</em> you start training a model(s) how much it will cost.</li>
</ul>
<p>Beyond this, there is also a bigger question of how much energy you might want to invest in all of the above stuff involved in getting machine learning set up. This is especially true if you don‚Äôt want to become a machine learning engineer and want to do something practical with machine learning.</p>
<section id="training-a-machine-learning-model-is-the-boring-part" class="level3">
<h3 class="anchored" data-anchor-id="training-a-machine-learning-model-is-the-boring-part">Training a machine learning model is the boring part</h3>
<p>Many machine learning engineers will grimace at the title of this section. However, many use cases of machine learning exist where an existing machine learning architecture will work well. Training a model is not what would benefit most from human intervention.</p>
<p>For novel applications of machine learning or situations where you want to ensure a model is well suited to your domain, you may need to spend time creating training data. After training your model, there is also a step where you need to decide how to integrate machine learning into existing or new workflows. This is partially a technical question but often involves considerations beyond how I set up an API to serve my model.</p>
<p>Hand-training models can eat up a lot of time. Sometimes this time might be warranted but other times you might wish you could make some of this process less hands-on.</p>
</section>
</section>
<section id="can-we-approach-this-in-another-way" class="level2">
<h2 class="anchored" data-anchor-id="can-we-approach-this-in-another-way">Can we approach this in another way?</h2>
<p><a href="https://huggingface.co/autotrain">AutoTrain</a> is a tool that allow us to train machine learning models without needing to use Python, setup compute infrastructure or deal with unpredictable costs for training our models. In the rest of this blog post we‚Äôll go through the steps to using AutoTrain for a semi-realistic computer vision problem.</p>
<section id="the-dataset" class="level3">
<h3 class="anchored" data-anchor-id="the-dataset">The dataset</h3>
<p>For this project we‚Äôll use a dataset created by the <a href="https://archive.org/">Internet Archive</a> as part of a request for help to judge a book by its cover. The <a href="http://blog.archive.org/2019/01/05/helping-us-judge-a-book-by-its-cover-software-help-request/">blog post</a> presents a use case for wanting to know if an image of a book cover is ‚Äòuseful‚Äô or ‚Äònot useful‚Äô. They provide some examples</p>
<p>Useful image example:</p>
<p><img src="https://blog.archive.org/wp-content/uploads/2019/01/bigbookofknowled0000farn-802x1024.jpg%22" class="img-fluid" alt="A picture of a the front cover of a book with rocks, and dinosaurs"> Not useful image example:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="http://blog.archive.org/wp-content/uploads/2019/01/10sermonspreache00donnuoft-626x1024.jpg" class="img-fluid figure-img"></p>
<figcaption>A picture of a the front cover of a book which is blank</figcaption>
</figure>
</div>
<p>Essentially the task is to decide whether an image of a digitized book cover is ‚Äòuseful‚Äô or ‚Äònot useful,‚Äô i.e.&nbsp;whether showing this cover to Internet Archive users would give them useful information or not. The Internet Archive shared a <a href="https://archive.org/details/year-1923-not-very-useful-covers">dataset</a> along with this blog post which contains examples for each category.</p>
<section id="what-type-of-machine-learning-task-is-this" class="level4">
<h4 class="anchored" data-anchor-id="what-type-of-machine-learning-task-is-this">What type of machine learning task is this?</h4>
<p>If we look at the dataset shared by the Internet Archive, we have a directory structure that looks like this:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">.</span></span>
<span id="cb1-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îú‚îÄ‚îÄ</span> year-1923-not-very-useful-covers</span>
<span id="cb1-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îî‚îÄ‚îÄ</span> year-1923-useful-covers</span></code></pre></div>
<p>We have two folders containing images. Each folder contains examples of image belonging to the name of each folder. Essentially, we want a model that learns which image belongs in each folder (based on the examples) and can put new images into the correct folder/category. This is known as an image classification task (as was mentioned in the introduction). The Hugging Face tasks page for this gives an excellent overview: <a href="https://huggingface.co/tasks/image-classification">https://huggingface.co/tasks/image-classification</a></p>
</section>
</section>
<section id="what-are-the-steps-involved" class="level3">
<h3 class="anchored" data-anchor-id="what-are-the-steps-involved">What are the steps involved?</h3>
<p>How do we go from the dataset we started with to a trained model that we can begin to explore? For this particular example, the steps are as follows:</p>
<ul>
<li>Download our data</li>
<li>Prepare our data</li>
<li>choose our autotrain task</li>
<li>Upload our data to autotrain</li>
<li>Train our models</li>
<li>Evaluate our models</li>
</ul>
</section>
<section id="download-our-data" class="level3">
<h3 class="anchored" data-anchor-id="download-our-data">Download our data</h3>
<p>This step will depend on where your data is and how it‚Äôs arranged, but in this example, we can download the dataset from the Internet Archive. Three folders are provided in this case covering useful/not-useful for 1923 and for the year 2000 useful. Since the types of cover will have changed a fair bit in this time period we‚Äôll just download the folders for 1923.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://raw.githubusercontent.com/davanstrien/blog/master/images/_autotrain/ia_download_files.webp" class="img-fluid figure-img"></p>
<figcaption>Screenshot of IA downloads</figcaption>
</figure>
</div>
</section>
<section id="preparing-our-data" class="level3">
<h3 class="anchored" data-anchor-id="preparing-our-data">Preparing our data</h3>
<p>There isn‚Äôt much prep we need to do for our data; however, we can provide data to AutoTrain in a few different ways for our image classification task. In this case we‚Äôll use the imagefolder format. This is essentially what we have already (folders containing examples of the labels we‚Äôre interested in). We‚Äôll create a top-level directory for our image data <code>cover</code>, which contains two subfolders with our example images.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://github.com/davanstrien/blog/blob/master/images/_autotrain/folders-screenshot.webp?raw=true" class="img-fluid figure-img"></p>
<figcaption>Folder screenshot</figcaption>
</figure>
</div>
<section id="resize-our-images-optional" class="level4">
<h4 class="anchored" data-anchor-id="resize-our-images-optional">Resize our images (optional)</h4>
<p>This step isn‚Äôt strictly necessary, but it‚Äôll save time when uploading our dataset to AutoTrain. Most machine learning models expect training images to be relatively small (often 224x224 or 512x512 pixels). You can do this from the command line, but most operating systems have inbuilt tools for bulk resizing images, e.g., <a href="https://www.makeuseof.com/tag/batch-convert-resize-images-mac/">https://www.makeuseof.com/tag/batch-convert-resize-images-mac/</a></p>
</section>
</section>
<section id="setup-autotrain" class="level3">
<h3 class="anchored" data-anchor-id="setup-autotrain">Setup AutoTrain</h3>
<p>From the <a href="https://ui.autotrain.huggingface.co/projects">projects page</a>, we can create a new project.</p>
<p><img src="https://github.com/davanstrien/blog/blob/master/images/_autotrain/project-creation.webp?raw=true" class="img-fluid"></p>
<p>Here we give our project a name and choose a task (image classification). We can also specify for AutoTrain to use a particular model. If you don‚Äôt have a solid reason to select a model you can leave this decision to AutoTrain ü§ó.</p>
<p>Once you‚Äôve created your project, you‚Äôll need to upload your data. There are different ways of doing this depending on the task. For image classification, we can use pre-arranged folders with a CSV/JSONL file with the labels or upload a dataset hosted on the Hugging Face hub.</p>
<p><img src="https://github.com/davanstrien/blog/blob/master/images/_autotrain/data-upload.webp?raw=true" class="img-fluid"></p>
<p>We already have an organized folder so we can upload data.</p>
<p><img src="https://raw.githubusercontent.com/davanstrien/blog/master/images/_autotrain/data-upload-finder.webp" class="img-fluid"></p>
<p>Once we‚Äôve uploaded our images, we‚Äôll need to wait for the data to be uploaded. How long this takes depends on your internet speed. We can now click on <code>Go to trainings</code>.</p>
<p><img src="https://github.com/davanstrien/blog/blob/master/images/_autotrain/congratulations.webp?raw=true" class="img-fluid"></p>
<p>Here you will see that AutoTrain is formatting your uploaded data.</p>
<p><img src="https://github.com/davanstrien/blog/blob/master/images/_autotrain/data-prep.webp?raw=true" class="img-fluid"></p>
<p>Once your data has been prepared, you can decide how many models you want AutoTrain to train for you. This decision depends on how much you want to spend on training your models and where you are in your project. If you are getting started and want to know how well a model may do, you may choose a lower number. If you want the best possible chance of getting the best-performing model, you could choose to train a more significant number of models.</p>
<p><img src="https://github.com/davanstrien/blog/blob/master/images/_autotrain/model-training-selection.webp?raw=true" class="img-fluid"></p>
<p>Once you are ready, you can smash the <code>start model training</code> button!üî• The nice thing is that AutoTrain will ask you to confirm how much model training will cost. Once your models start training, a screen pops up with some randomly named models. Depending on the size of your dataset, it might take a bit longer to start seeing metrics for your model, but after a little while, you will begin to see scores (in this case, accuracy).</p>
<p><img src="https://github.com/davanstrien/blog/blob/master/images/_autotrain/model-training-progress.webp?raw=true" class="img-fluid"></p>
<p>As the models train, you will see some models overtake others in performance. If you are easily amused like me, you will treat this like a fun spectator sport.</p>
<p><img src="https://github.com/davanstrien/blog/blob/master/images/_autotrain/model-training-progress-race.webp?raw=true" class="img-fluid"></p>
<p>You also have a metrics overview tab for all the models you have trained. This makes it easy to sort by different metrics.</p>
<p><img src="https://github.com/davanstrien/blog/blob/master/images/_autotrain/metrics-overview.webp?raw=true" class="img-fluid"></p>
<p>Each of these models created by AutoTrain is a ‚Äòreal‚Äô model hosted in a model repository on the Hugging Face hub. Some AutoTrain solutions hide away the actual artifacts and only allow you to interact with the models through their API. These models are available in the same way as any other model on the hub. By default, the models are made private, but you can decide to make the models openly available for others to use ü§ó.</p>
<p>You‚Äôll also see in the screenshot that the models come with the outlines of a model card.</p>
<p><img src="https://raw.githubusercontent.com/davanstrien/blog/master/images/_autotrain/metrics-overview.webp" class="img-fluid"></p>
</section>
</section>
<section id="why-does-our-model-suck" class="level2">
<h2 class="anchored" data-anchor-id="why-does-our-model-suck">Why does our model suck?</h2>
<p>For this particular dataset, our models don‚Äôt do super well (around 92% accuracy). Why is this?</p>
<section id="the-importance-of-training-data" class="level3">
<h3 class="anchored" data-anchor-id="the-importance-of-training-data">The importance of training data</h3>
<p>Start to dig into the training data examples provided. You‚Äôll see that quite a few images might be reasonably classified as belonging to the other category. In particular, quite a few images of the not-useful folder are similar to those in the useful folder. This is going to make it hard for our model to learn what we‚Äôre after.</p>
<p>This also shows the importance of focusing on data and not over-focusing on model training. In this case, fixing our data will likely yield much better results than messing around with how we train the models. Using a tool like AutoTrain can quickly help you spot these issues early on so you can iterate on your training data.</p>
</section>
<section id="how-can-we-fix-this" class="level3">
<h3 class="anchored" data-anchor-id="how-can-we-fix-this">How can we fix this??</h3>
<p>Move images between folders!!</p>
<p>There are better ways, but spending 30 mins removing examples you don‚Äôt think the fit will make a big difference to the model performance. At some point, you are likely to want to use a proper annotation tool but to start with; you might be able to get quite far by using your operating systems file browser to re-arrange your training data.</p>
<p>Below is an example from another similar dataset where we get models with 99% accuracy. All of this without writing a line of code! <img src="https://github.com/davanstrien/blog/blob/master/images/_autotrain/illustrations-model-overview.webp?raw=true" class="img-fluid"></p>
</section>
</section>
<section id="what-can-i-do-with-this-model" class="level2">
<h2 class="anchored" data-anchor-id="what-can-i-do-with-this-model">What can I do with this model?</h2>
<p>There are various ways in which you can use the model you‚Äôve created. How you want to use it depends largely on your use case. In a follow-up blog post I‚Äôll suggest a few options for how you can continue on the no/low-code journey to creating and using ML tools customised to your needs and data ü§ó.</p>
<section id="show-me-the-models" class="level3">
<h3 class="anchored" data-anchor-id="show-me-the-models">Show me the models!</h3>
<p>You can find the best models shown above here:</p>
<ul>
<li><a href="">https://huggingface.co/davanstrien/autotrain-ia-useful-covers-3665397856</a></li>
<li><a href="">https://huggingface.co/davanstrien/autotrain-encyclopaedia-illustrations-blog-post-3327992158</a></li>
</ul>


</section>
</section>

 ]]></description>
  <category>autotrain</category>
  <guid>https://danielvanstrien.xyz/posts/plain-text/autotrain/2023-02-22-autotrain.html</guid>
  <pubDate>Wed, 22 Feb 2023 00:00:00 GMT</pubDate>
  <media:content url="https://danielvanstrien.xyz/posts/plain-text/autotrain/autotrain-image.webp" medium="image" type="image/webp"/>
</item>
<item>
  <title>A (very brief) intro to exploring metadata on the Hugging Face Hub</title>
  <dc:creator>Daniel van Strien</dc:creator>
  <link>https://danielvanstrien.xyz/posts/post-with-code/metadata-explore/2023_01_16_hub_api_explore copy.html</link>
  <description><![CDATA[ 




<p>The Hugging Face Hub has become the de facto place to share machine learning models and datasets. As the number of models and datasets grow the challenge of finding the right model or dataset for your needs may become more challenging. There are various ways in which we can try and make it easier for people to find relevant models and datasets. One of these is by associating metadata with datasets and models. This blog post will (very briefly) begin to explore metadata on the Hugging Face Hub. Often you‚Äôll want to explore models and datasets via the Hub website but this isn‚Äôt the only way to explore the Hub. As part of the process of exploring metadata on the Hugging Face Hub we‚Äôll briefly look at how we can use the <code>huggingface_hub</code> library to programmatically interact with the Hub.</p>
<section id="library-imports" class="level2">
<h2 class="anchored" data-anchor-id="library-imports">Library imports</h2>
<p>For this post we‚Äôll need a few libraries, <code>pandas</code>, <code>requests</code> and <code>matplotlib</code> are likely old friends (or foes‚Ä¶). The <code>huggingface_hub</code> library might be new to you but will soon become a good friend too! The <code>rich</code> library is fantastically useful for quickly getting familiar with a library (i.e.&nbsp;avoiding reading all the docs!) so we‚Äôll import that too.</p>
<div id="cell-4" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> requests</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> huggingface_hub <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> hf_api</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> rich</span></code></pre></div>
</div>
<div id="cell-5" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>matplotlib inline</span>
<span id="cb2-2">plt.style.use(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ggplot"</span>)</span></code></pre></div>
</div>
<p>We‚Äôll instantiate an instance of the <code>HfApi</code> class.</p>
<div id="cell-7" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">api <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hf_api.HfApi()</span></code></pre></div>
</div>
<p>We can use <code>rich</code> <code>inspect</code> to get a better sense of what a function or class instance is all about. Let‚Äôs see what methods the api has.</p>
<div id="cell-9" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">rich.inspect(api, methods<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #000080; text-decoration-color: #000080">‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ </span><span style="color: #000080; text-decoration-color: #000080; font-weight: bold">&lt;</span><span style="color: #ff00ff; text-decoration-color: #ff00ff; font-weight: bold">class</span><span style="color: #000000; text-decoration-color: #000000"> </span><span style="color: #008000; text-decoration-color: #008000">'huggingface_hub.hf_api.HfApi'</span><span style="color: #000080; text-decoration-color: #000080; font-weight: bold">&gt;</span><span style="color: #000080; text-decoration-color: #000080"> ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span> <span style="color: #008000; text-decoration-color: #008000">‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ</span> <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span> <span style="color: #008000; text-decoration-color: #008000">‚îÇ</span> <span style="font-weight: bold">&lt;</span><span style="color: #ff00ff; text-decoration-color: #ff00ff; font-weight: bold">huggingface_hub.hf_api.HfApi</span><span style="color: #000000; text-decoration-color: #000000"> object at </span><span style="color: #008080; text-decoration-color: #008080; font-weight: bold">0x136a2ce80</span><span style="font-weight: bold">&gt;</span>                                                        <span style="color: #008000; text-decoration-color: #008000">‚îÇ</span> <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span> <span style="color: #008000; text-decoration-color: #008000">‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ</span> <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                                                                                                                 <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                 <span style="color: #808000; text-decoration-color: #808000; font-style: italic">endpoint</span> = <span style="color: #008000; text-decoration-color: #008000">'https://huggingface.co'</span>                                                             <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                    <span style="color: #808000; text-decoration-color: #808000; font-style: italic">token</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>                                                                                 <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span> <span style="color: #808000; text-decoration-color: #808000; font-style: italic">change_discussion_status</span> = <span style="color: #00ffff; text-decoration-color: #00ffff; font-style: italic">def </span><span style="color: #800000; text-decoration-color: #800000; font-weight: bold">change_discussion_status</span><span style="font-weight: bold">(</span>repo_id: str, discussion_num: int, new_status:          <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                            Literal<span style="font-weight: bold">[</span><span style="color: #008000; text-decoration-color: #008000">'open'</span>, <span style="color: #008000; text-decoration-color: #008000">'closed'</span><span style="font-weight: bold">]</span>, *, token: Optional<span style="font-weight: bold">[</span>str<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>, comment: Optional<span style="font-weight: bold">[</span>str<span style="font-weight: bold">]</span> =  <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                            <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>, repo_type: Optional<span style="font-weight: bold">[</span>str<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span><span style="font-weight: bold">)</span> -&gt;                                            <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                            huggingface_hub.community.DiscussionStatusChange: <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">Closes or re-opens a Discussion or</span> <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                            <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">Pull Request.</span>                                                                        <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>       <span style="color: #808000; text-decoration-color: #808000; font-style: italic">comment_discussion</span> = <span style="color: #00ffff; text-decoration-color: #00ffff; font-style: italic">def </span><span style="color: #800000; text-decoration-color: #800000; font-weight: bold">comment_discussion</span><span style="font-weight: bold">(</span>repo_id: str, discussion_num: int, comment: str, *, token:    <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                            Optional<span style="font-weight: bold">[</span>str<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>, repo_type: Optional<span style="font-weight: bold">[</span>str<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span><span style="font-weight: bold">)</span> -&gt;                            <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                            huggingface_hub.community.DiscussionComment: <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">Creates a new comment on the given </span>     <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                            <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">Discussion.</span>                                                                          <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>            <span style="color: #808000; text-decoration-color: #808000; font-style: italic">create_branch</span> = <span style="color: #00ffff; text-decoration-color: #00ffff; font-style: italic">def </span><span style="color: #800000; text-decoration-color: #800000; font-weight: bold">create_branch</span><span style="font-weight: bold">(</span>repo_id: str, *, branch: str, token: Optional<span style="font-weight: bold">[</span>str<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>,         <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                            repo_type: Optional<span style="font-weight: bold">[</span>str<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span><span style="font-weight: bold">)</span> -&gt; <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>: <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">Create a new branch from `main` on a repo </span> <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                            <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">on the Hub.</span>                                                                          <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>            <span style="color: #808000; text-decoration-color: #808000; font-style: italic">create_commit</span> = <span style="color: #00ffff; text-decoration-color: #00ffff; font-style: italic">def </span><span style="color: #800000; text-decoration-color: #800000; font-weight: bold">create_commit</span><span style="font-weight: bold">(</span>repo_id: str, operations:                                          <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                            Iterable<span style="font-weight: bold">[</span>Union<span style="font-weight: bold">[</span>huggingface_hub._commit_api.CommitOperationAdd,                       <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                            huggingface_hub._commit_api.CommitOperationDelete<span style="font-weight: bold">]]</span>, *, commit_message: str,         <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                            commit_description: Optional<span style="font-weight: bold">[</span>str<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>, token: Optional<span style="font-weight: bold">[</span>str<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>, repo_type:    <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                            Optional<span style="font-weight: bold">[</span>str<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>, revision: Optional<span style="font-weight: bold">[</span>str<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>, create_pr: Optional<span style="font-weight: bold">[</span>bool<span style="font-weight: bold">]</span> =    <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                            <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>, num_threads: int = <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">5</span>, parent_commit: Optional<span style="font-weight: bold">[</span>str<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span><span style="font-weight: bold">)</span> -&gt;                  <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                            huggingface_hub.hf_api.CommitInfo: <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">Creates a commit in the given repo, deleting &amp; </span>   <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                            <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">uploading files as needed.</span>                                                           <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>        <span style="color: #808000; text-decoration-color: #808000; font-style: italic">create_discussion</span> = <span style="color: #00ffff; text-decoration-color: #00ffff; font-style: italic">def </span><span style="color: #800000; text-decoration-color: #800000; font-weight: bold">create_discussion</span><span style="font-weight: bold">(</span>repo_id: str, title: str, *, token: Optional<span style="font-weight: bold">[</span>str<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>,      <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                            description: Optional<span style="font-weight: bold">[</span>str<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>, repo_type: Optional<span style="font-weight: bold">[</span>str<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>, pull_request:    <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                            bool = <span style="color: #ff0000; text-decoration-color: #ff0000; font-style: italic">False</span><span style="font-weight: bold">)</span> -&gt; huggingface_hub.community.DiscussionWithDetails: <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">Creates a </span>         <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                            <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">Discussion or Pull Request.</span>                                                          <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>      <span style="color: #808000; text-decoration-color: #808000; font-style: italic">create_pull_request</span> = <span style="color: #00ffff; text-decoration-color: #00ffff; font-style: italic">def </span><span style="color: #800000; text-decoration-color: #800000; font-weight: bold">create_pull_request</span><span style="font-weight: bold">(</span>repo_id: str, title: str, *, token: Optional<span style="font-weight: bold">[</span>str<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>,    <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                            description: Optional<span style="font-weight: bold">[</span>str<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>, repo_type: Optional<span style="font-weight: bold">[</span>str<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span><span style="font-weight: bold">)</span> -&gt;               <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                            huggingface_hub.community.DiscussionWithDetails: <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">Creates a Pull Request . Pull </span>      <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                            <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">Requests created programmatically will be in `</span><span style="color: #7fbf7f; text-decoration-color: #7fbf7f">"draft"</span><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">` status.</span>                       <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>              <span style="color: #808000; text-decoration-color: #808000; font-style: italic">create_repo</span> = <span style="color: #00ffff; text-decoration-color: #00ffff; font-style: italic">def </span><span style="color: #800000; text-decoration-color: #800000; font-weight: bold">create_repo</span><span style="font-weight: bold">(</span>repo_id: str, *, token: Optional<span style="font-weight: bold">[</span>str<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>, private: bool = <span style="color: #ff0000; text-decoration-color: #ff0000; font-style: italic">False</span>, <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                            repo_type: Optional<span style="font-weight: bold">[</span>str<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>, exist_ok: bool = <span style="color: #ff0000; text-decoration-color: #ff0000; font-style: italic">False</span>, space_sdk: Optional<span style="font-weight: bold">[</span>str<span style="font-weight: bold">]</span> =  <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                            <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span><span style="font-weight: bold">)</span> -&gt; str: <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">Create an empty repo on the HuggingFace Hub.</span>                           <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>               <span style="color: #808000; text-decoration-color: #808000; font-style: italic">create_tag</span> = <span style="color: #00ffff; text-decoration-color: #00ffff; font-style: italic">def </span><span style="color: #800000; text-decoration-color: #800000; font-weight: bold">create_tag</span><span style="font-weight: bold">(</span>repo_id: str, *, tag: str, tag_message: Optional<span style="font-weight: bold">[</span>str<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>,         <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                            revision: Optional<span style="font-weight: bold">[</span>str<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>, token: Optional<span style="font-weight: bold">[</span>str<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>, repo_type:              <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                            Optional<span style="font-weight: bold">[</span>str<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span><span style="font-weight: bold">)</span> -&gt; <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>: <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">Tag a given commit of a repo on the Hub.</span>              <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>             <span style="color: #808000; text-decoration-color: #808000; font-style: italic">dataset_info</span> = <span style="color: #00ffff; text-decoration-color: #00ffff; font-style: italic">def </span><span style="color: #800000; text-decoration-color: #800000; font-weight: bold">dataset_info</span><span style="font-weight: bold">(</span>repo_id: str, *, revision: Optional<span style="font-weight: bold">[</span>str<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>, timeout:           <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                            Optional<span style="font-weight: bold">[</span>float<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>, files_metadata: bool = <span style="color: #ff0000; text-decoration-color: #ff0000; font-style: italic">False</span>, token: Union<span style="font-weight: bold">[</span>bool, str,        <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                            NoneType<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span><span style="font-weight: bold">)</span> -&gt; huggingface_hub.hf_api.DatasetInfo: <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">Get info on one specific </span>   <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                            <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">dataset on huggingface.co.</span>                                                           <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>            <span style="color: #808000; text-decoration-color: #808000; font-style: italic">delete_branch</span> = <span style="color: #00ffff; text-decoration-color: #00ffff; font-style: italic">def </span><span style="color: #800000; text-decoration-color: #800000; font-weight: bold">delete_branch</span><span style="font-weight: bold">(</span>repo_id: str, *, branch: str, token: Optional<span style="font-weight: bold">[</span>str<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>,         <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                            repo_type: Optional<span style="font-weight: bold">[</span>str<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span><span style="font-weight: bold">)</span> -&gt; <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>: <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">Delete a branch from a repo on the Hub.</span>    <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>              <span style="color: #808000; text-decoration-color: #808000; font-style: italic">delete_file</span> = <span style="color: #00ffff; text-decoration-color: #00ffff; font-style: italic">def </span><span style="color: #800000; text-decoration-color: #800000; font-weight: bold">delete_file</span><span style="font-weight: bold">(</span>path_in_repo: str, repo_id: str, *, token: Optional<span style="font-weight: bold">[</span>str<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>,     <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                            repo_type: Optional<span style="font-weight: bold">[</span>str<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>, revision: Optional<span style="font-weight: bold">[</span>str<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>, commit_message:     <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                            Optional<span style="font-weight: bold">[</span>str<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>, commit_description: Optional<span style="font-weight: bold">[</span>str<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>, create_pr:           <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                            Optional<span style="font-weight: bold">[</span>bool<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>, parent_commit: Optional<span style="font-weight: bold">[</span>str<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span><span style="font-weight: bold">)</span> -&gt;                       <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                            huggingface_hub.hf_api.CommitInfo: <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">Deletes a file in the given repo.</span>                 <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>            <span style="color: #808000; text-decoration-color: #808000; font-style: italic">delete_folder</span> = <span style="color: #00ffff; text-decoration-color: #00ffff; font-style: italic">def </span><span style="color: #800000; text-decoration-color: #800000; font-weight: bold">delete_folder</span><span style="font-weight: bold">(</span>path_in_repo: str, repo_id: str, *, token: Optional<span style="font-weight: bold">[</span>str<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>,   <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                            repo_type: Optional<span style="font-weight: bold">[</span>str<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>, revision: Optional<span style="font-weight: bold">[</span>str<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>, commit_message:     <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                            Optional<span style="font-weight: bold">[</span>str<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>, commit_description: Optional<span style="font-weight: bold">[</span>str<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>, create_pr:           <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                            Optional<span style="font-weight: bold">[</span>bool<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>, parent_commit: Optional<span style="font-weight: bold">[</span>str<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span><span style="font-weight: bold">)</span> -&gt;                       <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                            huggingface_hub.hf_api.CommitInfo: <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">Deletes a folder in the given repo.</span>               <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>              <span style="color: #808000; text-decoration-color: #808000; font-style: italic">delete_repo</span> = <span style="color: #00ffff; text-decoration-color: #00ffff; font-style: italic">def </span><span style="color: #800000; text-decoration-color: #800000; font-weight: bold">delete_repo</span><span style="font-weight: bold">(</span>repo_id: str, *, token: Optional<span style="font-weight: bold">[</span>str<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>, repo_type:             <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                            Optional<span style="font-weight: bold">[</span>str<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span><span style="font-weight: bold">)</span>: <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">Delete a repo from the HuggingFace Hub. CAUTION: this is </span>     <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                            <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">irreversible.</span>                                                                        <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>               <span style="color: #808000; text-decoration-color: #808000; font-style: italic">delete_tag</span> = <span style="color: #00ffff; text-decoration-color: #00ffff; font-style: italic">def </span><span style="color: #800000; text-decoration-color: #800000; font-weight: bold">delete_tag</span><span style="font-weight: bold">(</span>repo_id: str, *, tag: str, token: Optional<span style="font-weight: bold">[</span>str<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>, repo_type:    <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                            Optional<span style="font-weight: bold">[</span>str<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span><span style="font-weight: bold">)</span> -&gt; <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>: <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">Delete a tag from a repo on the Hub.</span>                  <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>  <span style="color: #808000; text-decoration-color: #808000; font-style: italic">edit_discussion_comment</span> = <span style="color: #00ffff; text-decoration-color: #00ffff; font-style: italic">def </span><span style="color: #800000; text-decoration-color: #800000; font-weight: bold">edit_discussion_comment</span><span style="font-weight: bold">(</span>repo_id: str, discussion_num: int, comment_id: str,      <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                            new_content: str, *, token: Optional<span style="font-weight: bold">[</span>str<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>, repo_type: Optional<span style="font-weight: bold">[</span>str<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span><span style="font-weight: bold">)</span>   <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                            -&gt; huggingface_hub.community.DiscussionComment: <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">Edits a comment on a Discussion </span><span style="color: #bf7fbf; text-decoration-color: #bf7fbf">/</span><span style="color: #7f7f7f; text-decoration-color: #7f7f7f"> </span>   <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                            <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">Pull Request.</span>                                                                        <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>         <span style="color: #808000; text-decoration-color: #808000; font-style: italic">get_dataset_tags</span> = <span style="color: #00ffff; text-decoration-color: #00ffff; font-style: italic">def </span><span style="color: #800000; text-decoration-color: #800000; font-weight: bold">get_dataset_tags</span><span style="font-weight: bold">()</span> -&gt; huggingface_hub.utils.endpoint_helpers.DatasetTags: <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">Gets </span>  <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                            <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">all valid dataset tags as a nested namespace object.</span>                                 <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>   <span style="color: #808000; text-decoration-color: #808000; font-style: italic">get_discussion_details</span> = <span style="color: #00ffff; text-decoration-color: #00ffff; font-style: italic">def </span><span style="color: #800000; text-decoration-color: #800000; font-weight: bold">get_discussion_details</span><span style="font-weight: bold">(</span>repo_id: str, discussion_num: int, *, repo_type:          <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                            Optional<span style="font-weight: bold">[</span>str<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>, token: Optional<span style="font-weight: bold">[</span>str<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span><span style="font-weight: bold">)</span> -&gt;                                <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                            huggingface_hub.community.DiscussionWithDetails: <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">Fetches a Discussion's </span><span style="color: #bf7fbf; text-decoration-color: #bf7fbf">/</span><span style="color: #7f7f7f; text-decoration-color: #7f7f7f"> Pull </span>      <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                            <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">Request 's details from the Hub.</span>                                                     <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>       <span style="color: #808000; text-decoration-color: #808000; font-style: italic">get_full_repo_name</span> = <span style="color: #00ffff; text-decoration-color: #00ffff; font-style: italic">def </span><span style="color: #800000; text-decoration-color: #800000; font-weight: bold">get_full_repo_name</span><span style="font-weight: bold">(</span>model_id: str, *, organization: Optional<span style="font-weight: bold">[</span>str<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>, token:  <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                            Union<span style="font-weight: bold">[</span>bool, str, NoneType<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span><span style="font-weight: bold">)</span>:                                                  <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                            <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">Returns the repository name for a given model ID and optional</span>                        <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                            <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">organization.</span>                                                                        <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>           <span style="color: #808000; text-decoration-color: #808000; font-style: italic">get_model_tags</span> = <span style="color: #00ffff; text-decoration-color: #00ffff; font-style: italic">def </span><span style="color: #800000; text-decoration-color: #800000; font-weight: bold">get_model_tags</span><span style="font-weight: bold">()</span> -&gt; huggingface_hub.utils.endpoint_helpers.ModelTags: <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">Gets all </span>  <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                            <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">valid model tags as a nested namespace object</span>                                        <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>     <span style="color: #808000; text-decoration-color: #808000; font-style: italic">get_repo_discussions</span> = <span style="color: #00ffff; text-decoration-color: #00ffff; font-style: italic">def </span><span style="color: #800000; text-decoration-color: #800000; font-weight: bold">get_repo_discussions</span><span style="font-weight: bold">(</span>repo_id: str, *, repo_type: Optional<span style="font-weight: bold">[</span>str<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>, token:    <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                            Optional<span style="font-weight: bold">[</span>str<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span><span style="font-weight: bold">)</span> -&gt; Iterator<span style="font-weight: bold">[</span>huggingface_hub.community.Discussion<span style="font-weight: bold">]</span>: <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">Fetches </span>    <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                            <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">Discussions and Pull Requests for the given repo.</span>                                    <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>  <span style="color: #808000; text-decoration-color: #808000; font-style: italic">hide_discussion_comment</span> = <span style="color: #00ffff; text-decoration-color: #00ffff; font-style: italic">def </span><span style="color: #800000; text-decoration-color: #800000; font-weight: bold">hide_discussion_comment</span><span style="font-weight: bold">(</span>repo_id: str, discussion_num: int, comment_id: str, *,   <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                            token: Optional<span style="font-weight: bold">[</span>str<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>, repo_type: Optional<span style="font-weight: bold">[</span>str<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span><span style="font-weight: bold">)</span> -&gt;                     <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                            huggingface_hub.community.DiscussionComment: <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">Hides a comment on a Discussion </span><span style="color: #bf7fbf; text-decoration-color: #bf7fbf">/</span><span style="color: #7f7f7f; text-decoration-color: #7f7f7f"> Pull </span> <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                            <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">Request.</span>                                                                             <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>            <span style="color: #808000; text-decoration-color: #808000; font-style: italic">list_datasets</span> = <span style="color: #00ffff; text-decoration-color: #00ffff; font-style: italic">def </span><span style="color: #800000; text-decoration-color: #800000; font-weight: bold">list_datasets</span><span style="font-weight: bold">(</span>*, filter:                                                         <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                            Union<span style="font-weight: bold">[</span>huggingface_hub.utils.endpoint_helpers.DatasetFilter, str, Iterable<span style="font-weight: bold">[</span>str<span style="font-weight: bold">]</span>,      <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                            NoneType<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>, author: Optional<span style="font-weight: bold">[</span>str<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>, search: Optional<span style="font-weight: bold">[</span>str<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>, sort:  <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                            Union<span style="font-weight: bold">[</span>Literal<span style="font-weight: bold">[</span><span style="color: #008000; text-decoration-color: #008000">'lastModified'</span><span style="font-weight: bold">]</span>, str, NoneType<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>, direction:                     <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                            Optional<span style="font-weight: bold">[</span>Literal<span style="font-weight: bold">[</span><span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-1</span><span style="font-weight: bold">]]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>, limit: Optional<span style="font-weight: bold">[</span>int<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>, cardData: Optional<span style="font-weight: bold">[</span>bool<span style="font-weight: bold">]</span>  <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                            = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>, full: Optional<span style="font-weight: bold">[</span>bool<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>, token: Optional<span style="font-weight: bold">[</span>str<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span><span style="font-weight: bold">)</span> -&gt;                 <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                            List<span style="font-weight: bold">[</span>huggingface_hub.hf_api.DatasetInfo<span style="font-weight: bold">]</span>: <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">Get the list of all the datasets on </span>       <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                            <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">huggingface.co</span>                                                                       <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>             <span style="color: #808000; text-decoration-color: #808000; font-style: italic">list_metrics</span> = <span style="color: #00ffff; text-decoration-color: #00ffff; font-style: italic">def </span><span style="color: #800000; text-decoration-color: #800000; font-weight: bold">list_metrics</span><span style="font-weight: bold">()</span> -&gt; List<span style="font-weight: bold">[</span>huggingface_hub.hf_api.MetricInfo<span style="font-weight: bold">]</span>: <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">Get the public list </span>  <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                            <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">of all the metrics on huggingface.co</span>                                                 <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>              <span style="color: #808000; text-decoration-color: #808000; font-style: italic">list_models</span> = <span style="color: #00ffff; text-decoration-color: #00ffff; font-style: italic">def </span><span style="color: #800000; text-decoration-color: #800000; font-weight: bold">list_models</span><span style="font-weight: bold">(</span>*, filter: Union<span style="font-weight: bold">[</span>huggingface_hub.utils.endpoint_helpers.ModelFilter, <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                            str, Iterable<span style="font-weight: bold">[</span>str<span style="font-weight: bold">]</span>, NoneType<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>, author: Optional<span style="font-weight: bold">[</span>str<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>, search:          <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                            Optional<span style="font-weight: bold">[</span>str<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>, emissions_thresholds: Optional<span style="font-weight: bold">[</span>Tuple<span style="font-weight: bold">[</span>float, float<span style="font-weight: bold">]]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>,    <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                            sort: Union<span style="font-weight: bold">[</span>Literal<span style="font-weight: bold">[</span><span style="color: #008000; text-decoration-color: #008000">'lastModified'</span><span style="font-weight: bold">]</span>, str, NoneType<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>, direction:               <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                            Optional<span style="font-weight: bold">[</span>Literal<span style="font-weight: bold">[</span><span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-1</span><span style="font-weight: bold">]]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>, limit: Optional<span style="font-weight: bold">[</span>int<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>, full: Optional<span style="font-weight: bold">[</span>bool<span style="font-weight: bold">]</span> =    <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                            <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>, cardData: bool = <span style="color: #ff0000; text-decoration-color: #ff0000; font-style: italic">False</span>, fetch_config: bool = <span style="color: #ff0000; text-decoration-color: #ff0000; font-style: italic">False</span>, token: Union<span style="font-weight: bold">[</span>bool, str,    <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                            NoneType<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span><span style="font-weight: bold">)</span> -&gt; List<span style="font-weight: bold">[</span>huggingface_hub.hf_api.ModelInfo<span style="font-weight: bold">]</span>: <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">Get the list of all the</span> <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                            <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">models on huggingface.co</span>                                                             <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>          <span style="color: #808000; text-decoration-color: #808000; font-style: italic">list_repo_files</span> = <span style="color: #00ffff; text-decoration-color: #00ffff; font-style: italic">def </span><span style="color: #800000; text-decoration-color: #800000; font-weight: bold">list_repo_files</span><span style="font-weight: bold">(</span>repo_id: str, *, revision: Optional<span style="font-weight: bold">[</span>str<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>, repo_type:      <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                            Optional<span style="font-weight: bold">[</span>str<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>, timeout: Optional<span style="font-weight: bold">[</span>float<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>, token: Union<span style="font-weight: bold">[</span>bool, str,       <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                            NoneType<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span><span style="font-weight: bold">)</span> -&gt; List<span style="font-weight: bold">[</span>str<span style="font-weight: bold">]</span>: <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">Get the list of files in a given repo.</span>               <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>              <span style="color: #808000; text-decoration-color: #808000; font-style: italic">list_spaces</span> = <span style="color: #00ffff; text-decoration-color: #00ffff; font-style: italic">def </span><span style="color: #800000; text-decoration-color: #800000; font-weight: bold">list_spaces</span><span style="font-weight: bold">(</span>*, filter: Union<span style="font-weight: bold">[</span>str, Iterable<span style="font-weight: bold">[</span>str<span style="font-weight: bold">]</span>, NoneType<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>, author:       <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                            Optional<span style="font-weight: bold">[</span>str<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>, search: Optional<span style="font-weight: bold">[</span>str<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>, sort:                            <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                            Union<span style="font-weight: bold">[</span>Literal<span style="font-weight: bold">[</span><span style="color: #008000; text-decoration-color: #008000">'lastModified'</span><span style="font-weight: bold">]</span>, str, NoneType<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>, direction:                     <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                            Optional<span style="font-weight: bold">[</span>Literal<span style="font-weight: bold">[</span><span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-1</span><span style="font-weight: bold">]]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>, limit: Optional<span style="font-weight: bold">[</span>int<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>, datasets: Union<span style="font-weight: bold">[</span>str,      <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                            Iterable<span style="font-weight: bold">[</span>str<span style="font-weight: bold">]</span>, NoneType<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>, models: Union<span style="font-weight: bold">[</span>str, Iterable<span style="font-weight: bold">[</span>str<span style="font-weight: bold">]</span>, NoneType<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>, <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                            linked: bool = <span style="color: #ff0000; text-decoration-color: #ff0000; font-style: italic">False</span>, full: Optional<span style="font-weight: bold">[</span>bool<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>, token: Optional<span style="font-weight: bold">[</span>str<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span><span style="font-weight: bold">)</span> -&gt;   <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                            List<span style="font-weight: bold">[</span>huggingface_hub.hf_api.SpaceInfo<span style="font-weight: bold">]</span>: <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">Get the public list of all Spaces on </span>        <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                            <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">huggingface.co</span>                                                                       <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>       <span style="color: #808000; text-decoration-color: #808000; font-style: italic">merge_pull_request</span> = <span style="color: #00ffff; text-decoration-color: #00ffff; font-style: italic">def </span><span style="color: #800000; text-decoration-color: #800000; font-weight: bold">merge_pull_request</span><span style="font-weight: bold">(</span>repo_id: str, discussion_num: int, *, token: Optional<span style="font-weight: bold">[</span>str<span style="font-weight: bold">]</span> =  <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                            <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>, comment: Optional<span style="font-weight: bold">[</span>str<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>, repo_type: Optional<span style="font-weight: bold">[</span>str<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span><span style="font-weight: bold">)</span>: <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">Merges a Pull</span> <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                            <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">Request.</span>                                                                             <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>               <span style="color: #808000; text-decoration-color: #808000; font-style: italic">model_info</span> = <span style="color: #00ffff; text-decoration-color: #00ffff; font-style: italic">def </span><span style="color: #800000; text-decoration-color: #800000; font-weight: bold">model_info</span><span style="font-weight: bold">(</span>repo_id: str, *, revision: Optional<span style="font-weight: bold">[</span>str<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>, timeout:             <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                            Optional<span style="font-weight: bold">[</span>float<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>, securityStatus: Optional<span style="font-weight: bold">[</span>bool<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>, files_metadata: bool  <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                            = <span style="color: #ff0000; text-decoration-color: #ff0000; font-style: italic">False</span>, token: Union<span style="font-weight: bold">[</span>bool, str, NoneType<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span><span style="font-weight: bold">)</span> -&gt;                                <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                            huggingface_hub.hf_api.ModelInfo: <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">Get info on one specific model on huggingface.co</span>   <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                <span style="color: #808000; text-decoration-color: #808000; font-style: italic">move_repo</span> = <span style="color: #00ffff; text-decoration-color: #00ffff; font-style: italic">def </span><span style="color: #800000; text-decoration-color: #800000; font-weight: bold">move_repo</span><span style="font-weight: bold">(</span>from_id: str, to_id: str, *, repo_type: Optional<span style="font-weight: bold">[</span>str<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>, token:   <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                            Optional<span style="font-weight: bold">[</span>str<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span><span style="font-weight: bold">)</span>: <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">Moving a repository from namespace1/repo_name1 to </span>            <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                            <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">namespace2/repo_name2</span>                                                                <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>        <span style="color: #808000; text-decoration-color: #808000; font-style: italic">rename_discussion</span> = <span style="color: #00ffff; text-decoration-color: #00ffff; font-style: italic">def </span><span style="color: #800000; text-decoration-color: #800000; font-weight: bold">rename_discussion</span><span style="font-weight: bold">(</span>repo_id: str, discussion_num: int, new_title: str, *, token:   <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                            Optional<span style="font-weight: bold">[</span>str<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>, repo_type: Optional<span style="font-weight: bold">[</span>str<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span><span style="font-weight: bold">)</span> -&gt;                            <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                            huggingface_hub.community.DiscussionTitleChange: <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">Renames a Discussion.</span>               <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                <span style="color: #808000; text-decoration-color: #808000; font-style: italic">repo_info</span> = <span style="color: #00ffff; text-decoration-color: #00ffff; font-style: italic">def </span><span style="color: #800000; text-decoration-color: #800000; font-weight: bold">repo_info</span><span style="font-weight: bold">(</span>repo_id: str, *, revision: Optional<span style="font-weight: bold">[</span>str<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>, repo_type:            <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                            Optional<span style="font-weight: bold">[</span>str<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>, timeout: Optional<span style="font-weight: bold">[</span>float<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>, files_metadata: bool = <span style="color: #ff0000; text-decoration-color: #ff0000; font-style: italic">False</span>, <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                            token: Union<span style="font-weight: bold">[</span>bool, str, NoneType<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span><span style="font-weight: bold">)</span> -&gt; Union<span style="font-weight: bold">[</span>huggingface_hub.hf_api.ModelInfo, <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                            huggingface_hub.hf_api.DatasetInfo, huggingface_hub.hf_api.SpaceInfo<span style="font-weight: bold">]</span>: <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">Get the info </span> <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                            <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">object for a given repo of a given type.</span>                                             <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>         <span style="color: #808000; text-decoration-color: #808000; font-style: italic">set_access_token</span> = <span style="color: #00ffff; text-decoration-color: #00ffff; font-style: italic">def </span><span style="color: #800000; text-decoration-color: #800000; font-weight: bold">set_access_token</span><span style="font-weight: bold">(</span>access_token: str<span style="font-weight: bold">)</span>:                                             <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                            <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">Saves the passed access token so git can correctly authenticate the</span>                  <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                            <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">user.</span>                                                                                <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>               <span style="color: #808000; text-decoration-color: #808000; font-style: italic">space_info</span> = <span style="color: #00ffff; text-decoration-color: #00ffff; font-style: italic">def </span><span style="color: #800000; text-decoration-color: #800000; font-weight: bold">space_info</span><span style="font-weight: bold">(</span>repo_id: str, *, revision: Optional<span style="font-weight: bold">[</span>str<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>, timeout:             <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                            Optional<span style="font-weight: bold">[</span>float<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>, files_metadata: bool = <span style="color: #ff0000; text-decoration-color: #ff0000; font-style: italic">False</span>, token: Union<span style="font-weight: bold">[</span>bool, str,        <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                            NoneType<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span><span style="font-weight: bold">)</span> -&gt; huggingface_hub.hf_api.SpaceInfo: <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">Get info on one specific </span>     <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                            <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">Space on huggingface.co.</span>                                                             <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>       <span style="color: #808000; text-decoration-color: #808000; font-style: italic">unset_access_token</span> = <span style="color: #00ffff; text-decoration-color: #00ffff; font-style: italic">def </span><span style="color: #800000; text-decoration-color: #800000; font-weight: bold">unset_access_token</span><span style="font-weight: bold">()</span>: <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">Resets the user's access token.</span>                            <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>   <span style="color: #808000; text-decoration-color: #808000; font-style: italic">update_repo_visibility</span> = <span style="color: #00ffff; text-decoration-color: #00ffff; font-style: italic">def </span><span style="color: #800000; text-decoration-color: #800000; font-weight: bold">update_repo_visibility</span><span style="font-weight: bold">(</span>repo_id: str, private: bool = <span style="color: #ff0000; text-decoration-color: #ff0000; font-style: italic">False</span>, *, token:            <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                            Optional<span style="font-weight: bold">[</span>str<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>, organization: Optional<span style="font-weight: bold">[</span>str<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>, repo_type: Optional<span style="font-weight: bold">[</span>str<span style="font-weight: bold">]</span> = <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                            <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>, name: Optional<span style="font-weight: bold">[</span>str<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span><span style="font-weight: bold">)</span> -&gt; Dict<span style="font-weight: bold">[</span>str, bool<span style="font-weight: bold">]</span>: <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">Update the visibility setting </span> <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                            <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">of a repository.</span>                                                                     <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>              <span style="color: #808000; text-decoration-color: #808000; font-style: italic">upload_file</span> = <span style="color: #00ffff; text-decoration-color: #00ffff; font-style: italic">def </span><span style="color: #800000; text-decoration-color: #800000; font-weight: bold">upload_file</span><span style="font-weight: bold">(</span>*, path_or_fileobj: Union<span style="font-weight: bold">[</span>str, bytes, BinaryIO<span style="font-weight: bold">]</span>, path_in_repo: str,  <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                            repo_id: str, token: Optional<span style="font-weight: bold">[</span>str<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>, repo_type: Optional<span style="font-weight: bold">[</span>str<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>,          <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                            revision: Optional<span style="font-weight: bold">[</span>str<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>, commit_message: Optional<span style="font-weight: bold">[</span>str<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>,                <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                            commit_description: Optional<span style="font-weight: bold">[</span>str<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>, create_pr: Optional<span style="font-weight: bold">[</span>bool<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>,          <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                            parent_commit: Optional<span style="font-weight: bold">[</span>str<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span><span style="font-weight: bold">)</span> -&gt; str:                                         <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                            <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">Upload a local file </span><span style="color: #7f7f7f; text-decoration-color: #7f7f7f; font-weight: bold">(</span><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">up to </span><span style="color: #7fbfbf; text-decoration-color: #7fbfbf; font-weight: bold">50</span><span style="color: #7f7f7f; text-decoration-color: #7f7f7f"> GB</span><span style="color: #7f7f7f; text-decoration-color: #7f7f7f; font-weight: bold">)</span><span style="color: #7f7f7f; text-decoration-color: #7f7f7f"> to the given repo. The upload is done</span>              <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                            <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">through a HTTP post request, and doesn't require git or git-lfs to be</span>                <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                            <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">installed.</span>                                                                           <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>            <span style="color: #808000; text-decoration-color: #808000; font-style: italic">upload_folder</span> = <span style="color: #00ffff; text-decoration-color: #00ffff; font-style: italic">def </span><span style="color: #800000; text-decoration-color: #800000; font-weight: bold">upload_folder</span><span style="font-weight: bold">(</span>*, repo_id: str, folder_path: Union<span style="font-weight: bold">[</span>str, pathlib.Path<span style="font-weight: bold">]</span>,            <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                            path_in_repo: Optional<span style="font-weight: bold">[</span>str<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>, commit_message: Optional<span style="font-weight: bold">[</span>str<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>,            <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                            commit_description: Optional<span style="font-weight: bold">[</span>str<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>, token: Optional<span style="font-weight: bold">[</span>str<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>, repo_type:    <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                            Optional<span style="font-weight: bold">[</span>str<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>, revision: Optional<span style="font-weight: bold">[</span>str<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>, create_pr: Optional<span style="font-weight: bold">[</span>bool<span style="font-weight: bold">]</span> =    <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                            <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>, parent_commit: Optional<span style="font-weight: bold">[</span>str<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>, allow_patterns: Union<span style="font-weight: bold">[</span>List<span style="font-weight: bold">[</span>str<span style="font-weight: bold">]</span>, str,     <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                            NoneType<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>, ignore_patterns: Union<span style="font-weight: bold">[</span>List<span style="font-weight: bold">[</span>str<span style="font-weight: bold">]</span>, str, NoneType<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span><span style="font-weight: bold">)</span>:          <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                            <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">Upload a local folder to the given repo. The upload is done</span>                          <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                            <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">through a HTTP requests, and doesn't require git or git-lfs to be</span>                    <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                            <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">installed.</span>                                                                           <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                   <span style="color: #808000; text-decoration-color: #808000; font-style: italic">whoami</span> = <span style="color: #00ffff; text-decoration-color: #00ffff; font-style: italic">def </span><span style="color: #800000; text-decoration-color: #800000; font-weight: bold">whoami</span><span style="font-weight: bold">(</span>token: Optional<span style="font-weight: bold">[</span>str<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span><span style="font-weight: bold">)</span> -&gt; Dict: <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">Call HF API to know </span><span style="color: #7fbf7f; text-decoration-color: #7fbf7f">"whoami"</span><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">.</span>       <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ</span>
</pre>
</div>
</div>
<p>You‚Äôll see from looking through this there is a bunch of different things we can now do programmatically via the hub. For this post we‚Äôre interested in the <code>list_datasets</code> and <code>list_models</code> methods. If we look at one of these we can see it has a bunch of different options we can use when listing datasets or models.</p>
<div id="cell-11" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">rich.inspect(api.list_models)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #000080; text-decoration-color: #000080">‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ </span><span style="color: #000080; text-decoration-color: #000080; font-weight: bold">&lt;</span><span style="color: #ff00ff; text-decoration-color: #ff00ff; font-weight: bold">bound</span><span style="color: #000000; text-decoration-color: #000000"> method HfApi.list_models of &lt;huggingface_hub.hf_api.HfApi object at </span><span style="color: #008080; text-decoration-color: #008080; font-weight: bold">0x136a2ce80</span><span style="color: #000000; text-decoration-color: #000000">&gt;</span><span style="color: #000080; text-decoration-color: #000080; font-weight: bold">&gt;</span><span style="color: #000080; text-decoration-color: #000080"> ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span> <span style="color: #00ffff; text-decoration-color: #00ffff; font-style: italic">def </span><span style="color: #800000; text-decoration-color: #800000; font-weight: bold">HfApi.list_models</span><span style="font-weight: bold">(</span>*, filter: Union<span style="font-weight: bold">[</span>huggingface_hub.utils.endpoint_helpers.ModelFilter, str, Iterable<span style="font-weight: bold">[</span>str<span style="font-weight: bold">]</span>,  <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span> NoneType<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>, author: Optional<span style="font-weight: bold">[</span>str<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>, search: Optional<span style="font-weight: bold">[</span>str<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>, emissions_thresholds:             <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span> Optional<span style="font-weight: bold">[</span>Tuple<span style="font-weight: bold">[</span>float, float<span style="font-weight: bold">]]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>, sort: Union<span style="font-weight: bold">[</span>Literal<span style="font-weight: bold">[</span><span style="color: #008000; text-decoration-color: #008000">'lastModified'</span><span style="font-weight: bold">]</span>, str, NoneType<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>, direction:    <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span> Optional<span style="font-weight: bold">[</span>Literal<span style="font-weight: bold">[</span><span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-1</span><span style="font-weight: bold">]]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>, limit: Optional<span style="font-weight: bold">[</span>int<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>, full: Optional<span style="font-weight: bold">[</span>bool<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>, cardData: bool = <span style="color: #ff0000; text-decoration-color: #ff0000; font-style: italic">False</span>, <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span> fetch_config: bool = <span style="color: #ff0000; text-decoration-color: #ff0000; font-style: italic">False</span>, token: Union<span style="font-weight: bold">[</span>bool, str, NoneType<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span><span style="font-weight: bold">)</span> -&gt;                                        <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span> List<span style="font-weight: bold">[</span>huggingface_hub.hf_api.ModelInfo<span style="font-weight: bold">]</span>:                                                                         <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                                                                                                                 <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span> <span style="color: #008080; text-decoration-color: #008080">Get the list of all the models on huggingface.co</span>                                                                <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                                                                                                                 <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span> <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">28</span><span style="font-style: italic"> attribute(s) not shown.</span> Run <span style="color: #800080; text-decoration-color: #800080; font-weight: bold">inspect</span><span style="font-weight: bold">(</span>inspect<span style="font-weight: bold">)</span> for options.                                                    <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ</span>
</pre>
</div>
</div>
<p>For our use case we want everything, so we set <code>limit=None</code>, we don‚Äôt want any <code>filters</code> so we set this to <code>None</code> (this is the default behaviour, but we set them explicitly here to make it clearer for our future selves). We also set <code>full=True</code> so we get back more verbose information about our dataset and models. We also wrap the result in <code>iter</code> and <code>list</code> since the behaviour of these methods will change in future versions to support paging.</p>
<div id="cell-13" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">hub_datasets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">iter</span>(api.list_datasets(limit<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, full<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)))</span></code></pre></div>
</div>
<div id="cell-14" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">hub_models <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">iter</span>(api.list_models(limit<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, full<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)))</span></code></pre></div>
</div>
<p>Let‚Äôs peek at an example of what we get back</p>
<div id="cell-16" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">hub_models[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="8">
<pre><code>ModelInfo: {
    modelId: albert-base-v1
    sha: aeffd769076a5c4f83b2546aea99ca45a15a5da4
    lastModified: 2021-01-13T15:08:24.000Z
    tags: ['pytorch', 'tf', 'albert', 'fill-mask', 'en', 'dataset:bookcorpus', 'dataset:wikipedia', 'arxiv:1909.11942', 'transformers', 'exbert', 'license:apache-2.0', 'autotrain_compatible', 'has_space']
    pipeline_tag: fill-mask
    siblings: [RepoFile(rfilename='.gitattributes', size='None', blob_id='None', lfs='None'), RepoFile(rfilename='README.md', size='None', blob_id='None', lfs='None'), RepoFile(rfilename='config.json', size='None', blob_id='None', lfs='None'), RepoFile(rfilename='pytorch_model.bin', size='None', blob_id='None', lfs='None'), RepoFile(rfilename='spiece.model', size='None', blob_id='None', lfs='None'), RepoFile(rfilename='tf_model.h5', size='None', blob_id='None', lfs='None'), RepoFile(rfilename='tokenizer.json', size='None', blob_id='None', lfs='None'), RepoFile(rfilename='with-prefix-tf_model.h5', size='None', blob_id='None', lfs='None')]
    private: False
    author: None
    config: None
    securityStatus: None
    _id: 621ffdc036468d709f174328
    id: albert-base-v1
    gitalyUid: 4f35551ea371da7a8762caab54319a54ade836044f0ca7690d21e86b159867eb
    likes: 1
    downloads: 75182
    library_name: transformers
}</code></pre>
</div>
</div>
<div id="cell-17" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">hub_datasets[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="9">
<pre><code>DatasetInfo: {
    id: acronym_identification
    sha: 173af1516c409eb4596bc63a69626bdb5584c40c
    lastModified: 2022-11-18T17:25:49.000Z
    tags: ['task_categories:token-classification', 'annotations_creators:expert-generated', 'language_creators:found', 'multilinguality:monolingual', 'size_categories:10K&lt;n&lt;100K', 'source_datasets:original', 'language:en', 'license:mit', 'acronym-identification', 'arxiv:2010.14678']
    private: False
    author: None
    description: Acronym identification training and development sets for the acronym identification task at SDU@AAAI-21.
    citation: @inproceedings{veyseh-et-al-2020-what,
   title={{What Does This Acronym Mean? Introducing a New Dataset for Acronym Identification and Disambiguation}},
   author={Amir Pouran Ben Veyseh and Franck Dernoncourt and Quan Hung Tran and Thien Huu Nguyen},
   year={2020},
   booktitle={Proceedings of COLING},
   link={https://arxiv.org/pdf/2010.14678v1.pdf}
}
    cardData: {'annotations_creators': ['expert-generated'], 'language_creators': ['found'], 'language': ['en'], 'license': ['mit'], 'multilinguality': ['monolingual'], 'size_categories': ['10K&lt;n&lt;100K'], 'source_datasets': ['original'], 'task_categories': ['token-classification'], 'task_ids': [], 'paperswithcode_id': 'acronym-identification', 'pretty_name': 'Acronym Identification Dataset', 'train-eval-index': [{'config': 'default', 'task': 'token-classification', 'task_id': 'entity_extraction', 'splits': {'eval_split': 'test'}, 'col_mapping': {'tokens': 'tokens', 'labels': 'tags'}}], 'tags': ['acronym-identification'], 'dataset_info': {'features': [{'name': 'id', 'dtype': 'string'}, {'name': 'tokens', 'sequence': 'string'}, {'name': 'labels', 'sequence': {'class_label': {'names': {'0': 'B-long', '1': 'B-short', '2': 'I-long', '3': 'I-short', '4': 'O'}}}}], 'splits': [{'name': 'train', 'num_bytes': 7792803, 'num_examples': 14006}, {'name': 'validation', 'num_bytes': 952705, 'num_examples': 1717}, {'name': 'test', 'num_bytes': 987728, 'num_examples': 1750}], 'download_size': 8556464, 'dataset_size': 9733236}}
    siblings: []
    _id: 621ffdd236468d709f181d58
    disabled: False
    gated: False
    gitalyUid: 6570517623fa521aa189178e7c7e73d9d88c01b295204edef97f389a15eae144
    likes: 9
    downloads: 6074
    paperswithcode_id: acronym-identification
}</code></pre>
</div>
</div>
<p>Since we want both models and datasets we create a dictionary which stores the types of item i.e.&nbsp;is it a dataset or a model.</p>
<div id="cell-19" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">hub_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"model"</span>: hub_models, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dataset"</span>: hub_datasets}</span></code></pre></div>
</div>
<p>We‚Äôll be putting our data inside a pandas DataFrame, so we‚Äôll grab the <code>.__dict__</code> attribute for each hub item, so it‚Äôs more pandas friendly.</p>
<div id="cell-21" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">hub_item_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb13-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> hub_type, hub_item <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> hub_data.items():</span>
<span id="cb13-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> item <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> hub_item:</span>
<span id="cb13-4">        data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> item.__dict__</span>
<span id="cb13-5">        data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hub_type</span>
<span id="cb13-6">        hub_item_dict.append(data)</span></code></pre></div>
</div>
<div id="cell-22" class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame.from_dict(hub_item_dict)</span></code></pre></div>
</div>
<p>How many hub items do we have?</p>
<div id="cell-24" class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(df)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="13">
<pre><code>151343</code></pre>
</div>
</div>
<p>What info do we have?</p>
<div id="cell-26" class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">df.columns</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="14">
<pre><code>Index(['modelId', 'sha', 'lastModified', 'tags', 'pipeline_tag', 'siblings',
       'private', 'author', 'config', 'securityStatus', '_id', 'id',
       'gitalyUid', 'likes', 'downloads', 'library_name', 'type',
       'description', 'citation', 'cardData', 'disabled', 'gated',
       'paperswithcode_id'],
      dtype='object')</code></pre>
</div>
</div>
</section>
<section id="tags" class="level2">
<h2 class="anchored" data-anchor-id="tags">Tags</h2>
<p>Models and datasets have a bunch of metadata i.e.&nbsp;last modified and number of downloads. We‚Äôll focus on <code>tags</code> here. Let‚Äôs start by looking at a single example.</p>
<div id="cell-28" class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">df.loc[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tags"</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="15">
<pre><code>['pytorch',
 'tf',
 'rust',
 'safetensors',
 'distilbert',
 'text-classification',
 'en',
 'dataset:sst2',
 'dataset:glue',
 'doi:10.57967/hf/0181',
 'transformers',
 'license:apache-2.0',
 'model-index',
 'has_space']</code></pre>
</div>
</div>
<p>We can see that <code>tags</code> capture can relate to tasks i.e.&nbsp;<code>text-classification</code>, libraries supported i.e.&nbsp;<code>tf</code>, or the <code>licence</code> associated with a model or dataset. As a starting point for exploring tags we can take a look at how many tags models and datasets have. We‚Äôll add a new column to capture this number.</p>
<div id="cell-30" class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> calculate_number_of_tags(tags: [<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>:</span>
<span id="cb21-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(tags)</span></code></pre></div>
</div>
<div id="cell-31" class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"number_of_tags"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tags"</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: calculate_number_of_tags(x))</span></code></pre></div>
</div>
<p>We can now use <code>describe</code> to see the breakdown of this number.</p>
<div id="cell-33" class="cell" data-execution_count="113">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">df.number_of_tags.describe()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="113">
<pre><code>count    151343.000000
mean          3.855566
std           6.878613
min           0.000000
25%           0.000000
50%           4.000000
75%           6.000000
max         650.000000
Name: number_of_tags, dtype: float64</code></pre>
</div>
</div>
<p>We can see that we have quite a range of tag numbers ranging from <code>0</code> to <code>650</code>! If your brain works anything like mine you probably want to know what this high value is about!</p>
<div id="cell-35" class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">df[df.number_of_tags <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">640</span>][[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"id"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tags"</span>]]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="19">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">id</th>
<th data-quarto-table-cell-role="th">tags</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">136372</td>
<td>bible-nlp/biblenlp-corpus</td>
<td>[task_categories:translation, annotations_crea...</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div id="cell-36" class="cell" data-execution_count="20">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">df[df.number_of_tags <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">640</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tags"</span>].tolist()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="20">
<pre><code>[['task_categories:translation',
  'annotations_creators:no-annotation',
  'language_creators:expert-generated',
  'multilinguality:translation',
  'multilinguality:multilingual',
  'size_categories:1M&lt;n&lt;10M',
  'source_datasets:original',
  'language:aau',
  'language:aaz',
  'language:abx',
  'language:aby',
  'language:acf',
  'language:acu',
  'language:adz',
  'language:aey',
  'language:agd',
  'language:agg',
  'language:agm',
  'language:agn',
  'language:agr',
  'language:agu',
  'language:aia',
  'language:ake',
  'language:alp',
  'language:alq',
  'language:als',
  'language:aly',
  'language:ame',
  'language:amk',
  'language:amp',
  'language:amr',
  'language:amu',
  'language:anh',
  'language:anv',
  'language:aoi',
  'language:aoj',
  'language:apb',
  'language:apn',
  'language:apu',
  'language:apy',
  'language:arb',
  'language:arl',
  'language:arn',
  'language:arp',
  'language:aso',
  'language:ata',
  'language:atb',
  'language:atd',
  'language:atg',
  'language:auc',
  'language:aui',
  'language:auy',
  'language:avt',
  'language:awb',
  'language:awk',
  'language:awx',
  'language:azg',
  'language:azz',
  'language:bao',
  'language:bbb',
  'language:bbr',
  'language:bch',
  'language:bco',
  'language:bdd',
  'language:bea',
  'language:bel',
  'language:bgs',
  'language:bgt',
  'language:bhg',
  'language:bhl',
  'language:big',
  'language:bjr',
  'language:bjv',
  'language:bkd',
  'language:bki',
  'language:bkq',
  'language:bkx',
  'language:bla',
  'language:blw',
  'language:blz',
  'language:bmh',
  'language:bmk',
  'language:bmr',
  'language:bnp',
  'language:boa',
  'language:boj',
  'language:bon',
  'language:box',
  'language:bqc',
  'language:bre',
  'language:bsn',
  'language:bsp',
  'language:bss',
  'language:buk',
  'language:bus',
  'language:bvr',
  'language:bxh',
  'language:byx',
  'language:bzd',
  'language:bzj',
  'language:cab',
  'language:caf',
  'language:cao',
  'language:cap',
  'language:car',
  'language:cav',
  'language:cax',
  'language:cbc',
  'language:cbi',
  'language:cbk',
  'language:cbr',
  'language:cbs',
  'language:cbt',
  'language:cbu',
  'language:cbv',
  'language:cco',
  'language:ces',
  'language:cgc',
  'language:cha',
  'language:chd',
  'language:chf',
  'language:chk',
  'language:chq',
  'language:chz',
  'language:cjo',
  'language:cjv',
  'language:cle',
  'language:clu',
  'language:cme',
  'language:cmn',
  'language:cni',
  'language:cnl',
  'language:cnt',
  'language:cof',
  'language:con',
  'language:cop',
  'language:cot',
  'language:cpa',
  'language:cpb',
  'language:cpc',
  'language:cpu',
  'language:crn',
  'language:crx',
  'language:cso',
  'language:cta',
  'language:ctp',
  'language:ctu',
  'language:cub',
  'language:cuc',
  'language:cui',
  'language:cut',
  'language:cux',
  'language:cwe',
  'language:daa',
  'language:dad',
  'language:dah',
  'language:ded',
  'language:deu',
  'language:dgr',
  'language:dgz',
  'language:dif',
  'language:dik',
  'language:dji',
  'language:djk',
  'language:dob',
  'language:dwr',
  'language:dww',
  'language:dwy',
  'language:eko',
  'language:emi',
  'language:emp',
  'language:eng',
  'language:epo',
  'language:eri',
  'language:ese',
  'language:etr',
  'language:faa',
  'language:fai',
  'language:far',
  'language:for',
  'language:fra',
  'language:fuf',
  'language:gai',
  'language:gam',
  'language:gaw',
  'language:gdn',
  'language:gdr',
  'language:geb',
  'language:gfk',
  'language:ghs',
  'language:gia',
  'language:glk',
  'language:gmv',
  'language:gng',
  'language:gnn',
  'language:gnw',
  'language:gof',
  'language:grc',
  'language:gub',
  'language:guh',
  'language:gui',
  'language:gul',
  'language:gum',
  'language:guo',
  'language:gvc',
  'language:gvf',
  'language:gwi',
  'language:gym',
  'language:gyr',
  'language:hat',
  'language:haw',
  'language:hbo',
  'language:hch',
  'language:heb',
  'language:heg',
  'language:hix',
  'language:hla',
  'language:hlt',
  'language:hns',
  'language:hop',
  'language:hrv',
  'language:hub',
  'language:hui',
  'language:hus',
  'language:huu',
  'language:huv',
  'language:hvn',
  'language:ign',
  'language:ikk',
  'language:ikw',
  'language:imo',
  'language:inb',
  'language:ind',
  'language:ino',
  'language:iou',
  'language:ipi',
  'language:ita',
  'language:jac',
  'language:jao',
  'language:jic',
  'language:jiv',
  'language:jpn',
  'language:jvn',
  'language:kaq',
  'language:kbc',
  'language:kbh',
  'language:kbm',
  'language:kdc',
  'language:kde',
  'language:kdl',
  'language:kek',
  'language:ken',
  'language:kew',
  'language:kgk',
  'language:kgp',
  'language:khs',
  'language:kje',
  'language:kjs',
  'language:kkc',
  'language:kky',
  'language:klt',
  'language:klv',
  'language:kms',
  'language:kmu',
  'language:kne',
  'language:knf',
  'language:knj',
  'language:kos',
  'language:kpf',
  'language:kpg',
  'language:kpj',
  'language:kpw',
  'language:kqa',
  'language:kqc',
  'language:kqf',
  'language:kql',
  'language:kqw',
  'language:ksj',
  'language:ksr',
  'language:ktm',
  'language:kto',
  'language:kud',
  'language:kue',
  'language:kup',
  'language:kvn',
  'language:kwd',
  'language:kwf',
  'language:kwi',
  'language:kwj',
  'language:kyf',
  'language:kyg',
  'language:kyq',
  'language:kyz',
  'language:kze',
  'language:lac',
  'language:lat',
  'language:lbb',
  'language:leu',
  'language:lex',
  'language:lgl',
  'language:lid',
  'language:lif',
  'language:lww',
  'language:maa',
  'language:maj',
  'language:maq',
  'language:mau',
  'language:mav',
  'language:maz',
  'language:mbb',
  'language:mbc',
  'language:mbh',
  'language:mbl',
  'language:mbt',
  'language:mca',
  'language:mcb',
  'language:mcd',
  'language:mcf',
  'language:mcp',
  'language:mdy',
  'language:med',
  'language:mee',
  'language:mek',
  'language:meq',
  'language:met',
  'language:meu',
  'language:mgh',
  'language:mgw',
  'language:mhl',
  'language:mib',
  'language:mic',
  'language:mie',
  'language:mig',
  'language:mih',
  'language:mil',
  'language:mio',
  'language:mir',
  'language:mit',
  'language:miz',
  'language:mjc',
  'language:mkn',
  'language:mks',
  'language:mlh',
  'language:mlp',
  'language:mmx',
  'language:mna',
  'language:mop',
  'language:mox',
  'language:mph',
  'language:mpj',
  'language:mpm',
  'language:mpp',
  'language:mps',
  'language:mpx',
  'language:mqb',
  'language:mqj',
  'language:msb',
  'language:msc',
  'language:msk',
  'language:msm',
  'language:msy',
  'language:mti',
  'language:muy',
  'language:mva',
  'language:mvn',
  'language:mwc',
  'language:mxb',
  'language:mxp',
  'language:mxq',
  'language:mxt',
  'language:myu',
  'language:myw',
  'language:myy',
  'language:mzz',
  'language:nab',
  'language:naf',
  'language:nak',
  'language:nay',
  'language:nbq',
  'language:nca',
  'language:nch',
  'language:ncj',
  'language:ncl',
  'language:ncu',
  'language:ndj',
  'language:nfa',
  'language:ngp',
  'language:ngu',
  'language:nhg',
  'language:nhi',
  'language:nho',
  'language:nhr',
  'language:nhu',
  'language:nhw',
  'language:nhy',
  'language:nif',
  'language:nin',
  'language:nko',
  'language:nld',
  'language:nlg',
  'language:nna',
  'language:nnq',
  'language:not',
  'language:nou',
  'language:npl',
  'language:nsn',
  'language:nss',
  'language:ntj',
  'language:ntp',
  'language:nwi',
  'language:nyu',
  'language:obo',
  'language:ong',
  'language:ons',
  'language:ood',
  'language:opm',
  'language:ote',
  'language:otm',
  'language:otn',
  'language:otq',
  'language:ots',
  'language:pab',
  'language:pad',
  'language:pah',
  'language:pao',
  'language:pes',
  'language:pib',
  'language:pio',
  'language:pir',
  'language:pjt',
  'language:plu',
  'language:pma',
  'language:poe',
  'language:poi',
  'language:pon',
  'language:poy',
  'language:ppo',
  'language:prf',
  'language:pri',
  'language:ptp',
  'language:ptu',
  'language:pwg',
  'language:quc',
  'language:quf',
  'language:quh',
  'language:qul',
  'language:qup',
  'language:qvc',
  'language:qve',
  'language:qvh',
  'language:qvm',
  'language:qvn',
  'language:qvs',
  'language:qvw',
  'language:qvz',
  'language:qwh',
  'language:qxh',
  'language:qxn',
  'language:qxo',
  'language:rai',
  'language:rkb',
  'language:rmc',
  'language:roo',
  'language:rop',
  'language:rro',
  'language:ruf',
  'language:rug',
  'language:rus',
  'language:sab',
  'language:san',
  'language:sbe',
  'language:seh',
  'language:sey',
  'language:sgz',
  'language:shj',
  'language:shp',
  'language:sim',
  'language:sja',
  'language:sll',
  'language:smk',
  'language:snc',
  'language:snn',
  'language:sny',
  'language:som',
  'language:soq',
  'language:spa',
  'language:spl',
  'language:spm',
  'language:sps',
  'language:spy',
  'language:sri',
  'language:srm',
  'language:srn',
  'language:srp',
  'language:srq',
  'language:ssd',
  'language:ssg',
  'language:ssx',
  'language:stp',
  'language:sua',
  'language:sue',
  'language:sus',
  'language:suz',
  'language:swe',
  'language:swh',
  'language:swp',
  'language:sxb',
  'language:tac',
  'language:tav',
  'language:tbc',
  'language:tbl',
  'language:tbo',
  'language:tbz',
  'language:tca',
  'language:tee',
  'language:ter',
  'language:tew',
  'language:tfr',
  'language:tgp',
  'language:tif',
  'language:tim',
  'language:tiy',
  'language:tke',
  'language:tku',
  'language:tna',
  'language:tnc',
  'language:tnn',
  'language:tnp',
  'language:toc',
  'language:tod',
  'language:toj',
  'language:ton',
  'language:too',
  'language:top',
  'language:tos',
  'language:tpt',
  'language:trc',
  'language:tsw',
  'language:ttc',
  'language:tue',
  'language:tuo',
  'language:txu',
  'language:ubr',
  'language:udu',
  'language:ukr',
  'language:uli',
  'language:ura',
  'language:urb',
  'language:usa',
  'language:usp',
  'language:uvl',
  'language:vid',
  'language:vie',
  'language:viv',
  'language:vmy',
  'language:waj',
  'language:wal',
  'language:wap',
  'language:wat',
  'language:wbp',
  'language:wed',
  'language:wer',
  'language:wim',
  'language:wmt',
  'language:wmw',
  'language:wnc',
  'language:wnu',
  'language:wos',
  'language:wrk',
  'language:wro',
  'language:wsk',
  'language:wuv',
  'language:xav',
  'language:xed',
  'language:xla',
  'language:xnn',
  'language:xon',
  'language:xsi',
  'language:xtd',
  'language:xtm',
  'language:yaa',
  'language:yad',
  'language:yal',
  'language:yap',
  'language:yaq',
  'language:yby',
  'language:ycn',
  'language:yka',
  'language:yml',
  'language:yre',
  'language:yuj',
  'language:yut',
  'language:yuw',
  'language:yva',
  'language:zaa',
  'language:zab',
  'language:zac',
  'language:zad',
  'language:zai',
  'language:zaj',
  'language:zam',
  'language:zao',
  'language:zar',
  'language:zas',
  'language:zat',
  'language:zav',
  'language:zaw',
  'language:zca',
  'language:zia',
  'language:ziw',
  'language:zos',
  'language:zpc',
  'language:zpl',
  'language:zpo',
  'language:zpq',
  'language:zpu',
  'language:zpv',
  'language:zpz',
  'language:zsr',
  'language:ztq',
  'language:zty',
  'language:zyp',
  'language:be',
  'language:br',
  'language:cs',
  'language:ch',
  'language:zh',
  'language:de',
  'language:en',
  'language:eo',
  'language:fr',
  'language:ht',
  'language:he',
  'language:hr',
  'language:id',
  'language:it',
  'language:ja',
  'language:la',
  'language:nl',
  'language:ru',
  'language:sa',
  'language:so',
  'language:es',
  'language:sr',
  'language:sv',
  'language:to',
  'language:uk',
  'language:vi',
  'license:cc-by-4.0',
  'license:other']]</code></pre>
</div>
</div>
<p>We can see that in this case many of the tags relate to language. Since the dataset is bible related and the bible has been heavily translated this might not be as surprising.</p>
<p>Although these high-level stats are somewhat interesting we probably want to break these numbers down. At a high level we can groupby datasets vs models.</p>
<div id="cell-39" class="cell" data-execution_count="21">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1">df.groupby(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>)[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"number_of_tags"</span>].describe()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="21">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">count</th>
<th data-quarto-table-cell-role="th">mean</th>
<th data-quarto-table-cell-role="th">std</th>
<th data-quarto-table-cell-role="th">min</th>
<th data-quarto-table-cell-role="th">25%</th>
<th data-quarto-table-cell-role="th">50%</th>
<th data-quarto-table-cell-role="th">75%</th>
<th data-quarto-table-cell-role="th">max</th>
</tr>
<tr class="odd">
<th data-quarto-table-cell-role="th">type</th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">dataset</td>
<td>19576.0</td>
<td>2.46935</td>
<td>13.137220</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>2.0</td>
<td>650.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">model</td>
<td>131767.0</td>
<td>4.06151</td>
<td>5.327066</td>
<td>0.0</td>
<td>0.0</td>
<td>4.0</td>
<td>6.0</td>
<td>413.0</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>We can see that the mean number of tags for models is higher than datasets. We can also see at the 75% percentile models also have more tags compared to datasets. The possible reasons for this (and whether this is a problem or not) is something we may wish to explore further‚Ä¶</p>
<p>Since the hub hosts models from different libraries we may want to also breakdown by library. First let‚Äôs grab only the model part of our DataFrame.</p>
<div id="cell-41" class="cell" data-execution_count="22">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1">models_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"model"</span>]</span></code></pre></div>
</div>
<p>The <code>library_name</code> column contains info about the library. Let‚Äôs see how many unique libraries we have.</p>
<div id="cell-43" class="cell" data-execution_count="23">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1">models_df.library_name.unique().shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="23">
<pre><code>(63,)</code></pre>
</div>
</div>
<p>This is quite a few! We can do a groupby on this column</p>
<div id="cell-45" class="cell" data-execution_count="24">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1">models_df.groupby(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"library_name"</span>)[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"number_of_tags"</span>].describe()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="24">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">count</th>
<th data-quarto-table-cell-role="th">mean</th>
<th data-quarto-table-cell-role="th">std</th>
<th data-quarto-table-cell-role="th">min</th>
<th data-quarto-table-cell-role="th">25%</th>
<th data-quarto-table-cell-role="th">50%</th>
<th data-quarto-table-cell-role="th">75%</th>
<th data-quarto-table-cell-role="th">max</th>
</tr>
<tr class="odd">
<th data-quarto-table-cell-role="th">library_name</th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">BERT</td>
<td>1.0</td>
<td>7.0</td>
<td>NaN</td>
<td>7.0</td>
<td>7.0</td>
<td>7.0</td>
<td>7.0</td>
<td>7.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">Doc-UFCN</td>
<td>2.0</td>
<td>4.0</td>
<td>0.000000</td>
<td>4.0</td>
<td>4.0</td>
<td>4.0</td>
<td>4.0</td>
<td>4.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">EveryDream</td>
<td>2.0</td>
<td>7.0</td>
<td>0.000000</td>
<td>7.0</td>
<td>7.0</td>
<td>7.0</td>
<td>7.0</td>
<td>7.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">FastAI</td>
<td>1.0</td>
<td>1.0</td>
<td>NaN</td>
<td>1.0</td>
<td>1.0</td>
<td>1.0</td>
<td>1.0</td>
<td>1.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">JoeyNMT</td>
<td>1.0</td>
<td>4.0</td>
<td>NaN</td>
<td>4.0</td>
<td>4.0</td>
<td>4.0</td>
<td>4.0</td>
<td>4.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">ultralytics</td>
<td>4.0</td>
<td>10.0</td>
<td>1.414214</td>
<td>8.0</td>
<td>9.5</td>
<td>10.5</td>
<td>11.0</td>
<td>11.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">ultralyticsplus</td>
<td>1.0</td>
<td>9.0</td>
<td>NaN</td>
<td>9.0</td>
<td>9.0</td>
<td>9.0</td>
<td>9.0</td>
<td>9.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">yolor</td>
<td>2.0</td>
<td>9.0</td>
<td>0.000000</td>
<td>9.0</td>
<td>9.0</td>
<td>9.0</td>
<td>9.0</td>
<td>9.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">yolov5</td>
<td>36.0</td>
<td>9.0</td>
<td>0.000000</td>
<td>9.0</td>
<td>9.0</td>
<td>9.0</td>
<td>9.0</td>
<td>9.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">yolov6detect</td>
<td>1.0</td>
<td>10.0</td>
<td>NaN</td>
<td>10.0</td>
<td>10.0</td>
<td>10.0</td>
<td>10.0</td>
<td>10.0</td>
</tr>
</tbody>
</table>

<p>62 rows √ó 8 columns</p>
</div>
</div>
</div>
<p>We might find this a bit tricky to look at. We may want to only include the top n libraries since some of these libraries may be less well used.</p>
<div id="cell-47" class="cell" data-execution_count="25">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1">models_df.library_name.value_counts()[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="25">
<pre><code>transformers             63754
stable-baselines3         3183
diffusers                 2802
sentence-transformers     1273
ml-agents                  763
keras                      470
timm                       383
espnet                     381
spacy                      296
sample-factory             273
adapter-transformers       201
sklearn                    113
nemo                       103
fastai                      99
speechbrain                 94
Name: library_name, dtype: int64</code></pre>
</div>
</div>
<div id="cell-48" class="cell" data-execution_count="26">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1">top_libraries <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> models_df.library_name.value_counts()[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>].index.to_list()</span></code></pre></div>
</div>
<div id="cell-49" class="cell" data-execution_count="27">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1">top_libraries_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> models_df[models_df.library_name.isin(top_libraries)]</span></code></pre></div>
</div>
<div id="cell-50" class="cell" data-execution_count="28">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1">top_libraries_df.groupby(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"library_name"</span>)[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"number_of_tags"</span>].describe()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="28">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">count</th>
<th data-quarto-table-cell-role="th">mean</th>
<th data-quarto-table-cell-role="th">std</th>
<th data-quarto-table-cell-role="th">min</th>
<th data-quarto-table-cell-role="th">25%</th>
<th data-quarto-table-cell-role="th">50%</th>
<th data-quarto-table-cell-role="th">75%</th>
<th data-quarto-table-cell-role="th">max</th>
</tr>
<tr class="odd">
<th data-quarto-table-cell-role="th">library_name</th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">diffusers</td>
<td>2802.0</td>
<td>4.374732</td>
<td>2.171226</td>
<td>1.0</td>
<td>3.0</td>
<td>4.0</td>
<td>5.0</td>
<td>18.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">espnet</td>
<td>381.0</td>
<td>6.965879</td>
<td>0.595060</td>
<td>3.0</td>
<td>7.0</td>
<td>7.0</td>
<td>7.0</td>
<td>9.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">keras</td>
<td>470.0</td>
<td>3.842553</td>
<td>14.422674</td>
<td>1.0</td>
<td>1.0</td>
<td>2.0</td>
<td>5.0</td>
<td>311.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">ml-agents</td>
<td>763.0</td>
<td>6.965924</td>
<td>0.273775</td>
<td>2.0</td>
<td>7.0</td>
<td>7.0</td>
<td>7.0</td>
<td>7.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">sentence-transformers</td>
<td>1273.0</td>
<td>6.984289</td>
<td>3.221840</td>
<td>2.0</td>
<td>6.0</td>
<td>6.0</td>
<td>7.0</td>
<td>36.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">spacy</td>
<td>296.0</td>
<td>4.611486</td>
<td>0.985180</td>
<td>2.0</td>
<td>4.0</td>
<td>5.0</td>
<td>5.0</td>
<td>10.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">stable-baselines3</td>
<td>3183.0</td>
<td>4.997801</td>
<td>0.163426</td>
<td>3.0</td>
<td>5.0</td>
<td>5.0</td>
<td>5.0</td>
<td>8.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">timm</td>
<td>383.0</td>
<td>3.548303</td>
<td>1.315291</td>
<td>2.0</td>
<td>3.0</td>
<td>3.0</td>
<td>3.0</td>
<td>13.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">transformers</td>
<td>63754.0</td>
<td>6.912037</td>
<td>5.262633</td>
<td>1.0</td>
<td>5.0</td>
<td>6.0</td>
<td>8.0</td>
<td>240.0</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>Let‚Äôs take a quick look at some examples from the library with the highest and lowest number or tags.</p>
<div id="cell-52" class="cell" data-execution_count="29">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1">top_libraries_df[top_libraries_df.library_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sentence-transformers"</span>].sample(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>)[</span>
<span id="cb38-2">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tags"</span></span>
<span id="cb38-3">]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="29">
<pre><code>6123      [pytorch, gpt_neo, arxiv:2202.08904, sentence-...
2488      [pytorch, distilbert, sentence-transformers, f...
37669     [pytorch, distilbert, sentence-transformers, f...
71483     [pytorch, bert, sentence-transformers, feature...
20710     [pytorch, tf, roberta, ko, sentence-transforme...
27073     [pytorch, tf, jax, roberta, arxiv:1908.10084, ...
92037     [pytorch, mpnet, sentence-transformers, featur...
90320     [pytorch, mpnet, sentence-transformers, featur...
63555     [pytorch, bert, sentence-transformers, feature...
87707     [pytorch, mpnet, sentence-transformers, featur...
80570     [pytorch, bert, sentence-transformers, feature...
111407    [pytorch, bert, sentence-transformers, feature...
82690     [pytorch, mpnet, sentence-transformers, featur...
36217     [pytorch, bert, pl, dataset:Wikipedia, arxiv:1...
100086    [pytorch, roberta, sentence-transformers, feat...
Name: tags, dtype: object</code></pre>
</div>
</div>
<div id="cell-54" class="cell" data-execution_count="30">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1">top_libraries_df[top_libraries_df.library_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"timm"</span>].sample(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>)[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tags"</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="30">
<pre><code>104432                [pytorch, timm, image-classification]
110296    [pytorch, arxiv:2301.00808, timm, image-classi...
24158                 [pytorch, timm, image-classification]
26471                 [pytorch, timm, image-classification]
104437                [pytorch, timm, image-classification]
61630     [pytorch, dataset:beans, timm, image-classific...
110298    [pytorch, arxiv:2301.00808, timm, image-classi...
104015                [pytorch, timm, image-classification]
101124                [pytorch, timm, image-classification]
57882     [coreml, onnx, en, dataset:imagenet-1k, arxiv:...
83459     [pytorch, timm, image-classification, vision, ...
99461                 [pytorch, timm, image-classification]
104029                [pytorch, timm, image-classification]
84402     [pytorch, timm, image-classification, vision, ...
104428                [pytorch, timm, image-classification]
Name: tags, dtype: object</code></pre>
</div>
</div>
<p>We can see here that some tags for <code>sentence-transformers</code> are very closely tied to that libraries purpose e.g.&nbsp;the <code>sentence-similarity</code> tag. This tag migth be useful when a user is looking for models to do <code>sentence-similarity</code> but might be less useful if you are trying to choose <em>between</em> models for this task i.e.&nbsp;trying to find the <code>setence-transformer</code> model that will be useful for you. We should be careful, therefore, in treating number of tags as a proxy for quality.</p>
<section id="grouping-by-pipeline-tags" class="level3">
<h3 class="anchored" data-anchor-id="grouping-by-pipeline-tags">Grouping by pipeline tags</h3>
<p>We have a column in our dataframe <code>pipeline</code> tag, which refers to the type of task a model is for. We should be careful relying too much on this but we can have a quick look at how often these are used.</p>
<div id="cell-57" class="cell" data-execution_count="31">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1">models_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pipeline_tag"</span>].value_counts()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="31">
<pre><code>text-classification               14479
text2text-generation               8102
text-generation                    7602
reinforcement-learning             6885
token-classification               6386
automatic-speech-recognition       6238
fill-mask                          5447
question-answering                 3147
feature-extraction                 2661
translation                        1837
conversational                     1770
image-classification               1760
text-to-image                      1604
sentence-similarity                1248
summarization                       735
unconditional-image-generation      428
text-to-speech                      244
audio-classification                234
multiple-choice                     169
object-detection                    158
image-segmentation                  134
audio-to-audio                      130
tabular-classification               97
zero-shot-classification             97
image-to-text                        76
zero-shot-image-classification       56
video-classification                 50
table-question-answering             47
tabular-regression                   44
image-to-image                       43
depth-estimation                     37
document-question-answering          18
visual-question-answering            13
voice-activity-detection              6
other                                 4
time-series-forecasting               1
Name: pipeline_tag, dtype: int64</code></pre>
</div>
</div>
<p>We may also want to see if there are some type of task that have more tags.</p>
<div id="cell-59" class="cell" data-execution_count="32">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb44-1">models_df.groupby(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pipeline_tag"</span>)[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"number_of_tags"</span>].mean().sort_values().plot.barh()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://danielvanstrien.xyz/posts/post-with-code/metadata-explore/2023_01_16_hub_api_explore copy_files/figure-html/cell-33-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>We can also look at the breakdown for a particular task</p>
<div id="cell-61" class="cell" data-execution_count="98">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb45-1">text_classification_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> models_df[models_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pipeline_tag"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"text-classification"</span>]</span></code></pre></div>
</div>
<div id="cell-62" class="cell" data-execution_count="99">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb46-1">text_classification_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"number_of_tags"</span>].describe()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="99">
<pre><code>count    14479.000000
mean         5.948822
std          3.718800
min          1.000000
25%          4.000000
50%          5.000000
75%          7.000000
max        240.000000
Name: number_of_tags, dtype: float64</code></pre>
</div>
</div>
<p>Again, we have some extreme outliers</p>
<div id="cell-64" class="cell" data-execution_count="100">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb48-1">text_classification_df[text_classification_df.number_of_tags <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">230</span>][[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tags"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"modelId"</span>]]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="100">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">tags</th>
<th data-quarto-table-cell-role="th">modelId</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">22457</td>
<td>[pytorch, tf, roberta, text-classification, mu...</td>
<td>m3hrdadfi/zabanshenas-roberta-base-mix</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">101628</td>
<td>[pytorch, canine, text-classification, ace, af...</td>
<td>SebOchs/canine-c-lang-id</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>We see that these mostly seem to relate to language. Let‚Äôs remove these outliers and look at the distribution in the number of tags without these.</p>
<div id="cell-66" class="cell" data-execution_count="114">
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb49-1">text_classification_df_no_outliers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> text_classification_df[</span>
<span id="cb49-2">    text_classification_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"number_of_tags"</span>]</span>
<span id="cb49-3">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> text_classification_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"number_of_tags"</span>].quantile(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.95</span>)</span>
<span id="cb49-4">]</span>
<span id="cb49-5">text_classification_df_no_outliers[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"number_of_tags"</span>].plot.hist(bins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://danielvanstrien.xyz/posts/post-with-code/metadata-explore/2023_01_16_hub_api_explore copy_files/figure-html/cell-37-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
</section>
<section id="why-counting-tags-might-not-make-sense" class="level2">
<h2 class="anchored" data-anchor-id="why-counting-tags-might-not-make-sense">Why counting tags might not make sense</h2>
<p>I‚Äôe already hinted at why looking at raw number of tags might not be a good idea. Let‚Äôs close this blog by briefly digging into at least one reason why. We‚Äôll use the toolz library for some of this analysis.</p>
<div id="cell-68" class="cell" data-execution_count="102">
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb50-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> toolz <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> concat</span></code></pre></div>
</div>
<p>First we grab all the tags and put them in a single list.</p>
<div id="cell-70" class="cell" data-execution_count="103">
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb51-1">all_tags <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(concat(df.tags.tolist()))</span></code></pre></div>
</div>
<p>If we look at some examples, we‚Äôll see some tags are in the form of <code>something:somethingelse</code>.</p>
<div id="cell-72" class="cell" data-execution_count="104">
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb52-1">all_tags[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="104">
<pre><code>['pytorch',
 'tf',
 'albert',
 'fill-mask',
 'en',
 'dataset:bookcorpus',
 'dataset:wikipedia',
 'arxiv:1909.11942',
 'transformers',
 'exbert']</code></pre>
</div>
</div>
<p>for example <code>dataset:wikipedia</code>, we should therefore avoid treating all tags as the same since tags can have a particular purpose. i.e.&nbsp;indicating a dataset is associated with a model.</p>
<div id="cell-74" class="cell" data-execution_count="105">
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb54-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> is_special_tag(tag: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>):</span>
<span id="cb54-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">":"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> tag</span></code></pre></div>
</div>
<div id="cell-75" class="cell" data-execution_count="106">
<div class="sourceCode cell-code" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb55-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> toolz <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> countby, valmap</span></code></pre></div>
</div>
<div id="cell-76" class="cell" data-execution_count="107">
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb56-1">special_tag_vs_normal <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> countby(is_special_tag, all_tags)</span></code></pre></div>
</div>
<div id="cell-77" class="cell" data-execution_count="108">
<div class="sourceCode cell-code" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb57-1">special_tag_vs_normal</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="108">
<pre><code>{False: 467758, True: 115755}</code></pre>
</div>
</div>
<div id="cell-78" class="cell" data-execution_count="109">
<div class="sourceCode cell-code" id="cb59" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb59-1">total <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(special_tag_vs_normal.values())</span>
<span id="cb59-2">valmap(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> total, special_tag_vs_normal)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="109">
<pre><code>{False: 0.8016239569641121, True: 0.1983760430358878}</code></pre>
</div>
</div>
<p>We can see that a good chunk of tags are ‚Äòspecial‚Äô tags. i.e.&nbsp;they have a ‚Äòtype‚Äô associated with them. If we want to explore tags on the hub more carefully we‚Äôll need to take this into account‚Ä¶</p>


</section>

 ]]></description>
  <guid>https://danielvanstrien.xyz/posts/post-with-code/metadata-explore/2023_01_16_hub_api_explore copy.html</guid>
  <pubDate>Mon, 16 Jan 2023 00:00:00 GMT</pubDate>
  <media:content url="https://danielvanstrien.xyz/posts/post-with-code/metadata-explore/hub.png" medium="image" type="image/png" height="73" width="144"/>
</item>
<item>
  <title>Label Studio x Hugging Face datasets hub</title>
  <dc:creator>Daniel van Strien</dc:creator>
  <link>https://danielvanstrien.xyz/posts/post-with-code/label-studio-hub/2022-09-07-label-studio-annotations-hub.html</link>
  <description><![CDATA[ 




<section id="full-stack-deep-learning-annotating-data" class="level2">
<h2 class="anchored" data-anchor-id="full-stack-deep-learning-annotating-data">Full stack deep learning: annotating data</h2>
<p>I‚Äôm currently going through the <a href="https://fullstackdeeplearning.com">Full Stack Deep Learning course</a>. As part of this we‚Äôve been going through tools for different parts of the machine learning pipeline. This post talks about data annotation, and how we can combine Label Studio and the <a href="https://huggingface.co/datasets">Hugging Face Datasets hub</a>. I‚Äôll use the example of annotating image data for an image classification task. The details of why I‚Äôm annotating this data will wait for a future post!</p>
<p><strong>note</strong> this post assumes you already know roughly what the Hugging Face Hub is. If you don‚Äôt <a href="https://huggingface.co/course/chapter4/1">this</a> is a nice intro.</p>
</section>
<section id="what-is-the-goal" class="level2">
<h2 class="anchored" data-anchor-id="what-is-the-goal">What is the goal?</h2>
<p>We want to have a way of easily moving from different stages of our machine learning project pipeline. For many projects, especially the weird stuff I‚Äôm likely to do, you will need to do some of your own annotating. It almost always makes sense to move quickly between annotating a first batch of data, trying to train a model and iterating. This can help:</p>
<ul>
<li>flag issues with your data</li>
<li>identify if you have ambiguous labels</li>
<li>help you get some sense of how a model might perform on the task you are working on</li>
<li>allow you to deploy a model early so you can begin iterating on the whole pipeline</li>
<li>‚Ä¶</li>
</ul>
<a href="https://imgflip.com/i/6skdh9"><img src="https://i.imgflip.com/6skdh9.jpg" title="made at imgflip.com"></a>
<div>
<a href="https://imgflip.com/memegenerator">from Imgflip Meme Generator</a>
</div>
<p>This approach can cause some challenges; how do you keep updating your annotations, how can you version the changes?</p>
</section>
<section id="a-more-mundane-challenge" class="level2">
<h2 class="anchored" data-anchor-id="a-more-mundane-challenge">A more mundane challenge</h2>
<p>In the full stack deep learning course, one of the <a href="https://fullstackdeeplearning.com/course/2022/lab-6-data-annotation/">labs</a> covered using <a href="https://labelstud.io/guide/tasks">Label Studio</a> to annotate data. Label studio is a great open source tool for annotating data across a range of domains and for a variety of tasks.</p>
<p>Label studio has great support for annotating image data. One challenge we can face, however, is how to load images into label studio. This can be particularly tricky if you only have the images locally since label studio prefers images to be available via a URL. There are <a href="https://labelstud.io/guide/tasks.html#Import-data-from-a-local-directory">various ways around this</a> but we may also be able to tackle this challenge using the datasets hub.</p>
<p>We‚Äôll start by downloading a dataset we want annotate <strong>warning</strong> this dataset is pretty big ~44GB uncompressed.</p>
<div id="cell-3" class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span>bash</span>
<span id="cb1-2">wget https:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span>nlsfoundry.s3.amazonaws.com<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>nls<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>encyclopaediaBritannica.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span></span>
<span id="cb1-3">unzip <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span></span></code></pre></div>
</div>
<p>We‚Äôll import some standard libraries</p>
<div id="cell-5" class="cell" data-execution_count="89">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pathlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Path</span></code></pre></div>
</div>
</section>
<section id="create-a-new-dataset-on-the-hub" class="level2">
<h2 class="anchored" data-anchor-id="create-a-new-dataset-on-the-hub">Create a new dataset on the Hub</h2>
<p>Since we want to upload our data to the Hugging Face hub we‚Äôll create a new dataset on the Hugging Face Hub via the CLI.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">huggingface-cli</span> repo create encyclopaedia_britannica <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--type</span> dataset </span></code></pre></div>
<p>Under the hood, Hugging Face hub datasets (and models) are Git repositories. We‚Äôll clone this repo and move the downloaded dataset into this new Git repository.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> clone https://huggingface.co/datasets/davanstrien/encyclopaedia_britannica</span>
<span id="cb4-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mv</span> nls-data-encyclopaediaBritannica encyclopaedia_britannica/</span></code></pre></div>
<p>Since the number of examples in this dataset is beyond what we‚Äôre likely to annotate we do a bit of deleting of the dataset. You could also take a sample of the original but in this case I‚Äôm happy to reclaim some space on my hardrive!</p>
<div id="cell-11" class="cell" data-execution_count="92">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> shutil</span>
<span id="cb5-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> tqdm.auto <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tqdm</span></code></pre></div>
</div>
<p>first we get rid of some alto folders that we don‚Äôt need for the dataset we‚Äôre aiming to create</p>
<div id="cell-13" class="cell" data-execution_count="94">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> directory <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> tqdm(</span>
<span id="cb6-2">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb6-3">        (</span>
<span id="cb6-4">            Path(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"encyclopaedia_britannica/nls-data-encyclopaediaBritannica"</span>).rglob(</span>
<span id="cb6-5">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"*alto"</span></span>
<span id="cb6-6">            )</span>
<span id="cb6-7">        )</span>
<span id="cb6-8">    )</span>
<span id="cb6-9">):</span>
<span id="cb6-10">    shutil.rmtree(directory)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 195/195 [00:34&lt;00:00,  5.62it/s]</code></pre>
</div>
</div>
<p>there are a few other <code>*.xml</code> files in this dataset we also remove</p>
<div id="cell-15" class="cell" data-execution_count="95">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> xml_file <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> tqdm(</span>
<span id="cb8-2">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb8-3">        (</span>
<span id="cb8-4">            Path(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"encyclopaedia_britannica/nls-data-encyclopaediaBritannica"</span>).rglob(</span>
<span id="cb8-5">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"*xml"</span></span>
<span id="cb8-6">            )</span>
<span id="cb8-7">        )</span>
<span id="cb8-8">    )</span>
<span id="cb8-9">):</span>
<span id="cb8-10">    xml_file.unlink()</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 195/195 [00:00&lt;00:00, 1464.47it/s]</code></pre>
</div>
</div>
<p>Let‚Äôs take a look at how many images we have now</p>
<div id="cell-17" class="cell" data-execution_count="103">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">image_files <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb10-2">    (Path(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"encyclopaedia_britannica/nls-data-encyclopaediaBritannica"</span>).rglob(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"*jpg"</span>))</span>
<span id="cb10-3">)</span></code></pre></div>
</div>
<div id="cell-18" class="cell" data-execution_count="97">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(image_files)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="97">
<pre><code>155388</code></pre>
</div>
</div>
<p>We‚Äôre not likely to annotate this many images, let‚Äôs aim to have a max of 10,000 images. This is also likely to be more than we‚Äôll annotate but we may use a smaller sample for unsupervised pre-training.</p>
<div id="cell-20" class="cell" data-execution_count="104">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">num_to_remove <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(image_files) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10_000</span></span></code></pre></div>
</div>
<p>We‚Äôll now randomly remove the extra images we don‚Äôt need beyond our sample</p>
<div id="cell-22" class="cell" data-execution_count="105">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> random</span></code></pre></div>
</div>
<div id="cell-23" class="cell" data-execution_count="106">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">to_remove <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> random.sample(image_files, num_to_remove)</span>
<span id="cb15-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> tqdm(to_remove):</span>
<span id="cb15-3">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>.unlink()</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 90000/90000 [00:33&lt;00:00, 2659.02it/s]</code></pre>
</div>
</div>
<div id="cell-24" class="cell" data-execution_count="107">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(</span>
<span id="cb17-2">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb17-3">        (</span>
<span id="cb17-4">            Path(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"encyclopaedia_britannica/nls-data-encyclopaediaBritannica"</span>).rglob(</span>
<span id="cb17-5">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"*jpg"</span></span>
<span id="cb17-6">            )</span>
<span id="cb17-7">        )</span>
<span id="cb17-8">    )</span>
<span id="cb17-9">)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="107">
<pre><code>10000</code></pre>
</div>
</div>
<section id="uploading-our-raw-data-to-the-hub" class="level3">
<h3 class="anchored" data-anchor-id="uploading-our-raw-data-to-the-hub">Uploading our raw data to the hub</h3>
<p>We can now upload this data to the Hugging Face Hub. Under the hood the Hub uses Git so everything you love (and hate) about Git should be familiar. The main difference between using the hub and GitHub or another Git hosting platform is that the Hugging Face hub has support for large files. This means we can more easily work with large files (like our images).</p>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb19-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cd</span> encyclopaedia_britannica</span>
<span id="cb19-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> lfs track <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"*.jpg"</span></span>
<span id="cb19-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> add .gitattributes</span>
<span id="cb19-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> add nls-data-encyclopaediaBritannica</span>
<span id="cb19-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> commit <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-m</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"add image files"</span></span>
<span id="cb19-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> push</span></code></pre></div>
</section>
</section>
<section id="loading-local-files-and-metadata" class="level2">
<h2 class="anchored" data-anchor-id="loading-local-files-and-metadata">Loading local files and metadata</h2>
<p>The particular dataset we‚Äôre working with also has a metadata file associated with it. We can grab all of the images so we can put them in a DataFrame and merge this with metadata about these images. We may not use this extra metadata but it‚Äôs nice to have this additional metadata about our items alongside our annotations. This can help us debug where our model is performing badly later on.</p>
<div id="cell-29" class="cell" data-execution_count="108">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">image_files <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb20-2">    Path(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"encyclopaedia_britannica/nls-data-encyclopaediaBritannica"</span>).rglob(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"*.jpg"</span>)</span>
<span id="cb20-3">)</span></code></pre></div>
</div>
<div id="cell-30" class="cell" data-execution_count="109">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(image_files, columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"filename"</span>])</span></code></pre></div>
</div>
<p>This dataset also comes with some metadata. We‚Äôll load that in to another DataFrame</p>
<div id="cell-32" class="cell" data-execution_count="110">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">metadata_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(</span>
<span id="cb22-2">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"encyclopaedia_britannica/nls-data-encyclopaediaBritannica/encyclopaediaBritannica-inventory.csv"</span>,</span>
<span id="cb22-3">    header<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>,</span>
<span id="cb22-4">    names<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"id"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"meta"</span>],</span>
<span id="cb22-5">    dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"id"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"int64"</span>},</span>
<span id="cb22-6">)</span></code></pre></div>
</div>
<div id="cell-33" class="cell" data-execution_count="111">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"id"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.filename.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: x.parts[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]).astype(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"int64"</span>)</span></code></pre></div>
</div>
<div id="cell-34" class="cell" data-execution_count="112">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.merge(metadata_df, on<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"id"</span>)</span>
<span id="cb24-2">df</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="112">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">filename</th>
<th data-quarto-table-cell-role="th">id</th>
<th data-quarto-table-cell-role="th">meta</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>encyclopaedia_britannica/nls-data-encyclopaedi...</td>
<td>190273291</td>
<td>Encyclopaedia Britannica - Third edition, Volu...</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>encyclopaedia_britannica/nls-data-encyclopaedi...</td>
<td>190273291</td>
<td>Encyclopaedia Britannica - Third edition, Volu...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>encyclopaedia_britannica/nls-data-encyclopaedi...</td>
<td>190273291</td>
<td>Encyclopaedia Britannica - Third edition, Volu...</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>encyclopaedia_britannica/nls-data-encyclopaedi...</td>
<td>190273291</td>
<td>Encyclopaedia Britannica - Third edition, Volu...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>encyclopaedia_britannica/nls-data-encyclopaedi...</td>
<td>190273291</td>
<td>Encyclopaedia Britannica - Third edition, Volu...</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">...</td>
<td>...</td>
<td>...</td>
<td>...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">9995</td>
<td>encyclopaedia_britannica/nls-data-encyclopaedi...</td>
<td>193696083</td>
<td>Encyclopaedia Britannica - Seventh edition, Vo...</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">9996</td>
<td>encyclopaedia_britannica/nls-data-encyclopaedi...</td>
<td>193696083</td>
<td>Encyclopaedia Britannica - Seventh edition, Vo...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">9997</td>
<td>encyclopaedia_britannica/nls-data-encyclopaedi...</td>
<td>193696083</td>
<td>Encyclopaedia Britannica - Seventh edition, Vo...</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">9998</td>
<td>encyclopaedia_britannica/nls-data-encyclopaedi...</td>
<td>193696083</td>
<td>Encyclopaedia Britannica - Seventh edition, Vo...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">9999</td>
<td>encyclopaedia_britannica/nls-data-encyclopaedi...</td>
<td>193696083</td>
<td>Encyclopaedia Britannica - Seventh edition, Vo...</td>
</tr>
</tbody>
</table>

<p>10000 rows √ó 3 columns</p>
</div>
</div>
</div>
</section>
<section id="annotating-using-label-studio" class="level2">
<h2 class="anchored" data-anchor-id="annotating-using-label-studio">Annotating using label studio</h2>
<p>Now we have our images uploaded to the Hugging Face hub, how we go about annotating? As was mentioned already the Hugging Face hub is essentially a Git repo. Since we uploaded our image files individually i.e.&nbsp;not in a compressed folder, we can access each file from that repo. We mentioned before that label studio can load images from URLs. The hub has an API that we can use to interact with our repository. Let‚Äôs see how we can use this to get our data ready for label studio.</p>
<div id="cell-36" class="cell" data-execution_count="113">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> huggingface_hub <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> list_repo_files, hf_hub_url</span></code></pre></div>
</div>
<div id="cell-37" class="cell" data-execution_count="114">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">files <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> list_repo_files(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"davanstrien/encyclopaedia_britannica"</span>, repo_type<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dataset"</span>)</span>
<span id="cb26-2">files[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="114">
<pre><code>['.gitattributes',
 'nls-data-encyclopaediaBritannica/144133901/image/188082865.3.jpg']</code></pre>
</div>
</div>
<p>We‚Äôll filter out some data we are not interested in annotating</p>
<div id="cell-39" class="cell" data-execution_count="116">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1">files <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> files <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>.startswith(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"."</span>)]</span>
<span id="cb28-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(files)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="116">
<pre><code>10002</code></pre>
</div>
</div>
<p><code>hf_hub_url</code> can be used to generate the URL for a particular file</p>
<div id="cell-41" class="cell" data-execution_count="117">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1">hf_hub_url(</span>
<span id="cb30-2">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"davanstrien/encyclopaedia_britannica"</span>,</span>
<span id="cb30-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"192866824.3.jpg"</span>,</span>
<span id="cb30-4">    subfolder<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sample/nls-data-encyclopaediaBritannica/192547788/image"</span>,</span>
<span id="cb30-5">    repo_type<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dataset"</span>,</span>
<span id="cb30-6">)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="117">
<pre><code>'https://huggingface.co/datasets/davanstrien/encyclopaedia_britannica/resolve/main/sample/nls-data-encyclopaediaBritannica/192547788/image/192866824.3.jpg'</code></pre>
</div>
</div>
<p>We can use this to grab all of the URLs we‚Äôre interested in</p>
<div id="cell-43" class="cell" data-execution_count="118">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1">urls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb32-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> files:</span>
<span id="cb32-3">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>)</span>
<span id="cb32-4">    urls.append(</span>
<span id="cb32-5">        hf_hub_url(</span>
<span id="cb32-6">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"davanstrien/encyclopedia_britannica"</span>,</span>
<span id="cb32-7">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>.name,</span>
<span id="cb32-8">            subfolder<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>.parents[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>],</span>
<span id="cb32-9">            repo_type<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dataset"</span>,</span>
<span id="cb32-10">        )</span>
<span id="cb32-11">    )</span></code></pre></div>
</div>
<p>We can now load these into a DataFrame, and save this to a CSV file.</p>
<div id="cell-45" class="cell" data-execution_count="121">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1">pd.DataFrame(urls, columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"image"</span>]).to_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data.csv"</span>, index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span></code></pre></div>
</div>
<div id="cell-46" class="cell" data-execution_count="122">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1">pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data.csv"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="122">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">image</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>https://huggingface.co/datasets/davanstrien/en...</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>https://huggingface.co/datasets/davanstrien/en...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>https://huggingface.co/datasets/davanstrien/en...</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>https://huggingface.co/datasets/davanstrien/en...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>https://huggingface.co/datasets/davanstrien/en...</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">...</td>
<td>...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">9997</td>
<td>https://huggingface.co/datasets/davanstrien/en...</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">9998</td>
<td>https://huggingface.co/datasets/davanstrien/en...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">9999</td>
<td>https://huggingface.co/datasets/davanstrien/en...</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">10000</td>
<td>https://huggingface.co/datasets/davanstrien/en...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">10001</td>
<td>https://huggingface.co/datasets/davanstrien/en...</td>
</tr>
</tbody>
</table>

<p>10002 rows √ó 1 columns</p>
</div>
</div>
</div>
<section id="loading-annotations-into-label-studio" class="level3">
<h3 class="anchored" data-anchor-id="loading-annotations-into-label-studio">Loading annotations into label studio</h3>
<p>We can use this file to load our data into label studio <img src="https://raw.githubusercontent.com/davanstrien/blog/master/images/label-studio-import.webp" class="img-fluid" alt="Label Studio import"></p>
<p>From here, we need to define our annotation task. We can then begin annotating data.</p>
</section>
<section id="export-annotations" class="level3">
<h3 class="anchored" data-anchor-id="export-annotations">Export annotations</h3>
<p>You can either wait until you‚Äôve finished doing all the labels, however, we may have a lot of data to annotate so it‚Äôs likely instead that we will want to export once we‚Äôve either hit a reasonable number of labels or get too bored of annotating. There are various different export formats available in this case we‚Äôll use JSON-Min</p>
<p><img src="https://raw.githubusercontent.com/davanstrien/blog/master/images/label-studio-export.webp" class="img-fluid"></p>
</section>
<section id="load-annotations" class="level3">
<h3 class="anchored" data-anchor-id="load-annotations">Load annotations</h3>
<p>Now we have export our annotations lets load them into a new DatafFame. We‚Äôll only select the columns we‚Äôre interested in</p>
<div id="cell-51" class="cell" data-execution_count="123">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1">annotation_dataframe <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_json(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"project-3-at-2022-09-08-15-16-4279e901.json"</span>)[</span>
<span id="cb35-2">    [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"image"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"choice"</span>]</span>
<span id="cb35-3">]</span></code></pre></div>
</div>
<div id="cell-52" class="cell" data-execution_count="124">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1">annotation_dataframe</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="124">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">image</th>
<th data-quarto-table-cell-role="th">choice</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>https://huggingface.co/datasets/davanstrien/en...</td>
<td>text-only</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>https://huggingface.co/datasets/davanstrien/en...</td>
<td>text-only</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>https://huggingface.co/datasets/davanstrien/en...</td>
<td>text-only</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>https://huggingface.co/datasets/davanstrien/en...</td>
<td>text-only</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>https://huggingface.co/datasets/davanstrien/en...</td>
<td>text-only</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">...</td>
<td>...</td>
<td>...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">1516</td>
<td>https://huggingface.co/datasets/davanstrien/en...</td>
<td>text-only</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1517</td>
<td>https://huggingface.co/datasets/davanstrien/en...</td>
<td>text-only</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">1518</td>
<td>https://huggingface.co/datasets/davanstrien/en...</td>
<td>text-only</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1519</td>
<td>https://huggingface.co/datasets/davanstrien/en...</td>
<td>text-only</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">1520</td>
<td>https://huggingface.co/datasets/davanstrien/en...</td>
<td>text-only</td>
</tr>
</tbody>
</table>

<p>1521 rows √ó 2 columns</p>
</div>
</div>
</div>
<p>If we take a look at the URL for one of the annotations, you‚Äôll see that we still have a nice path that mirrors the folder structure of the original data. This also means we can merge this annotations DataFrame with our previous metadata DataFrame.</p>
<div id="cell-54" class="cell" data-execution_count="125">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1">annotation_dataframe.loc[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"image"</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="125">
<pre><code>'https://huggingface.co/datasets/davanstrien/encyclopaedia_britannica/resolve/main/nls-data-encyclopaediaBritannica/192693396/image/192979378.3.jpg'</code></pre>
</div>
</div>
<div id="cell-55" class="cell" data-execution_count="126">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1">annotation_dataframe.loc[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"image"</span>].split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/"</span>)[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>:]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="126">
<pre><code>['nls-data-encyclopaediaBritannica', '192693396', 'image', '192979378.3.jpg']</code></pre>
</div>
</div>
<div id="cell-56" class="cell" data-execution_count="127">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb41-1">annotation_dataframe[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"filename"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annotation_dataframe[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"image"</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(</span>
<span id="cb41-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/"</span>.join(x.split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/"</span>)[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>:])</span>
<span id="cb41-3">)</span></code></pre></div>
</div>
<div id="cell-57" class="cell" data-execution_count="128">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1">annotation_dataframe[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"filename"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annotation_dataframe[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"filename"</span>].astype(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>)</span></code></pre></div>
</div>
<div id="cell-58" class="cell" data-execution_count="129">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb43-1">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.merge(annotation_dataframe, on<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"filename"</span>, how<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"outer"</span>)</span></code></pre></div>
</div>
<div id="cell-59" class="cell" data-execution_count="130">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb44-1">df</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="130">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">filename</th>
<th data-quarto-table-cell-role="th">id</th>
<th data-quarto-table-cell-role="th">meta</th>
<th data-quarto-table-cell-role="th">image</th>
<th data-quarto-table-cell-role="th">choice</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>encyclopaedia_britannica/nls-data-encyclopaedi...</td>
<td>190273291.0</td>
<td>Encyclopaedia Britannica - Third edition, Volu...</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>encyclopaedia_britannica/nls-data-encyclopaedi...</td>
<td>190273291.0</td>
<td>Encyclopaedia Britannica - Third edition, Volu...</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>encyclopaedia_britannica/nls-data-encyclopaedi...</td>
<td>190273291.0</td>
<td>Encyclopaedia Britannica - Third edition, Volu...</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>encyclopaedia_britannica/nls-data-encyclopaedi...</td>
<td>190273291.0</td>
<td>Encyclopaedia Britannica - Third edition, Volu...</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>encyclopaedia_britannica/nls-data-encyclopaedi...</td>
<td>190273291.0</td>
<td>Encyclopaedia Britannica - Third edition, Volu...</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">11516</td>
<td>nls-data-encyclopaediaBritannica/144133901/ima...</td>
<td>NaN</td>
<td>NaN</td>
<td>https://huggingface.co/datasets/davanstrien/en...</td>
<td>text-only</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">11517</td>
<td>nls-data-encyclopaediaBritannica/144133901/ima...</td>
<td>NaN</td>
<td>NaN</td>
<td>https://huggingface.co/datasets/davanstrien/en...</td>
<td>text-only</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">11518</td>
<td>nls-data-encyclopaediaBritannica/144133901/ima...</td>
<td>NaN</td>
<td>NaN</td>
<td>https://huggingface.co/datasets/davanstrien/en...</td>
<td>text-only</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">11519</td>
<td>nls-data-encyclopaediaBritannica/144133901/ima...</td>
<td>NaN</td>
<td>NaN</td>
<td>https://huggingface.co/datasets/davanstrien/en...</td>
<td>text-only</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">11520</td>
<td>nls-data-encyclopaediaBritannica/144133901/ima...</td>
<td>NaN</td>
<td>NaN</td>
<td>https://huggingface.co/datasets/davanstrien/en...</td>
<td>text-only</td>
</tr>
</tbody>
</table>

<p>11521 rows √ó 5 columns</p>
</div>
</div>
</div>
<p>This means we can keep our nice orignal metadata intact but also add our additional metadata where it exists. Let‚Äôs check how many annotations we have</p>
<div id="cell-61" class="cell" data-execution_count="131">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb45-1">df.choice.value_counts()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="131">
<pre><code>text-only      1436
illustrated      70
Name: choice, dtype: int64</code></pre>
</div>
</div>
<p>We can also see how much of our dataset we have coverage for</p>
<div id="cell-63" class="cell" data-execution_count="132">
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb47-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(df[df.choice.notna()]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(df)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="132">
<pre><code>0.13071781963371235</code></pre>
</div>
</div>
</section>
<section id="how-to-use-our-annotations" class="level3">
<h3 class="anchored" data-anchor-id="how-to-use-our-annotations">How to use our annotations?</h3>
<p>We now have some annoations inside a DataFrame. What should we do we these? We can also use the Hub for storing this. This comes with a few benefits: - we keep our data and annotations in the same place. - since the Hub uses Git under the hood we also get versioning for our dataset. We can use this version information to track for example how different models perform during training as we add more labels.</p>
<p>Another nice thing about the Hub is that we can create dataset loading scripts to load our data. This script can use this CSV we‚Äôve just created and only load the data we have examples for.</p>
<p>First we‚Äôll save to a CSV file:</p>
<div id="cell-65" class="cell" data-execution_count="133">
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb49-1">df.to_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"annotations.csv"</span>, index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span></code></pre></div>
</div>
<p>We can then copy these into the same repository used to host our dataset.</p>
<div class="sourceCode" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb50-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cp</span> annotations.csv encyclopedia_britannica/</span></code></pre></div>
<p>Once we‚Äôve done this we can commit these and push our annotations to the hub:</p>
<div class="sourceCode" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb51-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cd</span> encyclopedia_britannica/</span>
<span id="cb51-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> add annotations.csv</span>
<span id="cb51-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> commit <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-m</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"update annotations"</span></span>
<span id="cb51-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> push</span></code></pre></div>
</section>
</section>
<section id="what-next" class="level2">
<h2 class="anchored" data-anchor-id="what-next">What next?</h2>
<p>We now have a repository which contains a bunch of images, and a CSV file which contains annotations for some of these images. How do we use this for model training? From this point we can create a dataset <a href="https://huggingface.co/docs/datasets/dataset_script">loading script</a> inside the same repository.</p>
<p>This dataset loading script will allow us to load the data from the hub using the <code>datasets</code> library. Additionally we can write this script so that it only loads data we have annotations for.</p>
<p>What does this mean: - we have a dataset we can use to train our model - the dataset is hosted on the Hugging Face hub which means it‚Äôs easy to share with other people - we can keep adding new annotations to this dataset and pushing our changes to the hub - Since the <code>datasets</code> library has nice caching support it will only download the dataset if there are changes. This change will be triggered by changes to our annotations.csv file.</p>
</section>
<section id="loading-the-dataset" class="level2">
<h2 class="anchored" data-anchor-id="loading-the-dataset">Loading the dataset</h2>
<p>Once we have our loading script we can load our annotations using the <code>datasets</code> library:</p>
<div id="cell-72" class="cell" data-execution_count="23">
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb52-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> datasets <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> load_dataset</span>
<span id="cb52-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> datasets</span></code></pre></div>
</div>
<div id="cell-73" class="cell" data-execution_count="26">
<div class="sourceCode cell-code" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb53-1">ds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> load_dataset(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'davanstrien/encyclopedia_britannica'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Using custom data configuration default
Reusing dataset encyclopedia_britannica (/Users/dvanstrien/.cache/huggingface/datasets/davanstrien___encyclopedia_britannica/default/1.1.0/8dd4d7982f31fd11ed71020b79b4b11a0068c8243080066e43b9fe3980934467)</code></pre>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"bffdc30c689746e2830939b0d78ae9eb","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
</div>
<div id="cell-74" class="cell" data-execution_count="27">
<div class="sourceCode cell-code" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb55-1">ds[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train'</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="27">
<pre><code>{'metadata': 'nan',
 'image': 'https://huggingface.co/datasets/davanstrien/encyclopaedia_britannica/resolve/main/nls-data-encyclopaediaBritannica/192693396/image/192979378.3.jpg',
 'label': 0}</code></pre>
</div>
</div>
<div id="cell-75" class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb57-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> datasets <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> load_dataset</span>
<span id="cb57-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> datasets.utils.file_utils <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> get_datasets_user_agent</span>
<span id="cb57-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> functools <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> partial</span>
<span id="cb57-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> concurrent.futures <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ThreadPoolExecutor</span>
<span id="cb57-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> urllib</span>
<span id="cb57-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> io</span>
<span id="cb57-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> PIL</span>
<span id="cb57-8"></span>
<span id="cb57-9">USER_AGENT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_datasets_user_agent()</span>
<span id="cb57-10"></span>
<span id="cb57-11"></span>
<span id="cb57-12"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> fetch_single_image(image_url, timeout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, retries<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>):</span>
<span id="cb57-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(retries <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb57-14">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">try</span>:</span>
<span id="cb57-15">            request <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> urllib.request.Request(</span>
<span id="cb57-16">                image_url,</span>
<span id="cb57-17">                data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>,</span>
<span id="cb57-18">                headers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user-agent"</span>: USER_AGENT},</span>
<span id="cb57-19">            )</span>
<span id="cb57-20">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> urllib.request.urlopen(request, timeout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>timeout) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> req:</span>
<span id="cb57-21">                image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PIL.Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(io.BytesIO(req.read()))</span>
<span id="cb57-22">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span></span>
<span id="cb57-23">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">except</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">Exception</span>:</span>
<span id="cb57-24">            image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb57-25">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> image</span>
<span id="cb57-26"></span>
<span id="cb57-27"></span>
<span id="cb57-28"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> fetch_images(batch, num_threads, timeout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, retries<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>):</span>
<span id="cb57-29">    fetch_single_image_with_args <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> partial(fetch_single_image, timeout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>timeout, retries<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>retries)</span>
<span id="cb57-30">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> ThreadPoolExecutor(max_workers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>num_threads) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> executor:</span>
<span id="cb57-31">        batch[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"image"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(executor.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(fetch_single_image_with_args, batch[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"image"</span>]))</span>
<span id="cb57-32">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> batch</span></code></pre></div>
</div>
<div id="cell-76" class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb58-1">num_threads <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span></span>
<span id="cb58-2">ds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ds.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(fetch_images, batched<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>, fn_kwargs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"num_threads"</span>: num_threads}, writer_batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Loading cached processed dataset at /Users/dvanstrien/.cache/huggingface/datasets/encyclopaedia_britannica/default/1.1.0/f7fb8d1f26daa72fbaf883bb1707e13d304414c1af16f02c00782c985971f87c/cache-fda9502ac5b20332.arrow</code></pre>
</div>
</div>
<div id="cell-77" class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb60" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb60-1">ds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ds.cast_column(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'image'</span>, datasets.Image())</span></code></pre></div>
</div>
<div id="cell-78" class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb61" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb61-1">ds[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train'</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'image'</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="19">
<div>
<figure class="figure">
<p><img src="https://danielvanstrien.xyz/posts/post-with-code/label-studio-hub/2022-09-07-label-studio-annotations-hub_files/figure-html/cell-42-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="where-wont-this-work" class="level2">
<h2 class="anchored" data-anchor-id="where-wont-this-work">Where won‚Äôt this work?</h2>
<p>This workflow is based on the assumption that the dataset you are annotating is public from the start. This is usually possible for the domain I work in (libraries) but could be a major blocker for other people. This workflow might also break if you have lots of people annotating. There are probably ways around this but things could start becoming a bit hacky‚Ä¶</p>
<p>The loading script for loading this dataset does some slightly strange things to avoid loading images that don‚Äôt yet have annotations. I think it would make sense to rework this script if you get to a point you are unlikely to do any more annotations.</p>


</section>

 ]]></description>
  <guid>https://danielvanstrien.xyz/posts/post-with-code/label-studio-hub/2022-09-07-label-studio-annotations-hub.html</guid>
  <pubDate>Wed, 07 Sep 2022 00:00:00 GMT</pubDate>
  <media:content url="https://danielvanstrien.xyz/posts/post-with-code/label-studio-hub/huggingface_hub_label_possum.webp" medium="image" type="image/webp"/>
</item>
<item>
  <title>Training an object detection model using Hugging Face</title>
  <dc:creator>Daniel van Strien</dc:creator>
  <link>https://danielvanstrien.xyz/posts/post-with-code/detr/2022-08-16-detr-object-detection.html</link>
  <description><![CDATA[ 




<section id="training-a-detr-object-detection-model-using-hugging-face-transformers-and-datasets" class="level2">
<h2 class="anchored" data-anchor-id="training-a-detr-object-detection-model-using-hugging-face-transformers-and-datasets">Training a Detr object detection model using Hugging Face transformers and datasets</h2>
<p>The Hugging Face <a href="https://huggingface.co/docs/transformers/index">transformers</a> library has increasingly expanded from its original focus on Natural Language Processing tasks to include more models covering a range of computer vision tasks. This blog post will look at how we can train an object detection model using the Hugging Face transformers and datasets libraries.</p>
</section>
<section id="what-is-object-detection" class="level2">
<h2 class="anchored" data-anchor-id="what-is-object-detection">What is object detection?</h2>
<p>Object detection is the task of predicting objects contained within an image.</p>
<p><img src="https://blog.jetbrains.com/wp-content/uploads/2022/01/dog.jpg" class="img-fluid"></p>
<p>Object detection can be helpful in several applications where you want to know not only whether a thing is in an image but where (and how many) of that thing there are. Various approaches have been developed over the years for this task, often relying on various complex hand-crafted features.</p>
<p>As with other areas of computer vision, there has been an increasing adoption of transformer-based solutions to this task. One model using transformers is the Detr architecture.</p>
</section>
<section id="what-is-detr" class="level2">
<h2 class="anchored" data-anchor-id="what-is-detr">What is Detr?</h2>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://danielvanstrien.xyz/posts/post-with-code/detr/detr_diagram.webp" class="img-fluid figure-img"></p>
<figcaption>Diagram of the DETR architecture</figcaption>
</figure>
</div>
<p>Detr (DEtection TRansformer) is a model architecture introduced in the paper <a href="https://arxiv.org/abs/2005.12872">End-to-End Object Detection with Transformers</a>. We won‚Äôt dig into the architecture in massive detail in this blog since we‚Äôre focused on the practical use of this model architecture in this post. One thing that is important to note here is that <code>DETR</code> still uses a CNN backbone. More recently, other models such as <a href="https://arxiv.org/abs/2106.00666">YOLOS</a> use a transformer backbone too. Currently, however, these fully transformer-based approaches show some performance gap over more traditional techniques (because this is deep learning, ‚Äòtraditional‚Äô refers to stuff from last year, of course).</p>
</section>
<section id="using-hugging-face-for-object-detection" class="level2">
<h2 class="anchored" data-anchor-id="using-hugging-face-for-object-detection">Using Hugging Face for object detection</h2>
<p>There are existing examples for using the Hugging Face transformers library and datasets with the <a href="https://huggingface.co/docs/transformers/main_classes/trainer">Trainer</a> class to do <a href="https://huggingface.co/blog/fine-tune-vit">image classification</a>. There are also <a href="https://github.com/NielsRogge/Transformers-Tutorials/tree/master/DETR">example notebooks</a> showing how to fine-tune a Detr model on custom data. However, I didn‚Äôt find examples that use the datasets library and the <a href="https://huggingface.co/docs/transformers/main_classes/trainer">Trainer</a> class to manage training. Training an object detection model using datasets and the transformers library is what this blog post covers.</p>
<section id="why-the-datasets-library" class="level3">
<h3 class="anchored" data-anchor-id="why-the-datasets-library">Why the datasets library?</h3>
<p>You may ask why it is helpful to provide an example of using the datasets library for training an object detection model, i.e.&nbsp;why not use PyTorch for the data loading, which already has many examples for training object detection models?</p>
<p>There are a few reasons why trying to use datasets for this can be helpful. A significant one for me is the close integration between the datasets library and the Hugging Face datasets hub. Loading a dataset from the hugging face hub often involves two lines of code (including the imports).</p>
<p>Quickly loading a dataset and then using the same library to prepare the dataset for training an object detection model removes some friction. This becomes especially helpful when you are iterating on the process of creating training data, training a model, and creating more training data. In this iterative process, the hub can be used for storing models and datasets at each stage. Having a clear provenance of these changes (without relying on additional tools) is also a benefit of this workflow. This is the kind of pipeline <a href="https://github.com/davanstrien/hugit-cli/">hugit</a> is intended to support (in this case, for image classification models).</p>
</section>
<section id="scope-of-this-blog-post" class="level3">
<h3 class="anchored" data-anchor-id="scope-of-this-blog-post">Scope of this blog post</h3>
<p>At the moment, this is mainly intended to give a quick overview of the steps involved. It isn‚Äôt intended to be a proper tutorial. If I have time later, I may flesh this out (particularly if other projects I‚Äôm working on that use object detection progress further).</p>
<p>Enough talk, let‚Äôs get started. First we install required libraries.</p>
<div id="cell-3" class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span>capture</span>
<span id="cb1-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>pip install datasets transformers timm wandb rich[jupyter]</span></code></pre></div>
</div>
<p>I‚Äôm a big fan of the <a href="https://rich.readthedocs.io/en/stable/">rich library</a> so almost always have this extension loaded.</p>
<div id="cell-5" class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>load_ext rich</span></code></pre></div>
</div>
<p>The next couple of lines gets us authenticated with the Hugging Face hub.</p>
<div id="cell-7" class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>git config <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">global</span> credential.helper store</span></code></pre></div>
</div>
<div id="cell-8" class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> huggingface_hub <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> notebook_login</span></code></pre></div>
</div>
<div id="cell-9" class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">notebook_login()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Login successful
Your token has been saved to /root/.huggingface/token</code></pre>
</div>
</div>
<p>We‚Äôll use <a href="https://wandb.ai/site">Weights and Biases</a> for tracking our model training.</p>
<div id="cell-11" class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> wandb</span></code></pre></div>
</div>
<div id="cell-12" class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">wandb.login()</span></code></pre></div>
</div>
<div id="cell-13" class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>env WANDB_PROJECT<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>chapbooks</span>
<span id="cb9-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>env WANDB_ENTITY<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>davanstrien</span></code></pre></div>
</div>
</section>
</section>
<section id="loading-the-dataset" class="level2">
<h2 class="anchored" data-anchor-id="loading-the-dataset">Loading the dataset</h2>
<p>In this blog post will use a dataset being added to the Hugging Face datasets hub as part of the <a href="https://github.com/bigscience-workshop/lam">BigLAM</a> hackathon. This dataset has a configuration for object detection and image classification, so we‚Äôll need to specify which one we want. Since the dataset doesn‚Äôt define train/test/valid splits for us, we‚Äôll grab the training split. I won‚Äôt provide a full description of the dataset in this blog post since the dataset is still in the process of being documented. The tl;dr summary is that the dataset includes images of digitized books with bounding boxes for illustrations.</p>
<div id="cell-15" class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> datasets <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> load_dataset</span>
<span id="cb10-2"></span>
<span id="cb10-3">dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> load_dataset(</span>
<span id="cb10-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"biglam/nls_chapbook_illustrations"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"illustration-detection"</span>, split<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"train"</span></span>
<span id="cb10-5">)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Reusing dataset nls_chapbook_illustrations (/Users/dvanstrien/.cache/huggingface/datasets/biglam___nls_chapbook_illustrations/illustration-detection/1.0.0/75f355eb0ba564ef120939a78730eb187a4d3eb682e987ed1f682a5bea5466eb)</code></pre>
</div>
</div>
<p>Let‚Äôs take a look at one example from this dataset to get a sense of how the data looks</p>
<div id="cell-17" class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">dataset[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="font-weight: bold">{</span>
    <span style="color: #008000; text-decoration-color: #008000">'image_id'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">4</span>,
    <span style="color: #008000; text-decoration-color: #008000">'image'</span>: <span style="font-weight: bold">&lt;</span><span style="color: #ff00ff; text-decoration-color: #ff00ff; font-weight: bold">PIL.JpegImagePlugin.JpegImageFile</span><span style="color: #000000; text-decoration-color: #000000"> image </span><span style="color: #808000; text-decoration-color: #808000">mode</span><span style="color: #000000; text-decoration-color: #000000">=</span><span style="color: #800080; text-decoration-color: #800080">RGB</span><span style="color: #000000; text-decoration-color: #000000"> </span><span style="color: #808000; text-decoration-color: #808000">size</span><span style="color: #000000; text-decoration-color: #000000">=</span><span style="color: #800080; text-decoration-color: #800080">60</span><span style="color: #008080; text-decoration-color: #008080; font-weight: bold">0x1080</span><span style="color: #000000; text-decoration-color: #000000"> at </span><span style="color: #008080; text-decoration-color: #008080; font-weight: bold">0x7FDD6504FAD0</span><span style="font-weight: bold">&gt;</span>,
    <span style="color: #008000; text-decoration-color: #008000">'width'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">600</span>,
    <span style="color: #008000; text-decoration-color: #008000">'height'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1080</span>,
    <span style="color: #008000; text-decoration-color: #008000">'url'</span>: <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>,
    <span style="color: #008000; text-decoration-color: #008000">'date_captured'</span>: <span style="color: #008000; text-decoration-color: #008000">''</span>,
    <span style="color: #008000; text-decoration-color: #008000">'objects'</span>: <span style="font-weight: bold">[</span>
        <span style="font-weight: bold">{</span>
            <span style="color: #008000; text-decoration-color: #008000">'category_id'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">0</span>,
            <span style="color: #008000; text-decoration-color: #008000">'image_id'</span>: <span style="color: #008000; text-decoration-color: #008000">'4'</span>,
            <span style="color: #008000; text-decoration-color: #008000">'id'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span>,
            <span style="color: #008000; text-decoration-color: #008000">'area'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">110901</span>,
            <span style="color: #008000; text-decoration-color: #008000">'bbox'</span>: <span style="font-weight: bold">[</span><span style="color: #008080; text-decoration-color: #008080; font-weight: bold">34.529998779296875</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">556.8300170898438</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">401.44000244140625</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">276.260009765625</span><span style="font-weight: bold">]</span>,
            <span style="color: #008000; text-decoration-color: #008000">'segmentation'</span>: <span style="font-weight: bold">[</span>
                <span style="font-weight: bold">[</span>
                    <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">34.529998779296875</span>,
                    <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">556.8300170898438</span>,
                    <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">435.9700012207031</span>,
                    <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">556.8300170898438</span>,
                    <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">435.9700012207031</span>,
                    <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">833.0900268554688</span>,
                    <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">34.529998779296875</span>,
                    <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">833.0900268554688</span>
                <span style="font-weight: bold">]</span>
            <span style="font-weight: bold">]</span>,
            <span style="color: #008000; text-decoration-color: #008000">'iscrowd'</span>: <span style="color: #ff0000; text-decoration-color: #ff0000; font-style: italic">False</span>
        <span style="font-weight: bold">}</span>
    <span style="font-weight: bold">]</span>
<span style="font-weight: bold">}</span>
</pre>
</div>
</div>
<p>You will see we hav some metadata for the image, the image itself and the field <code>objects</code> contains the annotations themselves. Looking just at an example of the annotations:</p>
<div id="cell-19" class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># hide_output</span></span>
<span id="cb13-2">{</span>
<span id="cb13-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"category_id"</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb13-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"image_id"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"4"</span>,</span>
<span id="cb13-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"id"</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb13-6">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"area"</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">110901</span>,</span>
<span id="cb13-7">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bbox"</span>: [</span>
<span id="cb13-8">        <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">34.529998779296875</span>,</span>
<span id="cb13-9">        <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">556.8300170898438</span>,</span>
<span id="cb13-10">        <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">401.44000244140625</span>,</span>
<span id="cb13-11">        <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">276.260009765625</span>,</span>
<span id="cb13-12">    ],</span>
<span id="cb13-13">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"segmentation"</span>: [</span>
<span id="cb13-14">        [</span>
<span id="cb13-15">            <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">34.529998779296875</span>,</span>
<span id="cb13-16">            <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">556.8300170898438</span>,</span>
<span id="cb13-17">            <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">435.9700012207031</span>,</span>
<span id="cb13-18">            <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">556.8300170898438</span>,</span>
<span id="cb13-19">            <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">435.9700012207031</span>,</span>
<span id="cb13-20">            <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">833.0900268554688</span>,</span>
<span id="cb13-21">            <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">34.529998779296875</span>,</span>
<span id="cb13-22">            <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">833.0900268554688</span>,</span>
<span id="cb13-23">        ]</span>
<span id="cb13-24">    ],</span>
<span id="cb13-25">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"iscrowd"</span>: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>,</span>
<span id="cb13-26">}</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>{'category_id': 0,
 'image_id': '4',
 'id': 1,
 'area': 110901,
 'bbox': [34.529998779296875,
  556.8300170898438,
  401.44000244140625,
  276.260009765625],
 'segmentation': [[34.529998779296875,
   556.8300170898438,
   435.9700012207031,
   556.8300170898438,
   435.9700012207031,
   833.0900268554688,
   34.529998779296875,
   833.0900268554688]],
 'iscrowd': False}</code></pre>
</div>
</div>
<p>We see here, that we again have some metadata for each image. We also have a <code>category_id</code> and a <code>bbox</code>. Some of these fields should look familiar to you if you are familiar with the <a href="https://cocodataset.org/">coco</a> format. This will become relevant later, so don‚Äôt worry if these aren‚Äôt familiar to you.</p>
<p>One issue we can run into when training object detection models is stray bounding boxes (i.e.&nbsp;ones where the bounding boxes stretch beyond the edge of the image). We can check and remove these quite easily. This is some ugly code/there is probably a better way, but this is a quick check, so I‚Äôll forgive myself.</p>
<div id="cell-21" class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> tqdm.auto <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tqdm</span></code></pre></div>
</div>
<div id="cell-22" class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">remove_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb16-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> idx, row <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> tqdm(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(dataset)):</span>
<span id="cb16-3">    objects_ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"objects"</span>]</span>
<span id="cb16-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ob <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> objects_:</span>
<span id="cb16-5">        bbox <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ob[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bbox"</span>]</span>
<span id="cb16-6">        negative <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [box <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> box <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> bbox <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> box <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb16-7">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> negative:</span>
<span id="cb16-8">            remove_idx.append(idx)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"a3c0d2386f334d238441126da158585e","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
</div>
<div id="cell-23" class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(remove_idx)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span>
</pre>
</div>
</div>
<div id="cell-24" class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">keep <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [i <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(dataset)) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> remove_idx]</span>
<span id="cb18-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(keep)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #008080; text-decoration-color: #008080; font-weight: bold">7257</span>
</pre>
</div>
</div>
<p>The above code has given us a list of indexes to keep so we use the <code>select</code> method to grab those.</p>
<div id="cell-26" class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dataset.select(keep)</span></code></pre></div>
</div>
<p>We also create a test split. If we were properly doing this we‚Äôd likely want to be a bit more thoughfull about how to do this split.</p>
<div id="cell-28" class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dataset.train_test_split(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>)</span></code></pre></div>
</div>
</section>
<section id="preparing-the-data" class="level2">
<h2 class="anchored" data-anchor-id="preparing-the-data">Preparing the data</h2>
<p>This section of the blog post is the bit which focuses on getting data ready for an object detection model such as detr via the datasets library. This is, therefore, also the section which will differ most from the other examples showing how to train models using PyTorch data loaders.</p>
<section id="the-feature-extractor" class="level3">
<h3 class="anchored" data-anchor-id="the-feature-extractor">The Feature Extractor</h3>
<p>If you are familiar with Hugging Face for natural language tasks, you are probably familiar with using <code>Tokenizer_for_blah_model</code> when pre-processing text. Often if you are using a pre-trained model, you will use <code>AutoTokenizer.from_pretrained</code>, passing in the ID to the model you want to fine-tune. This tokenizer then ensures that the tokenization matches the approach used for the pre-trained model.</p>
<p>The Feature Extractor performs a similar task. Let‚Äôs look at this more closely. We‚Äôll use a pre-trained model for this example and fine-tune it. I also include commented-out code, which shows how you could use the same process with any CNN backbone. This may be useful if you have particular requirements about what backbone to use or if you have a CNN backbone that is already fine-tuned on your domain.</p>
<div id="cell-30" class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">model_checkpoint <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"facebook/detr-resnet-50"</span></span></code></pre></div>
</div>
<div id="cell-31" class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> transformers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> DetrFeatureExtractor</span>
<span id="cb22-2"></span>
<span id="cb22-3">feature_extractor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DetrFeatureExtractor.from_pretrained(model_checkpoint)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"9722fcf5be06468d958a5aaef044a458","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
</div>
<p>If you wanted to use a different CNN backbone as your starting point you would instead define a config.</p>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># from transformers import DetrConfig</span></span>
<span id="cb23-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># from transformers import DetrFeatureExtractor</span></span>
<span id="cb23-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># feature_extractor = DetrFeatureExtractor()</span></span></code></pre></div>
<section id="what-does-the-feature-extractor-do" class="level4">
<h4 class="anchored" data-anchor-id="what-does-the-feature-extractor-do">What does the feature extractor do?</h4>
<p>To check what feature extractor does we can make use of the handy <code>inspect</code> function</p>
<div id="cell-35" class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rich <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> inspect</span></code></pre></div>
</div>
<div id="cell-36" class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># collapse_show</span></span>
<span id="cb25-2">inspect(feature_extractor, methods<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, dunder<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #000080; text-decoration-color: #000080">‚ï≠‚îÄ DetrFeatureExtractor </span><span style="color: #000080; text-decoration-color: #000080; font-weight: bold">{</span><span style="color: #000080; text-decoration-color: #000080">   </span><span style="color: #008000; text-decoration-color: #008000">"do_normalize"</span><span style="color: #000080; text-decoration-color: #000080">: true,   </span><span style="color: #008000; text-decoration-color: #008000">"do_resize"</span><span style="color: #000080; text-decoration-color: #000080">: true,   </span><span style="color: #008000; text-decoration-color: #008000">"feature_extractor_type"</span><span style="color: #000080; text-decoration-color: #000080">: </span><span style="color: #008000; text-decoration-color: #008000">"DetrFeatureEx</span><span style="color: #000080; text-decoration-color: #000080">‚îÄ‚ïÆ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span> <span style="color: #00ffff; text-decoration-color: #00ffff; font-style: italic">def </span><span style="font-weight: bold">(</span>images: Union<span style="font-weight: bold">[</span>PIL.Image.Image, numpy.ndarray, <span style="color: #800080; text-decoration-color: #800080; font-weight: bold">ForwardRef</span><span style="font-weight: bold">(</span><span style="color: #008000; text-decoration-color: #008000">'torch.Tensor'</span><span style="font-weight: bold">)</span>, List<span style="font-weight: bold">[</span>PIL.Image.Image<span style="font-weight: bold">]</span>,           <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span> List<span style="font-weight: bold">[</span>numpy.ndarray<span style="font-weight: bold">]</span>, List<span style="font-weight: bold">[</span><span style="color: #800080; text-decoration-color: #800080; font-weight: bold">ForwardRef</span><span style="font-weight: bold">(</span><span style="color: #008000; text-decoration-color: #008000">'torch.Tensor'</span><span style="font-weight: bold">)]]</span>, annotations: Union<span style="font-weight: bold">[</span>List<span style="font-weight: bold">[</span>Dict<span style="font-weight: bold">]</span>, List<span style="font-weight: bold">[</span>List<span style="font-weight: bold">[</span>Dict<span style="font-weight: bold">]]]</span> =      <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span> <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>, return_segmentation_masks: Union<span style="font-weight: bold">[</span>bool, NoneType<span style="font-weight: bold">]</span> = <span style="color: #ff0000; text-decoration-color: #ff0000; font-style: italic">False</span>, masks_path: Union<span style="font-weight: bold">[</span>pathlib.Path, NoneType<span style="font-weight: bold">]</span> =     <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span> <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>, pad_and_return_pixel_mask: Union<span style="font-weight: bold">[</span>bool, NoneType<span style="font-weight: bold">]</span> = <span style="color: #00ff00; text-decoration-color: #00ff00; font-style: italic">True</span>, return_tensors: Union<span style="font-weight: bold">[</span>str,                       <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span> transformers.utils.generic.TensorType, NoneType<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>, **kwargs<span style="font-weight: bold">)</span> -&gt;                                           <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span> transformers.feature_extraction_utils.BatchFeature:                                                             <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                                                                                                                 <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span> <span style="color: #008080; text-decoration-color: #008080">Constructs a DETR feature extractor.</span>                                                                            <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                                                                                                                 <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                <span style="color: #808000; text-decoration-color: #808000; font-style: italic">_auto_class</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>                                                                               <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                   <span style="color: #bfbf7f; text-decoration-color: #bfbf7f; font-style: italic">__dict__</span> = <span style="font-weight: bold">{</span>                                                                                  <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                                  <span style="color: #008000; text-decoration-color: #008000">'_processor_class'</span>: <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>,                                                      <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                                  <span style="color: #008000; text-decoration-color: #008000">'feature_extractor_type'</span>: <span style="color: #008000; text-decoration-color: #008000">'DetrFeatureExtractor'</span>,                              <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                                  <span style="color: #008000; text-decoration-color: #008000">'format'</span>: <span style="color: #008000; text-decoration-color: #008000">'coco_detection'</span>,                                                    <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                                  <span style="color: #008000; text-decoration-color: #008000">'do_resize'</span>: <span style="color: #00ff00; text-decoration-color: #00ff00; font-style: italic">True</span>,                                                             <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                                  <span style="color: #008000; text-decoration-color: #008000">'size'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">800</span>,                                                                   <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                                  <span style="color: #008000; text-decoration-color: #008000">'max_size'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1333</span>,                                                              <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                                  <span style="color: #008000; text-decoration-color: #008000">'do_normalize'</span>: <span style="color: #00ff00; text-decoration-color: #00ff00; font-style: italic">True</span>,                                                          <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                                  <span style="color: #008000; text-decoration-color: #008000">'image_mean'</span>: <span style="font-weight: bold">[</span><span style="color: #008080; text-decoration-color: #008080; font-weight: bold">0.485</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">0.456</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">0.406</span><span style="font-weight: bold">]</span>,                                           <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                                  <span style="color: #008000; text-decoration-color: #008000">'image_std'</span>: <span style="font-weight: bold">[</span><span style="color: #008080; text-decoration-color: #008080; font-weight: bold">0.229</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">0.224</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">0.225</span><span style="font-weight: bold">]</span>                                             <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="font-weight: bold">}</span>                                                                                  <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>               <span style="color: #808000; text-decoration-color: #808000; font-style: italic">do_normalize</span> = <span style="color: #00ff00; text-decoration-color: #00ff00; font-style: italic">True</span>                                                                               <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                  <span style="color: #808000; text-decoration-color: #808000; font-style: italic">do_resize</span> = <span style="color: #00ff00; text-decoration-color: #00ff00; font-style: italic">True</span>                                                                               <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                    <span style="color: #bfbf7f; text-decoration-color: #bfbf7f; font-style: italic">__doc__</span> = <span style="color: #008000; text-decoration-color: #008000">'\n    Constructs a DETR feature extractor.\n\n    This feature extractor inherits</span> <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008000; text-decoration-color: #008000">from [`FeatureExtractionMixin`] which contains most of the main methods. Users\n  </span> <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008000; text-decoration-color: #008000">should refer to this superclass for more information regarding those </span>              <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008000; text-decoration-color: #008000">methods.\n\n\n    Args:\n        format (`str`, *optional*, defaults to </span>           <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008000; text-decoration-color: #008000">`"coco_detection"`):\n            Data format of the annotations. One of </span>          <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008000; text-decoration-color: #008000">"coco_detection" or "coco_panoptic".\n        do_resize (`bool`, *optional*, </span>      <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008000; text-decoration-color: #008000">defaults to `True`):\n            Whether to resize the input to a certain </span>        <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008000; text-decoration-color: #008000">`size`.\n        size (`int`, *optional*, defaults to 800):\n            Resize </span>   <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008000; text-decoration-color: #008000">the input to the given size. Only has an effect if `do_resize` is set to `True`. </span>  <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008000; text-decoration-color: #008000">If size is a\n            sequence like `(width, height)`, output size will be </span>    <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008000; text-decoration-color: #008000">matched to this. If size is an int, smaller edge of\n            the image will be</span> <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008000; text-decoration-color: #008000">matched to this number. i.e, if `height &gt; width`, then image will be rescaled to </span>  <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008000; text-decoration-color: #008000">`(size *\n            height / width, size)`.\n        max_size (`int`, </span>           <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008000; text-decoration-color: #008000">*optional*, defaults to `1333`):\n            The largest size an image dimension </span> <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008000; text-decoration-color: #008000">can have (otherwise it\'s capped). Only has an effect if `do_resize` is\n         </span> <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008000; text-decoration-color: #008000">set to `True`.\n        do_normalize (`bool`, *optional*, defaults to `True`):\n  </span> <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008000; text-decoration-color: #008000">Whether or not to normalize the input with mean and standard deviation.\n        </span>  <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008000; text-decoration-color: #008000">image_mean (`int`, *optional*, defaults to `[0.485, 0.456, 0.406]`):\n            </span> <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008000; text-decoration-color: #008000">The sequence of means for each channel, to be used when normalizing images. </span>       <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008000; text-decoration-color: #008000">Defaults to the ImageNet mean.\n        image_std (`int`, *optional*, defaults to </span> <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008000; text-decoration-color: #008000">`[0.229, 0.224, 0.225]`):\n            The sequence of standard deviations for </span>    <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008000; text-decoration-color: #008000">each channel, to be used when normalizing images. Defaults to the\n            </span>    <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008000; text-decoration-color: #008000">ImageNet std.\n    '</span>                                                               <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>     <span style="color: #808000; text-decoration-color: #808000; font-style: italic">feature_extractor_type</span> = <span style="color: #008000; text-decoration-color: #008000">'DetrFeatureExtractor'</span>                                                             <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                     <span style="color: #808000; text-decoration-color: #808000; font-style: italic">format</span> = <span style="color: #008000; text-decoration-color: #008000">'coco_detection'</span>                                                                   <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                 <span style="color: #808000; text-decoration-color: #808000; font-style: italic">image_mean</span> = <span style="font-weight: bold">[</span><span style="color: #008080; text-decoration-color: #008080; font-weight: bold">0.485</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">0.456</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">0.406</span><span style="font-weight: bold">]</span>                                                              <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                  <span style="color: #808000; text-decoration-color: #808000; font-style: italic">image_std</span> = <span style="font-weight: bold">[</span><span style="color: #008080; text-decoration-color: #008080; font-weight: bold">0.229</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">0.224</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">0.225</span><span style="font-weight: bold">]</span>                                                              <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                   <span style="color: #808000; text-decoration-color: #808000; font-style: italic">max_size</span> = <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1333</span>                                                                               <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>          <span style="color: #808000; text-decoration-color: #808000; font-style: italic">model_input_names</span> = <span style="font-weight: bold">[</span><span style="color: #008000; text-decoration-color: #008000">'pixel_values'</span>, <span style="color: #008000; text-decoration-color: #008000">'pixel_mask'</span><span style="font-weight: bold">]</span>                                                     <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                 <span style="color: #bfbf7f; text-decoration-color: #bfbf7f; font-style: italic">__module__</span> = <span style="color: #008000; text-decoration-color: #008000">'transformers.models.detr.feature_extraction_detr'</span>                                 <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>           <span style="color: #808000; text-decoration-color: #808000; font-style: italic">_processor_class</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>                                                                               <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                       <span style="color: #808000; text-decoration-color: #808000; font-style: italic">size</span> = <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">800</span>                                                                                <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                <span style="color: #bfbf7f; text-decoration-color: #bfbf7f; font-style: italic">__weakref__</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>                                                                               <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                   <span style="color: #bfbf7f; text-decoration-color: #bfbf7f; font-style: italic">__call__</span> = <span style="color: #00ffff; text-decoration-color: #00ffff; font-style: italic">def </span><span style="color: #800000; text-decoration-color: #800000; font-weight: bold">__call__</span><span style="font-weight: bold">(</span>images: Union<span style="font-weight: bold">[</span>PIL.Image.Image, numpy.ndarray,                         <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #800080; text-decoration-color: #800080; font-weight: bold">ForwardRef</span><span style="font-weight: bold">(</span><span style="color: #008000; text-decoration-color: #008000">'torch.Tensor'</span><span style="font-weight: bold">)</span>, List<span style="font-weight: bold">[</span>PIL.Image.Image<span style="font-weight: bold">]</span>, List<span style="font-weight: bold">[</span>numpy.ndarray<span style="font-weight: bold">]</span>,            <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              List<span style="font-weight: bold">[</span><span style="color: #800080; text-decoration-color: #800080; font-weight: bold">ForwardRef</span><span style="font-weight: bold">(</span><span style="color: #008000; text-decoration-color: #008000">'torch.Tensor'</span><span style="font-weight: bold">)]]</span>, annotations: Union<span style="font-weight: bold">[</span>List<span style="font-weight: bold">[</span>Dict<span style="font-weight: bold">]</span>,                  <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              List<span style="font-weight: bold">[</span>List<span style="font-weight: bold">[</span>Dict<span style="font-weight: bold">]]]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>, return_segmentation_masks: Union<span style="font-weight: bold">[</span>bool, NoneType<span style="font-weight: bold">]</span> =       <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #ff0000; text-decoration-color: #ff0000; font-style: italic">False</span>, masks_path: Union<span style="font-weight: bold">[</span>pathlib.Path, NoneType<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>,                           <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              pad_and_return_pixel_mask: Union<span style="font-weight: bold">[</span>bool, NoneType<span style="font-weight: bold">]</span> = <span style="color: #00ff00; text-decoration-color: #00ff00; font-style: italic">True</span>, return_tensors:           <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              Union<span style="font-weight: bold">[</span>str, transformers.utils.generic.TensorType, NoneType<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>, **kwargs<span style="font-weight: bold">)</span> -&gt;   <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              transformers.feature_extraction_utils.BatchFeature:                                <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">Main method to prepare for the model one or several </span><span style="color: #bf7fbf; text-decoration-color: #bf7fbf; font-weight: bold">image</span><span style="color: #7f7f7f; text-decoration-color: #7f7f7f; font-weight: bold">(</span><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">s</span><span style="color: #7f7f7f; text-decoration-color: #7f7f7f; font-weight: bold">)</span><span style="color: #7f7f7f; text-decoration-color: #7f7f7f"> and optional </span>         <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">annotations. Images are by default</span>                                                 <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">padded up to the largest image in a batch, and a pixel mask is created that </span>       <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">indicates which pixels are</span>                                                         <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">real/which are padding.</span>                                                            <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                <span style="color: #808000; text-decoration-color: #808000; font-style: italic">center_crop</span> = <span style="color: #00ffff; text-decoration-color: #00ffff; font-style: italic">def </span><span style="color: #800000; text-decoration-color: #800000; font-weight: bold">center_crop</span><span style="font-weight: bold">(</span>image, size<span style="font-weight: bold">)</span>:                                                      <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">Crops `image` to the given size using a center crop. Note that if the image is too</span> <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">small to be cropped to the</span>                                                         <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">size given, it will be padded </span><span style="color: #7f7f7f; text-decoration-color: #7f7f7f; font-weight: bold">(</span><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">so the returned result has the size asked</span><span style="color: #7f7f7f; text-decoration-color: #7f7f7f; font-weight: bold">)</span><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">.</span>         <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                  <span style="color: #bfbf7f; text-decoration-color: #bfbf7f; font-style: italic">__class__</span> = <span style="color: #00ffff; text-decoration-color: #00ffff; font-style: italic">class </span><span style="color: #800000; text-decoration-color: #800000; font-weight: bold">__class__</span><span style="font-weight: bold">(</span><span style="color: #808000; text-decoration-color: #808000">format</span>=<span style="color: #008000; text-decoration-color: #008000">'coco_detection'</span>, <span style="color: #808000; text-decoration-color: #808000">do_resize</span>=<span style="color: #00ff00; text-decoration-color: #00ff00; font-style: italic">True</span>, <span style="color: #808000; text-decoration-color: #808000">size</span>=<span style="color: #008080; text-decoration-color: #008080; font-weight: bold">800</span>, <span style="color: #808000; text-decoration-color: #808000">max_size</span>=<span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1333</span>,  <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #808000; text-decoration-color: #808000">do_normalize</span>=<span style="color: #00ff00; text-decoration-color: #00ff00; font-style: italic">True</span>, <span style="color: #808000; text-decoration-color: #808000">image_mean</span>=<span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>, <span style="color: #808000; text-decoration-color: #808000">image_std</span>=<span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>, **kwargs<span style="font-weight: bold">)</span>: <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">Constructs a DETR </span>  <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">feature extractor.</span>                                                                 <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>  <span style="color: #808000; text-decoration-color: #808000; font-style: italic">convert_coco_poly_to_mask</span> = <span style="color: #00ffff; text-decoration-color: #00ffff; font-style: italic">def </span><span style="color: #800000; text-decoration-color: #800000; font-weight: bold">convert_coco_poly_to_mask</span><span style="font-weight: bold">(</span>segmentations, height, width<span style="font-weight: bold">)</span>:                       <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                <span style="color: #808000; text-decoration-color: #808000; font-style: italic">convert_rgb</span> = <span style="color: #00ffff; text-decoration-color: #00ffff; font-style: italic">def </span><span style="color: #800000; text-decoration-color: #800000; font-weight: bold">convert_rgb</span><span style="font-weight: bold">(</span>image<span style="font-weight: bold">)</span>: <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">Converts `PIL.Image.Image` to RGB format.</span>                  <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>        <span style="color: #808000; text-decoration-color: #808000; font-style: italic">_create_or_get_repo</span> = <span style="color: #00ffff; text-decoration-color: #00ffff; font-style: italic">def </span><span style="color: #800000; text-decoration-color: #800000; font-weight: bold">_create_or_get_repo</span><span style="font-weight: bold">(</span>repo_path_or_name: Union<span style="font-weight: bold">[</span>str, NoneType<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>, repo_url:  <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              Union<span style="font-weight: bold">[</span>str, NoneType<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>, organization: Union<span style="font-weight: bold">[</span>str, NoneType<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>, private:   <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              bool = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>, use_auth_token: Union<span style="font-weight: bold">[</span>bool, str, NoneType<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span><span style="font-weight: bold">)</span> -&gt;                 <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              huggingface_hub.repository.Repository:                                             <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                <span style="color: #bfbf7f; text-decoration-color: #bfbf7f; font-style: italic">__delattr__</span> = <span style="color: #00ffff; text-decoration-color: #00ffff; font-style: italic">def </span><span style="color: #800000; text-decoration-color: #800000; font-weight: bold">__delattr__</span><span style="font-weight: bold">(</span>name, <span style="color: #800080; text-decoration-color: #800080">/</span><span style="font-weight: bold">)</span>: <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">Implement </span><span style="color: #bf7fbf; text-decoration-color: #bf7fbf; font-weight: bold">delattr</span><span style="color: #7f7f7f; text-decoration-color: #7f7f7f; font-weight: bold">(</span><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">self, name</span><span style="color: #7f7f7f; text-decoration-color: #7f7f7f; font-weight: bold">)</span><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">.</span>                           <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                    <span style="color: #bfbf7f; text-decoration-color: #bfbf7f; font-style: italic">__dir__</span> = <span style="color: #00ffff; text-decoration-color: #00ffff; font-style: italic">def </span><span style="color: #800000; text-decoration-color: #800000; font-weight: bold">__dir__</span><span style="font-weight: bold">()</span>: <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">Default </span><span style="color: #bf7fbf; text-decoration-color: #bf7fbf; font-weight: bold">dir</span><span style="color: #7f7f7f; text-decoration-color: #7f7f7f; font-weight: bold">()</span><span style="color: #7f7f7f; text-decoration-color: #7f7f7f"> implementation.</span>                                       <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>   <span style="color: #808000; text-decoration-color: #808000; font-style: italic">_ensure_format_supported</span> = <span style="color: #00ffff; text-decoration-color: #00ffff; font-style: italic">def </span><span style="color: #800000; text-decoration-color: #800000; font-weight: bold">_ensure_format_supported</span><span style="font-weight: bold">(</span>image<span style="font-weight: bold">)</span>:                                               <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                     <span style="color: #bfbf7f; text-decoration-color: #bfbf7f; font-style: italic">__eq__</span> = <span style="color: #00ffff; text-decoration-color: #00ffff; font-style: italic">def </span><span style="color: #800000; text-decoration-color: #800000; font-weight: bold">__eq__</span><span style="font-weight: bold">(</span>value, <span style="color: #800080; text-decoration-color: #800080">/</span><span style="font-weight: bold">)</span>: <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">Return </span><span style="color: #bfbf7f; text-decoration-color: #bfbf7f">self</span><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">==value.</span>                                          <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                <span style="color: #808000; text-decoration-color: #808000; font-style: italic">expand_dims</span> = <span style="color: #00ffff; text-decoration-color: #00ffff; font-style: italic">def </span><span style="color: #800000; text-decoration-color: #800000; font-weight: bold">expand_dims</span><span style="font-weight: bold">(</span>image<span style="font-weight: bold">)</span>: <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">Expands </span><span style="color: #7fbfbf; text-decoration-color: #7fbfbf; font-weight: bold">2</span><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">-dimensional `image` to </span><span style="color: #7fbfbf; text-decoration-color: #7fbfbf; font-weight: bold">3</span><span style="color: #7f7f7f; text-decoration-color: #7f7f7f"> dimensions.</span>             <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                 <span style="color: #bfbf7f; text-decoration-color: #bfbf7f; font-style: italic">__format__</span> = <span style="color: #00ffff; text-decoration-color: #00ffff; font-style: italic">def </span><span style="color: #800000; text-decoration-color: #800000; font-weight: bold">__format__</span><span style="font-weight: bold">(</span>format_spec, <span style="color: #800080; text-decoration-color: #800080">/</span><span style="font-weight: bold">)</span>: <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">Default object formatter.</span>                          <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                  <span style="color: #808000; text-decoration-color: #808000; font-style: italic">from_dict</span> = <span style="color: #00ffff; text-decoration-color: #00ffff; font-style: italic">def </span><span style="color: #800000; text-decoration-color: #800000; font-weight: bold">from_dict</span><span style="font-weight: bold">(</span>feature_extractor_dict: Dict<span style="font-weight: bold">[</span>str, Any<span style="font-weight: bold">]</span>, **kwargs<span style="font-weight: bold">)</span> -&gt;                 <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #800080; text-decoration-color: #800080; font-weight: bold">ForwardRef</span><span style="font-weight: bold">(</span><span style="color: #008000; text-decoration-color: #008000">'SequenceFeatureExtractor'</span><span style="font-weight: bold">)</span>:                                            <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">Instantiates a type of </span><span style="color: #7f7f7f; text-decoration-color: #7f7f7f; font-weight: bold">[</span><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">`~feature_extraction_utils.FeatureExtractionMixin`</span><span style="color: #7f7f7f; text-decoration-color: #7f7f7f; font-weight: bold">]</span><span style="color: #7f7f7f; text-decoration-color: #7f7f7f"> from a</span> <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">Python dictionary of</span>                                                               <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">parameters.</span>                                                                        <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>             <span style="color: #808000; text-decoration-color: #808000; font-style: italic">from_json_file</span> = <span style="color: #00ffff; text-decoration-color: #00ffff; font-style: italic">def </span><span style="color: #800000; text-decoration-color: #800000; font-weight: bold">from_json_file</span><span style="font-weight: bold">(</span>json_file: Union<span style="font-weight: bold">[</span>str, os.PathLike<span style="font-weight: bold">])</span> -&gt;                          <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #800080; text-decoration-color: #800080; font-weight: bold">ForwardRef</span><span style="font-weight: bold">(</span><span style="color: #008000; text-decoration-color: #008000">'SequenceFeatureExtractor'</span><span style="font-weight: bold">)</span>:                                            <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">Instantiates a feature extractor of type </span>                                          <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #7f7f7f; text-decoration-color: #7f7f7f; font-weight: bold">[</span><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">`~feature_extraction_utils.FeatureExtractionMixin`</span><span style="color: #7f7f7f; text-decoration-color: #7f7f7f; font-weight: bold">]</span><span style="color: #7f7f7f; text-decoration-color: #7f7f7f"> from the path to</span>              <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">a JSON file of parameters.</span>                                                         <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>            <span style="color: #808000; text-decoration-color: #808000; font-style: italic">from_pretrained</span> = <span style="color: #00ffff; text-decoration-color: #00ffff; font-style: italic">def </span><span style="color: #800000; text-decoration-color: #800000; font-weight: bold">from_pretrained</span><span style="font-weight: bold">(</span>pretrained_model_name_or_path: Union<span style="font-weight: bold">[</span>str, os.PathLike<span style="font-weight: bold">]</span>,        <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              **kwargs<span style="font-weight: bold">)</span> -&gt; <span style="color: #800080; text-decoration-color: #800080; font-weight: bold">ForwardRef</span><span style="font-weight: bold">(</span><span style="color: #008000; text-decoration-color: #008000">'SequenceFeatureExtractor'</span><span style="font-weight: bold">)</span>:                               <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">Instantiate a type of </span><span style="color: #7f7f7f; text-decoration-color: #7f7f7f; font-weight: bold">[</span><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">`~feature_extraction_utils.FeatureExtractionMixin`</span><span style="color: #7f7f7f; text-decoration-color: #7f7f7f; font-weight: bold">]</span><span style="color: #7f7f7f; text-decoration-color: #7f7f7f"> from a </span> <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">feature extractor, *e.g.* a</span>                                                        <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">derived class of </span><span style="color: #7f7f7f; text-decoration-color: #7f7f7f; font-weight: bold">[</span><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">`SequenceFeatureExtractor`</span><span style="color: #7f7f7f; text-decoration-color: #7f7f7f; font-weight: bold">]</span><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">.</span>                                     <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                     <span style="color: #bfbf7f; text-decoration-color: #bfbf7f; font-style: italic">__ge__</span> = <span style="color: #00ffff; text-decoration-color: #00ffff; font-style: italic">def </span><span style="color: #800000; text-decoration-color: #800000; font-weight: bold">__ge__</span><span style="font-weight: bold">(</span>value, <span style="color: #800080; text-decoration-color: #800080">/</span><span style="font-weight: bold">)</span>: <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">Return self&gt;=value.</span>                                          <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span> <span style="color: #808000; text-decoration-color: #808000; font-style: italic">get_feature_extractor_dict</span> = <span style="color: #00ffff; text-decoration-color: #00ffff; font-style: italic">def </span><span style="color: #800000; text-decoration-color: #800000; font-weight: bold">get_feature_extractor_dict</span><span style="font-weight: bold">(</span>pretrained_model_name_or_path: Union<span style="font-weight: bold">[</span>str,           <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              os.PathLike<span style="font-weight: bold">]</span>, **kwargs<span style="font-weight: bold">)</span> -&gt; Tuple<span style="font-weight: bold">[</span>Dict<span style="font-weight: bold">[</span>str, Any<span style="font-weight: bold">]</span>, Dict<span style="font-weight: bold">[</span>str, Any<span style="font-weight: bold">]]</span>:                  <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">From a `pretrained_model_name_or_path`, resolve to a dictionary of parameters, to </span> <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">be used for instantiating a</span>                                                        <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">feature extractor of type </span><span style="color: #7f7f7f; text-decoration-color: #7f7f7f; font-weight: bold">[</span><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">`~feature_extraction_utils.FeatureExtractionMixin`</span><span style="color: #7f7f7f; text-decoration-color: #7f7f7f; font-weight: bold">]</span><span style="color: #7f7f7f; text-decoration-color: #7f7f7f"> </span>    <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">using `from_dict`.</span>                                                                 <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>    <span style="color: #808000; text-decoration-color: #808000; font-style: italic">_get_repo_url_from_name</span> = <span style="color: #00ffff; text-decoration-color: #00ffff; font-style: italic">def </span><span style="color: #800000; text-decoration-color: #800000; font-weight: bold">_get_repo_url_from_name</span><span style="font-weight: bold">(</span>repo_name: str, organization: Union<span style="font-weight: bold">[</span>str, NoneType<span style="font-weight: bold">]</span> =   <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>, private: bool = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>, use_auth_token: Union<span style="font-weight: bold">[</span>bool, str, NoneType<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span><span style="font-weight: bold">)</span> -&gt;  <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              str:                                                                               <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>           <span style="color: #bfbf7f; text-decoration-color: #bfbf7f; font-style: italic">__getattribute__</span> = <span style="color: #00ffff; text-decoration-color: #00ffff; font-style: italic">def </span><span style="color: #800000; text-decoration-color: #800000; font-weight: bold">__getattribute__</span><span style="font-weight: bold">(</span>name, <span style="color: #800080; text-decoration-color: #800080">/</span><span style="font-weight: bold">)</span>: <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">Return </span><span style="color: #bf7fbf; text-decoration-color: #bf7fbf; font-weight: bold">getattr</span><span style="color: #7f7f7f; text-decoration-color: #7f7f7f; font-weight: bold">(</span><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">self, name</span><span style="color: #7f7f7f; text-decoration-color: #7f7f7f; font-weight: bold">)</span><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">.</span>                         <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                     <span style="color: #bfbf7f; text-decoration-color: #bfbf7f; font-style: italic">__gt__</span> = <span style="color: #00ffff; text-decoration-color: #00ffff; font-style: italic">def </span><span style="color: #800000; text-decoration-color: #800000; font-weight: bold">__gt__</span><span style="font-weight: bold">(</span>value, <span style="color: #800080; text-decoration-color: #800080">/</span><span style="font-weight: bold">)</span>: <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">Return self&gt;value.</span>                                           <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                   <span style="color: #bfbf7f; text-decoration-color: #bfbf7f; font-style: italic">__hash__</span> = <span style="color: #00ffff; text-decoration-color: #00ffff; font-style: italic">def </span><span style="color: #800000; text-decoration-color: #800000; font-weight: bold">__hash__</span><span style="font-weight: bold">()</span>: <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">Return </span><span style="color: #bf7fbf; text-decoration-color: #bf7fbf; font-weight: bold">hash</span><span style="color: #7f7f7f; text-decoration-color: #7f7f7f; font-weight: bold">(</span><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">self</span><span style="color: #7f7f7f; text-decoration-color: #7f7f7f; font-weight: bold">)</span><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">.</span>                                                 <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                   <span style="color: #bfbf7f; text-decoration-color: #bfbf7f; font-style: italic">__init__</span> = <span style="color: #00ffff; text-decoration-color: #00ffff; font-style: italic">def </span><span style="color: #800000; text-decoration-color: #800000; font-weight: bold">__init__</span><span style="font-weight: bold">(</span><span style="color: #808000; text-decoration-color: #808000">format</span>=<span style="color: #008000; text-decoration-color: #008000">'coco_detection'</span>, <span style="color: #808000; text-decoration-color: #808000">do_resize</span>=<span style="color: #00ff00; text-decoration-color: #00ff00; font-style: italic">True</span>, <span style="color: #808000; text-decoration-color: #808000">size</span>=<span style="color: #008080; text-decoration-color: #008080; font-weight: bold">800</span>, <span style="color: #808000; text-decoration-color: #808000">max_size</span>=<span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1333</span>,     <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #808000; text-decoration-color: #808000">do_normalize</span>=<span style="color: #00ff00; text-decoration-color: #00ff00; font-style: italic">True</span>, <span style="color: #808000; text-decoration-color: #808000">image_mean</span>=<span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>, <span style="color: #808000; text-decoration-color: #808000">image_std</span>=<span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>, **kwargs<span style="font-weight: bold">)</span>: <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">Set elements of </span>    <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">`kwargs` as attributes.</span>                                                            <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>          <span style="color: #bfbf7f; text-decoration-color: #bfbf7f; font-style: italic">__init_subclass__</span> = <span style="color: #00ffff; text-decoration-color: #00ffff; font-style: italic">def </span><span style="color: #800000; text-decoration-color: #800000; font-weight: bold">__init_subclass__</span><span style="font-weight: bold">(</span><span style="color: #808000; text-decoration-color: #808000">...</span><span style="font-weight: bold">)</span> <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">This method is called when a class is subclassed.</span>       <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>           <span style="color: #808000; text-decoration-color: #808000; font-style: italic">_is_valid_format</span> = <span style="color: #00ffff; text-decoration-color: #00ffff; font-style: italic">def </span><span style="color: #800000; text-decoration-color: #800000; font-weight: bold">_is_valid_format</span><span style="font-weight: bold">(</span>format<span style="font-weight: bold">)</span>:                                                      <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                     <span style="color: #bfbf7f; text-decoration-color: #bfbf7f; font-style: italic">__le__</span> = <span style="color: #00ffff; text-decoration-color: #00ffff; font-style: italic">def </span><span style="color: #800000; text-decoration-color: #800000; font-weight: bold">__le__</span><span style="font-weight: bold">(</span>value, <span style="color: #800080; text-decoration-color: #800080">/</span><span style="font-weight: bold">)</span>: <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">Return self&lt;=value.</span>                                          <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                     <span style="color: #bfbf7f; text-decoration-color: #bfbf7f; font-style: italic">__lt__</span> = <span style="color: #00ffff; text-decoration-color: #00ffff; font-style: italic">def </span><span style="color: #800000; text-decoration-color: #800000; font-weight: bold">__lt__</span><span style="font-weight: bold">(</span>value, <span style="color: #800080; text-decoration-color: #800080">/</span><span style="font-weight: bold">)</span>: <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">Return self&lt;value.</span>                                           <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>               <span style="color: #808000; text-decoration-color: #808000; font-style: italic">_max_by_axis</span> = <span style="color: #00ffff; text-decoration-color: #00ffff; font-style: italic">def </span><span style="color: #800000; text-decoration-color: #800000; font-weight: bold">_max_by_axis</span><span style="font-weight: bold">(</span>the_list<span style="font-weight: bold">)</span>:                                                        <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                     <span style="color: #bfbf7f; text-decoration-color: #bfbf7f; font-style: italic">__ne__</span> = <span style="color: #00ffff; text-decoration-color: #00ffff; font-style: italic">def </span><span style="color: #800000; text-decoration-color: #800000; font-weight: bold">__ne__</span><span style="font-weight: bold">(</span>value, <span style="color: #800080; text-decoration-color: #800080">/</span><span style="font-weight: bold">)</span>: <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">Return self!=value.</span>                                          <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                    <span style="color: #bfbf7f; text-decoration-color: #bfbf7f; font-style: italic">__new__</span> = <span style="color: #00ffff; text-decoration-color: #00ffff; font-style: italic">def </span><span style="color: #800000; text-decoration-color: #800000; font-weight: bold">__new__</span><span style="font-weight: bold">(</span>*args, **kwargs<span style="font-weight: bold">)</span>: <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">Create and return a new object.  See </span><span style="color: #bf7fbf; text-decoration-color: #bf7fbf; font-weight: bold">help</span><span style="color: #7f7f7f; text-decoration-color: #7f7f7f; font-weight: bold">(</span><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">type</span><span style="color: #7f7f7f; text-decoration-color: #7f7f7f; font-weight: bold">)</span><span style="color: #7f7f7f; text-decoration-color: #7f7f7f"> for </span> <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">accurate signature.</span>                                                                <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                 <span style="color: #808000; text-decoration-color: #808000; font-style: italic">_normalize</span> = <span style="color: #00ffff; text-decoration-color: #00ffff; font-style: italic">def </span><span style="color: #800000; text-decoration-color: #800000; font-weight: bold">_normalize</span><span style="font-weight: bold">(</span>image, mean, std, <span style="color: #808000; text-decoration-color: #808000">target</span>=<span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span><span style="font-weight: bold">)</span>: <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">Normalize the image with a certain </span> <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">mean and std.</span>                                                                      <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                  <span style="color: #808000; text-decoration-color: #808000; font-style: italic">normalize</span> = <span style="color: #00ffff; text-decoration-color: #00ffff; font-style: italic">def </span><span style="color: #800000; text-decoration-color: #800000; font-weight: bold">normalize</span><span style="font-weight: bold">(</span>image, mean, std<span style="font-weight: bold">)</span>:                                                   <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">Normalizes `image` with `mean` and `std`. Note that this will trigger a conversion</span> <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">of `image` to a NumPy array</span>                                                        <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">if it's a PIL Image.</span>                                                               <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>  <span style="color: #808000; text-decoration-color: #808000; font-style: italic">pad_and_create_pixel_mask</span> = <span style="color: #00ffff; text-decoration-color: #00ffff; font-style: italic">def </span><span style="color: #800000; text-decoration-color: #800000; font-weight: bold">pad_and_create_pixel_mask</span><span style="font-weight: bold">(</span>pixel_values_list: List<span style="font-weight: bold">[</span><span style="color: #800080; text-decoration-color: #800080; font-weight: bold">ForwardRef</span><span style="font-weight: bold">(</span><span style="color: #008000; text-decoration-color: #008000">'torch.Tensor'</span><span style="font-weight: bold">)]</span>, <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              return_tensors: Union<span style="font-weight: bold">[</span>str, transformers.utils.generic.TensorType, NoneType<span style="font-weight: bold">]</span> =      <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span><span style="font-weight: bold">)</span>: <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">Pad images up to the largest image in a batch and create a corresponding </span>   <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">`pixel_mask`.</span>                                                                      <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>               <span style="color: #808000; text-decoration-color: #808000; font-style: italic">post_process</span> = <span style="color: #00ffff; text-decoration-color: #00ffff; font-style: italic">def </span><span style="color: #800000; text-decoration-color: #800000; font-weight: bold">post_process</span><span style="font-weight: bold">(</span>outputs, target_sizes<span style="font-weight: bold">)</span>:                                           <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">Converts the output of </span><span style="color: #7f7f7f; text-decoration-color: #7f7f7f; font-weight: bold">[</span><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">`DetrForObjectDetection`</span><span style="color: #7f7f7f; text-decoration-color: #7f7f7f; font-weight: bold">]</span><span style="color: #7f7f7f; text-decoration-color: #7f7f7f"> into the format expected by the </span> <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">COCO api. Only supports</span>                                                            <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">PyTorch.</span>                                                                           <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>      <span style="color: #808000; text-decoration-color: #808000; font-style: italic">post_process_instance</span> = <span style="color: #00ffff; text-decoration-color: #00ffff; font-style: italic">def </span><span style="color: #800000; text-decoration-color: #800000; font-weight: bold">post_process_instance</span><span style="font-weight: bold">(</span>results, outputs, orig_target_sizes, max_target_sizes,   <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #808000; text-decoration-color: #808000">threshold</span>=<span style="color: #008080; text-decoration-color: #008080; font-weight: bold">0.5</span><span style="font-weight: bold">)</span>:                                                                    <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">Converts the output of </span><span style="color: #7f7f7f; text-decoration-color: #7f7f7f; font-weight: bold">[</span><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">`DetrForSegmentation`</span><span style="color: #7f7f7f; text-decoration-color: #7f7f7f; font-weight: bold">]</span><span style="color: #7f7f7f; text-decoration-color: #7f7f7f"> into actual instance segmentation </span>  <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">predictions. Only supports</span>                                                         <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">PyTorch.</span>                                                                           <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>      <span style="color: #808000; text-decoration-color: #808000; font-style: italic">post_process_panoptic</span> = <span style="color: #00ffff; text-decoration-color: #00ffff; font-style: italic">def </span><span style="color: #800000; text-decoration-color: #800000; font-weight: bold">post_process_panoptic</span><span style="font-weight: bold">(</span>outputs, processed_sizes, <span style="color: #808000; text-decoration-color: #808000">target_sizes</span>=<span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>,             <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #808000; text-decoration-color: #808000">is_thing_map</span>=<span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>, <span style="color: #808000; text-decoration-color: #808000">threshold</span>=<span style="color: #008080; text-decoration-color: #008080; font-weight: bold">0.85</span><span style="font-weight: bold">)</span>: <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">Converts the output of </span><span style="color: #7f7f7f; text-decoration-color: #7f7f7f; font-weight: bold">[</span><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">`DetrForSegmentation`</span><span style="color: #7f7f7f; text-decoration-color: #7f7f7f; font-weight: bold">]</span> <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">into actual panoptic predictions. Only supports PyTorch.</span>                           <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>  <span style="color: #808000; text-decoration-color: #808000; font-style: italic">post_process_segmentation</span> = <span style="color: #00ffff; text-decoration-color: #00ffff; font-style: italic">def </span><span style="color: #800000; text-decoration-color: #800000; font-weight: bold">post_process_segmentation</span><span style="font-weight: bold">(</span>outputs, target_sizes, <span style="color: #808000; text-decoration-color: #808000">threshold</span>=<span style="color: #008080; text-decoration-color: #008080; font-weight: bold">0.9</span>,                <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #808000; text-decoration-color: #808000">mask_threshold</span>=<span style="color: #008080; text-decoration-color: #008080; font-weight: bold">0.5</span><span style="font-weight: bold">)</span>: <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">Converts the output of </span><span style="color: #7f7f7f; text-decoration-color: #7f7f7f; font-weight: bold">[</span><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">`DetrForSegmentation`</span><span style="color: #7f7f7f; text-decoration-color: #7f7f7f; font-weight: bold">]</span><span style="color: #7f7f7f; text-decoration-color: #7f7f7f"> into image </span>    <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">segmentation predictions. Only supports PyTorch.</span>                                   <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                    <span style="color: #808000; text-decoration-color: #808000; font-style: italic">prepare</span> = <span style="color: #00ffff; text-decoration-color: #00ffff; font-style: italic">def </span><span style="color: #800000; text-decoration-color: #800000; font-weight: bold">prepare</span><span style="font-weight: bold">(</span>image, target, <span style="color: #808000; text-decoration-color: #808000">return_segmentation_masks</span>=<span style="color: #ff0000; text-decoration-color: #ff0000; font-style: italic">False</span>, <span style="color: #808000; text-decoration-color: #808000">masks_path</span>=<span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span><span style="font-weight: bold">)</span>:      <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>     <span style="color: #808000; text-decoration-color: #808000; font-style: italic">prepare_coco_detection</span> = <span style="color: #00ffff; text-decoration-color: #00ffff; font-style: italic">def </span><span style="color: #800000; text-decoration-color: #800000; font-weight: bold">prepare_coco_detection</span><span style="font-weight: bold">(</span>image, target, <span style="color: #808000; text-decoration-color: #808000">return_segmentation_masks</span>=<span style="color: #ff0000; text-decoration-color: #ff0000; font-style: italic">False</span><span style="font-weight: bold">)</span>:        <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">Convert the target in COCO format into the format expected by DETR.</span>                <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>      <span style="color: #808000; text-decoration-color: #808000; font-style: italic">prepare_coco_panoptic</span> = <span style="color: #00ffff; text-decoration-color: #00ffff; font-style: italic">def </span><span style="color: #800000; text-decoration-color: #800000; font-weight: bold">prepare_coco_panoptic</span><span style="font-weight: bold">(</span>image, target, masks_path, <span style="color: #808000; text-decoration-color: #808000">return_masks</span>=<span style="color: #00ff00; text-decoration-color: #00ff00; font-style: italic">True</span><span style="font-weight: bold">)</span>:           <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>               <span style="color: #808000; text-decoration-color: #808000; font-style: italic">_push_to_hub</span> = <span style="color: #00ffff; text-decoration-color: #00ffff; font-style: italic">def </span><span style="color: #800000; text-decoration-color: #800000; font-weight: bold">_push_to_hub</span><span style="font-weight: bold">(</span>repo: huggingface_hub.repository.Repository, commit_message:      <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              Union<span style="font-weight: bold">[</span>str, NoneType<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span><span style="font-weight: bold">)</span> -&gt; str:                                               <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                <span style="color: #808000; text-decoration-color: #808000; font-style: italic">push_to_hub</span> = <span style="color: #00ffff; text-decoration-color: #00ffff; font-style: italic">def </span><span style="color: #800000; text-decoration-color: #800000; font-weight: bold">push_to_hub</span><span style="font-weight: bold">(</span>repo_path_or_name: Union<span style="font-weight: bold">[</span>str, NoneType<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>, repo_url:          <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              Union<span style="font-weight: bold">[</span>str, NoneType<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>, use_temp_dir: bool = <span style="color: #ff0000; text-decoration-color: #ff0000; font-style: italic">False</span>, commit_message:           <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              Union<span style="font-weight: bold">[</span>str, NoneType<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>, organization: Union<span style="font-weight: bold">[</span>str, NoneType<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>, private:   <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              Union<span style="font-weight: bold">[</span>bool, NoneType<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>, use_auth_token: Union<span style="font-weight: bold">[</span>bool, str, NoneType<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>,   <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              **model_card_kwargs<span style="font-weight: bold">)</span> -&gt; str:                                                       <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">Upload the feature extractor file to the ü§ó Model Hub while synchronizing a local </span> <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">clone of the repo in</span>                                                               <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">`repo_path_or_name`.</span>                                                               <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                 <span style="color: #bfbf7f; text-decoration-color: #bfbf7f; font-style: italic">__reduce__</span> = <span style="color: #00ffff; text-decoration-color: #00ffff; font-style: italic">def </span><span style="color: #800000; text-decoration-color: #800000; font-weight: bold">__reduce__</span><span style="font-weight: bold">()</span>: <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">Helper for pickle.</span>                                               <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>              <span style="color: #bfbf7f; text-decoration-color: #bfbf7f; font-style: italic">__reduce_ex__</span> = <span style="color: #00ffff; text-decoration-color: #00ffff; font-style: italic">def </span><span style="color: #800000; text-decoration-color: #800000; font-weight: bold">__reduce_ex__</span><span style="font-weight: bold">(</span>protocol, <span style="color: #800080; text-decoration-color: #800080">/</span><span style="font-weight: bold">)</span>: <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">Helper for pickle.</span>                                 <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>    <span style="color: #808000; text-decoration-color: #808000; font-style: italic">register_for_auto_class</span> = <span style="color: #00ffff; text-decoration-color: #00ffff; font-style: italic">def </span><span style="color: #800000; text-decoration-color: #800000; font-weight: bold">register_for_auto_class</span><span style="font-weight: bold">(</span><span style="color: #808000; text-decoration-color: #808000">auto_class</span>=<span style="color: #008000; text-decoration-color: #008000">'AutoFeatureExtractor'</span><span style="font-weight: bold">)</span>:                    <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">Register this class with a given auto class. This should only be used for custom </span>  <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">feature extractors as the ones</span>                                                     <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">in the library are already mapped with `AutoFeatureExtractor`.</span>                     <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                   <span style="color: #bfbf7f; text-decoration-color: #bfbf7f; font-style: italic">__repr__</span> = <span style="color: #00ffff; text-decoration-color: #00ffff; font-style: italic">def </span><span style="color: #800000; text-decoration-color: #800000; font-weight: bold">__repr__</span><span style="font-weight: bold">()</span>: <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">Return </span><span style="color: #bf7fbf; text-decoration-color: #bf7fbf; font-weight: bold">repr</span><span style="color: #7f7f7f; text-decoration-color: #7f7f7f; font-weight: bold">(</span><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">self</span><span style="color: #7f7f7f; text-decoration-color: #7f7f7f; font-weight: bold">)</span><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">.</span>                                                 <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                    <span style="color: #808000; text-decoration-color: #808000; font-style: italic">_resize</span> = <span style="color: #00ffff; text-decoration-color: #00ffff; font-style: italic">def </span><span style="color: #800000; text-decoration-color: #800000; font-weight: bold">_resize</span><span style="font-weight: bold">(</span>image, size, <span style="color: #808000; text-decoration-color: #808000">target</span>=<span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>, <span style="color: #808000; text-decoration-color: #808000">max_size</span>=<span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span><span style="font-weight: bold">)</span>:                              <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">Resize the image to the given size. Size can be min_size </span><span style="color: #7f7f7f; text-decoration-color: #7f7f7f; font-weight: bold">(</span><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">scalar</span><span style="color: #7f7f7f; text-decoration-color: #7f7f7f; font-weight: bold">)</span><span style="color: #7f7f7f; text-decoration-color: #7f7f7f"> or </span><span style="color: #7f7f7f; text-decoration-color: #7f7f7f; font-weight: bold">(</span><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">w, h</span><span style="color: #7f7f7f; text-decoration-color: #7f7f7f; font-weight: bold">)</span><span style="color: #7f7f7f; text-decoration-color: #7f7f7f"> tuple.</span> <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">If size is an int, smaller</span>                                                         <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">edge of the image will be matched to this number.</span>                                  <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                     <span style="color: #808000; text-decoration-color: #808000; font-style: italic">resize</span> = <span style="color: #00ffff; text-decoration-color: #00ffff; font-style: italic">def </span><span style="color: #800000; text-decoration-color: #800000; font-weight: bold">resize</span><span style="font-weight: bold">(</span>image, size, <span style="color: #808000; text-decoration-color: #808000">resample</span>=<span style="color: #008080; text-decoration-color: #008080; font-weight: bold">2</span>, <span style="color: #808000; text-decoration-color: #808000">default_to_square</span>=<span style="color: #00ff00; text-decoration-color: #00ff00; font-style: italic">True</span>, <span style="color: #808000; text-decoration-color: #808000">max_size</span>=<span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span><span style="font-weight: bold">)</span>:        <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">Resizes `image`. Enforces conversion of input to PIL.Image.</span>                        <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>            <span style="color: #808000; text-decoration-color: #808000; font-style: italic">save_pretrained</span> = <span style="color: #00ffff; text-decoration-color: #00ffff; font-style: italic">def </span><span style="color: #800000; text-decoration-color: #800000; font-weight: bold">save_pretrained</span><span style="font-weight: bold">(</span>save_directory: Union<span style="font-weight: bold">[</span>str, os.PathLike<span style="font-weight: bold">]</span>, push_to_hub: bool =   <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #ff0000; text-decoration-color: #ff0000; font-style: italic">False</span>, **kwargs<span style="font-weight: bold">)</span>:                                                                  <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">Save a feature_extractor object to the directory `save_directory`, so that it can </span> <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">be re-loaded using the</span>                                                             <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #7f7f7f; text-decoration-color: #7f7f7f; font-weight: bold">[</span><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">`~feature_extraction_utils.FeatureExtractionMixin.from_pretrained`</span><span style="color: #7f7f7f; text-decoration-color: #7f7f7f; font-weight: bold">]</span><span style="color: #7f7f7f; text-decoration-color: #7f7f7f"> class method.</span> <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>       <span style="color: #808000; text-decoration-color: #808000; font-style: italic">_set_processor_class</span> = <span style="color: #00ffff; text-decoration-color: #00ffff; font-style: italic">def </span><span style="color: #800000; text-decoration-color: #800000; font-weight: bold">_set_processor_class</span><span style="font-weight: bold">(</span>processor_class: str<span style="font-weight: bold">)</span>: <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">Sets processor class as an </span>        <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">attribute.</span>                                                                         <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                <span style="color: #bfbf7f; text-decoration-color: #bfbf7f; font-style: italic">__setattr__</span> = <span style="color: #00ffff; text-decoration-color: #00ffff; font-style: italic">def </span><span style="color: #800000; text-decoration-color: #800000; font-weight: bold">__setattr__</span><span style="font-weight: bold">(</span>name, value, <span style="color: #800080; text-decoration-color: #800080">/</span><span style="font-weight: bold">)</span>: <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">Implement </span><span style="color: #bf7fbf; text-decoration-color: #bf7fbf; font-weight: bold">setattr</span><span style="color: #7f7f7f; text-decoration-color: #7f7f7f; font-weight: bold">(</span><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">self, name, value</span><span style="color: #7f7f7f; text-decoration-color: #7f7f7f; font-weight: bold">)</span><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">.</span>             <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                 <span style="color: #bfbf7f; text-decoration-color: #bfbf7f; font-style: italic">__sizeof__</span> = <span style="color: #00ffff; text-decoration-color: #00ffff; font-style: italic">def </span><span style="color: #800000; text-decoration-color: #800000; font-weight: bold">__sizeof__</span><span style="font-weight: bold">()</span>: <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">Size of object in memory, in bytes.</span>                              <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                    <span style="color: #bfbf7f; text-decoration-color: #bfbf7f; font-style: italic">__str__</span> = <span style="color: #00ffff; text-decoration-color: #00ffff; font-style: italic">def </span><span style="color: #800000; text-decoration-color: #800000; font-weight: bold">__str__</span><span style="font-weight: bold">()</span>: <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">Return </span><span style="color: #bf7fbf; text-decoration-color: #bf7fbf; font-weight: bold">str</span><span style="color: #7f7f7f; text-decoration-color: #7f7f7f; font-weight: bold">(</span><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">self</span><span style="color: #7f7f7f; text-decoration-color: #7f7f7f; font-weight: bold">)</span><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">.</span>                                                   <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>           <span style="color: #bfbf7f; text-decoration-color: #bfbf7f; font-style: italic">__subclasshook__</span> = <span style="color: #00ffff; text-decoration-color: #00ffff; font-style: italic">def </span><span style="color: #800000; text-decoration-color: #800000; font-weight: bold">__subclasshook__</span><span style="font-weight: bold">(</span><span style="color: #808000; text-decoration-color: #808000">...</span><span style="font-weight: bold">)</span> <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">Abstract classes can override this to customize </span>         <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #bf7fbf; text-decoration-color: #bf7fbf; font-weight: bold">issubclass</span><span style="color: #7f7f7f; text-decoration-color: #7f7f7f; font-weight: bold">()</span><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">.</span>                                                                      <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                    <span style="color: #808000; text-decoration-color: #808000; font-style: italic">to_dict</span> = <span style="color: #00ffff; text-decoration-color: #00ffff; font-style: italic">def </span><span style="color: #800000; text-decoration-color: #800000; font-weight: bold">to_dict</span><span style="font-weight: bold">()</span> -&gt; Dict<span style="font-weight: bold">[</span>str, Any<span style="font-weight: bold">]</span>: <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">Serializes this instance to a Python dictionary.</span>  <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>               <span style="color: #808000; text-decoration-color: #808000; font-style: italic">to_json_file</span> = <span style="color: #00ffff; text-decoration-color: #00ffff; font-style: italic">def </span><span style="color: #800000; text-decoration-color: #800000; font-weight: bold">to_json_file</span><span style="font-weight: bold">(</span>json_file_path: Union<span style="font-weight: bold">[</span>str, os.PathLike<span style="font-weight: bold">])</span>: <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">Save this instance to a</span> <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">JSON file.</span>                                                                         <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>             <span style="color: #808000; text-decoration-color: #808000; font-style: italic">to_json_string</span> = <span style="color: #00ffff; text-decoration-color: #00ffff; font-style: italic">def </span><span style="color: #800000; text-decoration-color: #800000; font-weight: bold">to_json_string</span><span style="font-weight: bold">()</span> -&gt; str: <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">Serializes this instance to a JSON string.</span>            <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>             <span style="color: #808000; text-decoration-color: #808000; font-style: italic">to_numpy_array</span> = <span style="color: #00ffff; text-decoration-color: #00ffff; font-style: italic">def </span><span style="color: #800000; text-decoration-color: #800000; font-weight: bold">to_numpy_array</span><span style="font-weight: bold">(</span>image, <span style="color: #808000; text-decoration-color: #808000">rescale</span>=<span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>, <span style="color: #808000; text-decoration-color: #808000">channel_first</span>=<span style="color: #00ff00; text-decoration-color: #00ff00; font-style: italic">True</span><span style="font-weight: bold">)</span>:                       <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">Converts `image` to a numpy array. Optionally rescales it and puts the channel </span>    <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">dimension as the first</span>                                                             <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">dimension.</span>                                                                         <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>               <span style="color: #808000; text-decoration-color: #808000; font-style: italic">to_pil_image</span> = <span style="color: #00ffff; text-decoration-color: #00ffff; font-style: italic">def </span><span style="color: #800000; text-decoration-color: #800000; font-weight: bold">to_pil_image</span><span style="font-weight: bold">(</span>image, <span style="color: #808000; text-decoration-color: #808000">rescale</span>=<span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span><span style="font-weight: bold">)</span>:                                             <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">Converts `image` to a PIL Image. Optionally rescales it and puts the channel </span>      <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">dimension back as the last axis if</span>                                                 <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">needed.</span>                                                                            <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ</span>
</pre>
</div>
</div>
<p>The output of inspect can be pretty verbose, but I often find this a handy tool for quickly trying to work out a new library of API.</p>
<p>We‚Äôll look at the most critical parts in more detail, but I‚Äôll point out a few things; you‚Äôll see some attributes that will probably sound familiar.</p>
<div class="sourceCode" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">image_mean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.485</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.456</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.406</span>]                                                              </span>
<span id="cb26-2">image_std <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.229</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.224</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.225</span>]          </span></code></pre></div>
<p>These are the mean and standard deviation used during the model training. It‚Äôs essential when we‚Äôre doing inference or fine-tuning to replicate these, and having these all stored inside a <code>feature_extractor</code> means we don‚Äôt have to go poking around in papers to try and work out what these values should be.</p>
<p>Another thing to point out is the <code>push_to_hub</code> method. We can store <code>feature_extractor</code>s in the hub just as we can store models and tokenizers. Having to track the appropriate pre-processing steps for an image manually is super annoying to do manually. Storing this as we do other model components is much simpler and helps avoid errors resulting from tracing these things by hand.</p>
<p>The <code>__call__</code> method for the <code>DetrFeatureExtractor</code> is what we‚Äôll use to prepare our images before we pass them into the model, let‚Äôs dig more closely into this.</p>
<div id="cell-39" class="cell">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1">inspect(</span>
<span id="cb27-2">    feature_extractor.<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__call__</span>,</span>
<span id="cb27-3">)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #000080; text-decoration-color: #000080">‚ï≠‚îÄ </span><span style="color: #000080; text-decoration-color: #000080; font-weight: bold">&lt;</span><span style="color: #ff00ff; text-decoration-color: #ff00ff; font-weight: bold">bound</span><span style="color: #000000; text-decoration-color: #000000"> method DetrFeatureExtractor.__call__ of DetrFeatureExtractor </span><span style="color: #000000; text-decoration-color: #000000; font-weight: bold">{</span><span style="color: #000000; text-decoration-color: #000000">   </span><span style="color: #008000; text-decoration-color: #008000">"do_normalize"</span><span style="color: #000000; text-decoration-color: #000000">: true,   </span><span style="color: #008000; text-decoration-color: #008000">"do_resize"</span><span style="color: #000000; text-decoration-color: #000000">: t</span><span style="color: #000080; text-decoration-color: #000080">‚îÄ‚ïÆ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span> <span style="color: #00ffff; text-decoration-color: #00ffff; font-style: italic">def </span><span style="color: #800000; text-decoration-color: #800000; font-weight: bold">DetrFeatureExtractor.__call__</span><span style="font-weight: bold">(</span>images: Union<span style="font-weight: bold">[</span>PIL.Image.Image, numpy.ndarray, <span style="color: #800080; text-decoration-color: #800080; font-weight: bold">ForwardRef</span><span style="font-weight: bold">(</span><span style="color: #008000; text-decoration-color: #008000">'torch.Tensor'</span><span style="font-weight: bold">)</span>,     <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span> List<span style="font-weight: bold">[</span>PIL.Image.Image<span style="font-weight: bold">]</span>, List<span style="font-weight: bold">[</span>numpy.ndarray<span style="font-weight: bold">]</span>, List<span style="font-weight: bold">[</span><span style="color: #800080; text-decoration-color: #800080; font-weight: bold">ForwardRef</span><span style="font-weight: bold">(</span><span style="color: #008000; text-decoration-color: #008000">'torch.Tensor'</span><span style="font-weight: bold">)]]</span>, annotations: Union<span style="font-weight: bold">[</span>List<span style="font-weight: bold">[</span>Dict<span style="font-weight: bold">]</span>,   <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span> List<span style="font-weight: bold">[</span>List<span style="font-weight: bold">[</span>Dict<span style="font-weight: bold">]]]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>, return_segmentation_masks: Union<span style="font-weight: bold">[</span>bool, NoneType<span style="font-weight: bold">]</span> = <span style="color: #ff0000; text-decoration-color: #ff0000; font-style: italic">False</span>, masks_path:                 <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span> Union<span style="font-weight: bold">[</span>pathlib.Path, NoneType<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>, pad_and_return_pixel_mask: Union<span style="font-weight: bold">[</span>bool, NoneType<span style="font-weight: bold">]</span> = <span style="color: #00ff00; text-decoration-color: #00ff00; font-style: italic">True</span>, return_tensors:  <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span> Union<span style="font-weight: bold">[</span>str, transformers.utils.generic.TensorType, NoneType<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>, **kwargs<span style="font-weight: bold">)</span> -&gt;                                <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span> transformers.feature_extraction_utils.BatchFeature:                                                             <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                                                                                                                 <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span> <span style="color: #008080; text-decoration-color: #008080">Main method to prepare for the model one or several </span><span style="color: #800080; text-decoration-color: #800080; font-weight: bold">image</span><span style="color: #008080; text-decoration-color: #008080; font-weight: bold">(</span><span style="color: #008080; text-decoration-color: #008080">s</span><span style="color: #008080; text-decoration-color: #008080; font-weight: bold">)</span><span style="color: #008080; text-decoration-color: #008080"> and optional annotations. Images are by default</span>    <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span> <span style="color: #008080; text-decoration-color: #008080">padded up to the largest image in a batch, and a pixel mask is created that indicates which pixels are</span>          <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span> <span style="color: #008080; text-decoration-color: #008080">real/which are padding.</span>                                                                                         <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                                                                                                                 <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span> <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">27</span><span style="font-style: italic"> attribute(s) not shown.</span> Run <span style="color: #800080; text-decoration-color: #800080; font-weight: bold">inspect</span><span style="font-weight: bold">(</span>inspect<span style="font-weight: bold">)</span> for options.                                                    <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ</span>
</pre>
</div>
</div>
<p>Understanding what the <code>__call__</code> method expected, and how to make sure that is what‚Äôs delivered by the datasets library is the key thing I needed to work out. What does it expect:</p>
<ul>
<li><code>images</code>: this can be a list or a single image (and stored in different formats)</li>
<li><code>annotations</code> this should be of type <code>Union[List[Dict],‚îÇ‚îÇ List[List[Dict]]]</code>.</li>
</ul>
<p>The <code>images</code> part is not too tricky to understand. We can either pass in a single image, a NumPy array representing an image or a list of images or NumPy arrays.</p>
<p>The <code>annotations</code> part is where Python type annotations don‚Äôt always do us many favours since we only know we‚Äôre expecting a list of dictionaries, but we can safely assume those dictionaries probably need to have a particular format. We can try and see what happens if we pass in an image and a list of a random dictionary.</p>
<div id="cell-41" class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> io</span>
<span id="cb28-2"></span>
<span id="cb28-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> requests</span>
<span id="cb28-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> PIL <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Image</span></code></pre></div>
</div>
<div id="cell-42" class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1">im <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(</span>
<span id="cb29-2">    io.BytesIO(</span>
<span id="cb29-3">        requests.get(</span>
<span id="cb29-4">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://hips.hearstapps.com/hmg-prod.s3.amazonaws.com/images/cute-cat-photos-1593441022.jpg?crop=1.00xw:0.749xh;0,0.154xh&amp;resize=980:*"</span></span>
<span id="cb29-5">        ).content</span>
<span id="cb29-6">    )</span>
<span id="cb29-7">)</span>
<span id="cb29-8">im</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://danielvanstrien.xyz/posts/post-with-code/detr/2022-08-16-detr-object-detection_files/figure-html/cell-25-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="cell-43" class="cell">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1">labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb30-2">    {</span>
<span id="cb30-3">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bbox"</span>: [</span>
<span id="cb30-4">            <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>,</span>
<span id="cb30-5">            <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,</span>
<span id="cb30-6">            <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,</span>
<span id="cb30-7">            <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,</span>
<span id="cb30-8">        ]</span>
<span id="cb30-9">    }</span>
<span id="cb30-10">]</span></code></pre></div>
</div>
<div id="cell-44" class="cell">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1">feature_extractor(im, labels)</span></code></pre></div>
<div class="cell-output cell-output-error">
<div class="ansi-escaped-output">
<pre><span class="ansi-red-fg">---------------------------------------------------------------------------</span>
<span class="ansi-red-fg">ValueError</span>                                Traceback (most recent call last)
Input <span class="ansi-green-fg">In [23]</span>, in <span class="ansi-cyan-fg">&lt;cell line: 1&gt;</span><span class="ansi-blue-fg">()</span>
<span class="ansi-green-fg">----&gt; 1</span> <span class="ansi-yellow-bg">feature_extractor</span><span class="ansi-yellow-bg">(</span><span class="ansi-yellow-bg">im</span><span class="ansi-yellow-bg">,</span><span class="ansi-yellow-bg"> </span><span class="ansi-yellow-bg">labels</span><span class="ansi-yellow-bg">)</span>

File <span class="ansi-green-fg">/usr/local/Caskroom/miniforge/base/envs/blog/lib/python3.9/site-packages/transformers/models/detr/feature_extraction_detr.py:524</span>, in <span class="ansi-cyan-fg">DetrFeatureExtractor.__call__</span><span class="ansi-blue-fg">(self, images, annotations, return_segmentation_masks, masks_path, pad_and_return_pixel_mask, return_tensors, **kwargs)</span>
<span class="ansi-green-fg ansi-bold">    521</span>                         valid_annotations <span style="color:rgb(98,98,98)">=</span> <span style="font-weight:bold;color:rgb(0,135,0)">True</span>
<span class="ansi-green-fg ansi-bold">    523</span>     <span style="font-weight:bold;color:rgb(0,135,0)">if</span> <span style="font-weight:bold;color:rgb(175,0,255)">not</span> valid_annotations:
<span class="ansi-green-fg">--&gt; 524</span>         <span style="font-weight:bold;color:rgb(0,135,0)">raise</span> <span style="font-weight:bold;color:rgb(215,95,95)">ValueError</span>(
<span class="ansi-green-fg ansi-bold">    525</span>             <span style="font-style:italic;color:rgb(175,0,0)">"""</span>
<span class="ansi-green-fg ansi-bold">    526</span> <span style="font-style:italic;color:rgb(175,0,0)">            Annotations must of type `Dict` (single image) or `List[Dict]` (batch of images). In case of object</span>
<span class="ansi-green-fg ansi-bold">    527</span> <span style="font-style:italic;color:rgb(175,0,0)">            detection, each dictionary should contain the keys 'image_id' and 'annotations', with the latter</span>
<span class="ansi-green-fg ansi-bold">    528</span> <span style="font-style:italic;color:rgb(175,0,0)">            being a list of annotations in COCO format. In case of panoptic segmentation, each dictionary</span>
<span class="ansi-green-fg ansi-bold">    529</span> <span style="font-style:italic;color:rgb(175,0,0)">            should contain the keys 'file_name', 'image_id' and 'segments_info', with the latter being a list</span>
<span class="ansi-green-fg ansi-bold">    530</span> <span style="font-style:italic;color:rgb(175,0,0)">            of annotations in COCO format.</span>
<span class="ansi-green-fg ansi-bold">    531</span> <span style="font-style:italic;color:rgb(175,0,0)">            """</span>
<span class="ansi-green-fg ansi-bold">    532</span>         )
<span class="ansi-green-fg ansi-bold">    534</span> <span style="font-style:italic;color:rgb(95,135,135)"># Check that masks_path has a valid type</span>
<span class="ansi-green-fg ansi-bold">    535</span> <span style="font-weight:bold;color:rgb(0,135,0)">if</span> masks_path <span style="font-weight:bold;color:rgb(175,0,255)">is</span> <span style="font-weight:bold;color:rgb(175,0,255)">not</span> <span style="font-weight:bold;color:rgb(0,135,0)">None</span>:

<span class="ansi-red-fg">ValueError</span>: 
                    Annotations must of type `Dict` (single image) or `List[Dict]` (batch of images). In case of object
                    detection, each dictionary should contain the keys 'image_id' and 'annotations', with the latter
                    being a list of annotations in COCO format. In case of panoptic segmentation, each dictionary
                    should contain the keys 'file_name', 'image_id' and 'segments_info', with the latter being a list
                    of annotations in COCO format.
                    </pre>
</div>
</div>
</div>
<p>We can see that this raises a <code>ValueError</code>. We also get some more information here that gives us a clue where we went wrong. Specifically we can see that the annotations for a single image should be a <code>Dict</code> or <code>List[Dict]</code> if we‚Äôre using a batch of images. We also see that we should pass in this data in the <code>COCO</code> format. Since our data is already in this format we should be able to pass in an example.</p>
<div id="cell-46" class="cell">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1">image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dataset[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"train"</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"image"</span>]</span>
<span id="cb32-2">image</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://danielvanstrien.xyz/posts/post-with-code/detr/2022-08-16-detr-object-detection_files/figure-html/cell-28-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="cell-47" class="cell">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1">annotations <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dataset[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"train"</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"objects"</span>]</span>
<span id="cb33-2">annotations</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="font-weight: bold">[</span>
    <span style="font-weight: bold">{</span>
        <span style="color: #008000; text-decoration-color: #008000">'category_id'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">0</span>,
        <span style="color: #008000; text-decoration-color: #008000">'image_id'</span>: <span style="color: #008000; text-decoration-color: #008000">'8081'</span>,
        <span style="color: #008000; text-decoration-color: #008000">'id'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">646</span>,
        <span style="color: #008000; text-decoration-color: #008000">'area'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">114552</span>,
        <span style="color: #008000; text-decoration-color: #008000">'bbox'</span>: <span style="font-weight: bold">[</span><span style="color: #008080; text-decoration-color: #008080; font-weight: bold">81.0</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">408.0</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">387.0</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">296.0</span><span style="font-weight: bold">]</span>,
        <span style="color: #008000; text-decoration-color: #008000">'segmentation'</span>: <span style="font-weight: bold">[[</span><span style="color: #008080; text-decoration-color: #008080; font-weight: bold">81.0</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">408.0</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">468.0</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">408.0</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">468.0</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">704.0</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">81.0</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">704.0</span><span style="font-weight: bold">]]</span>,
        <span style="color: #008000; text-decoration-color: #008000">'iscrowd'</span>: <span style="color: #ff0000; text-decoration-color: #ff0000; font-style: italic">False</span>
    <span style="font-weight: bold">}</span>
<span style="font-weight: bold">]</span>
</pre>
</div>
</div>
<div id="cell-48" class="cell">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1">feature_extractor(images<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>image, annotations<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>annotations, return_tensors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pt"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #800000; text-decoration-color: #800000">‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ </span><span style="color: #800000; text-decoration-color: #800000; font-weight: bold">Traceback </span><span style="color: #bf7f7f; text-decoration-color: #bf7f7f; font-weight: bold">(most recent call last)</span><span style="color: #800000; text-decoration-color: #800000"> ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span> <span style="color: #bfbf7f; text-decoration-color: #bfbf7f">/var/folders/tj/54sfzlyj6_573fn82y996grc0000gr/T/ipykernel_47936/</span><span style="color: #808000; text-decoration-color: #808000; font-weight: bold">1569761185.py</span>:<span style="color: #0000ff; text-decoration-color: #0000ff">1</span> in <span style="color: #00ff00; text-decoration-color: #00ff00">&lt;cell line: </span> <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span> <span style="color: #00ff00; text-decoration-color: #00ff00">1&gt;</span>                                                                                               <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>                                                                                                  <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span> <span style="color: #800000; text-decoration-color: #800000; font-style: italic">[Errno 2] No such file or directory: </span>                                                            <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span> <span style="color: #800000; text-decoration-color: #800000; font-style: italic">'/var/folders/tj/54sfzlyj6_573fn82y996grc0000gr/T/ipykernel_47936/1569761185.py'</span>                 <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>                                                                                                  <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span> <span style="color: #bfbf7f; text-decoration-color: #bfbf7f">/usr/local/Caskroom/miniforge/base/envs/blog/lib/python3.9/site-packages/transformers/models/det</span> <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span> <span style="color: #bfbf7f; text-decoration-color: #bfbf7f">r/</span><span style="color: #808000; text-decoration-color: #808000; font-weight: bold">feature_extraction_detr.py</span>:<span style="color: #0000ff; text-decoration-color: #0000ff">524</span> in <span style="color: #00ff00; text-decoration-color: #00ff00">__call__</span>                                                     <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>                                                                                                  <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">521 ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   </span>valid_annotations = <span style="color: #0000ff; text-decoration-color: #0000ff">True</span>                                   <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">522 ‚îÇ   ‚îÇ   ‚îÇ   </span>                                                                               <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">523 ‚îÇ   ‚îÇ   ‚îÇ   </span><span style="color: #0000ff; text-decoration-color: #0000ff">if</span> <span style="color: #ff00ff; text-decoration-color: #ff00ff">not</span> valid_annotations:                                                      <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span> <span style="color: #800000; text-decoration-color: #800000">‚ù± </span>524 <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   </span><span style="color: #0000ff; text-decoration-color: #0000ff">raise</span> <span style="color: #00ffff; text-decoration-color: #00ffff">ValueError</span>(                                                          <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">525 ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   </span><span style="color: #808000; text-decoration-color: #808000">"""</span>                                                                    <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">526 </span><span style="color: #bfbf7f; text-decoration-color: #bfbf7f">‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   </span><span style="color: #808000; text-decoration-color: #808000">Annotations must of type `Dict` (single image) or `List[Dict]` (batc</span>   <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">527 </span><span style="color: #bfbf7f; text-decoration-color: #bfbf7f">‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   </span><span style="color: #808000; text-decoration-color: #808000">detection, each dictionary should contain the keys 'image_id' and 'a</span>   <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ</span>
<span style="color: #ff0000; text-decoration-color: #ff0000; font-weight: bold">ValueError: </span>
                    Annotations must of type `Dict` <span style="font-weight: bold">(</span>single image<span style="font-weight: bold">)</span> or `List<span style="font-weight: bold">[</span>Dict<span style="font-weight: bold">]</span>` <span style="font-weight: bold">(</span>batch of images<span style="font-weight: bold">)</span>. In case of 
object
                    detection, each dictionary should contain the keys <span style="color: #008000; text-decoration-color: #008000">'image_id'</span> and <span style="color: #008000; text-decoration-color: #008000">'annotations'</span>, with the 
latter
                    being a list of annotations in COCO format. In case of panoptic segmentation, each dictionary
                    should contain the keys <span style="color: #008000; text-decoration-color: #008000">'file_name'</span>, <span style="color: #008000; text-decoration-color: #008000">'image_id'</span> and <span style="color: #008000; text-decoration-color: #008000">'segments_info'</span>, with the latter being a 
list
                    of annotations in COCO format.
                    
</pre>
</div>
</div>
<p>Oh no! It still doesn‚Äôt work. At this point, it‚Äôs we probably either want to dig into the source code to work out what we should be passing to the <code>feature_extractor</code>. The relevant function is <a href="https://github.com/huggingface/transformers/blob/d6eeb871706db0d64ab9ffd79f9545d95286b536/src/transformers/models/detr/feature_extraction_detr.py#L214"><code>def prepare_coco_detection</code></a>.</p>
<p>We also have another <a href="https://github.com/NielsRogge/Transformers-Tutorials/blob/master/DETR/Fine_tuning_DetrForObjectDetection_on_custom_dataset_(balloon).ipynb">tutorial</a> to consult. In this tutorial we see that the annotations are stored in a dictionary <code>target</code> with the keys <code>image_id</code> and <code>annotations</code>.</p>
<div class="sourceCode" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1">target <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'image_id'</span>: image_id, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'annotations'</span>: target}</span>
<span id="cb35-2">encoding <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.feature_extractor(images<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>img, annotations<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>target, return_tensors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pt"</span>)</span></code></pre></div>
<p>With a bit more wrangling let‚Äôs see if this works.</p>
<div id="cell-50" class="cell">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1">target <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"image_id"</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"annotations"</span>: annotations}</span></code></pre></div>
</div>
<div id="cell-51" class="cell">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1">feature_extractor(images<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>image, annotations<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>target, return_tensors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pt"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="font-weight: bold">{</span>
    <span style="color: #008000; text-decoration-color: #008000">'pixel_values'</span>: <span style="color: #800080; text-decoration-color: #800080; font-weight: bold">tensor</span><span style="font-weight: bold">([[[[</span><span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-0.7650</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-0.9705</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-0.9705</span>,  <span style="color: #808000; text-decoration-color: #808000">...</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-1.4158</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-1.3815</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-1.3815</span><span style="font-weight: bold">]</span>,
          <span style="font-weight: bold">[</span><span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-0.7822</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-0.9020</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-0.9020</span>,  <span style="color: #808000; text-decoration-color: #808000">...</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-1.3815</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-1.3644</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-1.4500</span><span style="font-weight: bold">]</span>,
          <span style="font-weight: bold">[</span><span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-0.8164</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-0.9020</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-0.9192</span>,  <span style="color: #808000; text-decoration-color: #808000">...</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-1.3815</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-1.3815</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-1.4500</span><span style="font-weight: bold">]</span>,
          <span style="color: #808000; text-decoration-color: #808000">...</span>,
          <span style="font-weight: bold">[</span> <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1.5297</span>,  <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1.5639</span>,  <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1.5810</span>,  <span style="color: #808000; text-decoration-color: #808000">...</span>,  <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1.4612</span>,  <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1.4612</span>,  <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1.4783</span><span style="font-weight: bold">]</span>,
          <span style="font-weight: bold">[</span> <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1.5125</span>,  <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1.5297</span>,  <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1.5468</span>,  <span style="color: #808000; text-decoration-color: #808000">...</span>,  <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1.4783</span>,  <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1.4783</span>,  <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1.4954</span><span style="font-weight: bold">]</span>,
          <span style="font-weight: bold">[</span> <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1.4954</span>,  <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1.5125</span>,  <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1.5125</span>,  <span style="color: #808000; text-decoration-color: #808000">...</span>,  <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1.5125</span>,  <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1.5125</span>,  <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1.5297</span><span style="font-weight: bold">]]</span>,

         <span style="font-weight: bold">[[</span><span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-0.6527</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-0.8627</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-0.8627</span>,  <span style="color: #808000; text-decoration-color: #808000">...</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-1.3179</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-1.2829</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-1.2829</span><span style="font-weight: bold">]</span>,
          <span style="font-weight: bold">[</span><span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-0.7052</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-0.8102</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-0.8277</span>,  <span style="color: #808000; text-decoration-color: #808000">...</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-1.3004</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-1.2829</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-1.3704</span><span style="font-weight: bold">]</span>,
          <span style="font-weight: bold">[</span><span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-0.7402</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-0.8102</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-0.8277</span>,  <span style="color: #808000; text-decoration-color: #808000">...</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-1.3529</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-1.3529</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-1.4405</span><span style="font-weight: bold">]</span>,
          <span style="color: #808000; text-decoration-color: #808000">...</span>,
          <span style="font-weight: bold">[</span> <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1.5357</span>,  <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1.5707</span>,  <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1.5882</span>,  <span style="color: #808000; text-decoration-color: #808000">...</span>,  <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1.3957</span>,  <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1.3957</span>,  <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1.4132</span><span style="font-weight: bold">]</span>,
          <span style="font-weight: bold">[</span> <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1.5182</span>,  <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1.5357</span>,  <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1.5532</span>,  <span style="color: #808000; text-decoration-color: #808000">...</span>,  <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1.4132</span>,  <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1.4132</span>,  <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1.4307</span><span style="font-weight: bold">]</span>,
          <span style="font-weight: bold">[</span> <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1.5007</span>,  <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1.5182</span>,  <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1.5182</span>,  <span style="color: #808000; text-decoration-color: #808000">...</span>,  <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1.4482</span>,  <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1.4482</span>,  <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1.4657</span><span style="font-weight: bold">]]</span>,

         <span style="font-weight: bold">[[</span><span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-0.4275</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-0.6367</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-0.6367</span>,  <span style="color: #808000; text-decoration-color: #808000">...</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-1.1073</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-1.0898</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-1.0898</span><span style="font-weight: bold">]</span>,
          <span style="font-weight: bold">[</span><span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-0.4624</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-0.5670</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-0.5844</span>,  <span style="color: #808000; text-decoration-color: #808000">...</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-1.1247</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-1.1247</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-1.2119</span><span style="font-weight: bold">]</span>,
          <span style="font-weight: bold">[</span><span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-0.5147</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-0.6018</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-0.6193</span>,  <span style="color: #808000; text-decoration-color: #808000">...</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-1.2293</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-1.2467</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-1.3339</span><span style="font-weight: bold">]</span>,
          <span style="color: #808000; text-decoration-color: #808000">...</span>,
          <span style="font-weight: bold">[</span> <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1.4548</span>,  <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1.4897</span>,  <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1.5071</span>,  <span style="color: #808000; text-decoration-color: #808000">...</span>,  <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1.3154</span>,  <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1.3154</span>,  <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1.3328</span><span style="font-weight: bold">]</span>,
          <span style="font-weight: bold">[</span> <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1.4374</span>,  <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1.4548</span>,  <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1.4722</span>,  <span style="color: #808000; text-decoration-color: #808000">...</span>,  <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1.3328</span>,  <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1.3328</span>,  <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1.3502</span><span style="font-weight: bold">]</span>,
          <span style="font-weight: bold">[</span> <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1.4200</span>,  <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1.4374</span>,  <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1.4374</span>,  <span style="color: #808000; text-decoration-color: #808000">...</span>,  <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1.3677</span>,  <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1.3677</span>,  <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1.3851</span><span style="font-weight: bold">]]]])</span>,
    <span style="color: #008000; text-decoration-color: #008000">'pixel_mask'</span>: <span style="color: #800080; text-decoration-color: #800080; font-weight: bold">tensor</span><span style="font-weight: bold">([[[</span><span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span>,  <span style="color: #808000; text-decoration-color: #808000">...</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span><span style="font-weight: bold">]</span>,
         <span style="font-weight: bold">[</span><span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span>,  <span style="color: #808000; text-decoration-color: #808000">...</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span><span style="font-weight: bold">]</span>,
         <span style="font-weight: bold">[</span><span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span>,  <span style="color: #808000; text-decoration-color: #808000">...</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span><span style="font-weight: bold">]</span>,
         <span style="color: #808000; text-decoration-color: #808000">...</span>,
         <span style="font-weight: bold">[</span><span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span>,  <span style="color: #808000; text-decoration-color: #808000">...</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span><span style="font-weight: bold">]</span>,
         <span style="font-weight: bold">[</span><span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span>,  <span style="color: #808000; text-decoration-color: #808000">...</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span><span style="font-weight: bold">]</span>,
         <span style="font-weight: bold">[</span><span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span>,  <span style="color: #808000; text-decoration-color: #808000">...</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span><span style="font-weight: bold">]]])</span>,
    <span style="color: #008000; text-decoration-color: #008000">'labels'</span>: <span style="font-weight: bold">[</span>
        <span style="font-weight: bold">{</span>
            <span style="color: #008000; text-decoration-color: #008000">'boxes'</span>: <span style="color: #800080; text-decoration-color: #800080; font-weight: bold">tensor</span><span style="font-weight: bold">([[</span><span style="color: #008080; text-decoration-color: #008080; font-weight: bold">0.4575</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">0.5120</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">0.6450</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">0.2726</span><span style="font-weight: bold">]])</span>,
            <span style="color: #008000; text-decoration-color: #008000">'class_labels'</span>: <span style="color: #800080; text-decoration-color: #800080; font-weight: bold">tensor</span><span style="font-weight: bold">([</span><span style="color: #008080; text-decoration-color: #008080; font-weight: bold">0</span><span style="font-weight: bold">])</span>,
            <span style="color: #008000; text-decoration-color: #008000">'image_id'</span>: <span style="color: #800080; text-decoration-color: #800080; font-weight: bold">tensor</span><span style="font-weight: bold">([</span><span style="color: #008080; text-decoration-color: #008080; font-weight: bold">4</span><span style="font-weight: bold">])</span>,
            <span style="color: #008000; text-decoration-color: #008000">'area'</span>: <span style="color: #800080; text-decoration-color: #800080; font-weight: bold">tensor</span><span style="font-weight: bold">([</span><span style="color: #008080; text-decoration-color: #008080; font-weight: bold">172346.9688</span><span style="font-weight: bold">])</span>,
            <span style="color: #008000; text-decoration-color: #008000">'iscrowd'</span>: <span style="color: #800080; text-decoration-color: #800080; font-weight: bold">tensor</span><span style="font-weight: bold">([</span><span style="color: #008080; text-decoration-color: #008080; font-weight: bold">0</span><span style="font-weight: bold">])</span>,
            <span style="color: #008000; text-decoration-color: #008000">'orig_size'</span>: <span style="color: #800080; text-decoration-color: #800080; font-weight: bold">tensor</span><span style="font-weight: bold">([</span><span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1086</span>,  <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">600</span><span style="font-weight: bold">])</span>,
            <span style="color: #008000; text-decoration-color: #008000">'size'</span>: <span style="color: #800080; text-decoration-color: #800080; font-weight: bold">tensor</span><span style="font-weight: bold">([</span><span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1332</span>,  <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">736</span><span style="font-weight: bold">])</span>
        <span style="font-weight: bold">}</span>
    <span style="font-weight: bold">]</span>
<span style="font-weight: bold">}</span>
</pre>
</div>
</div>
<p>This is looking more like it! Now we have one example working we can translate this to a function that can prepare a batch into the same format.</p>
<p>Since we get a batch at a time we might need to refactor things slightly. In this example I‚Äôve just grabbed the relevant lists for the images, image_id and annotations. We then use a list compression to store these in the dictionary format expected by the <code>feature_extractor</code>.</p>
<div id="cell-53" class="cell">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> transform(example_batch):</span>
<span id="cb38-2">    images <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> example_batch[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"image"</span>]</span>
<span id="cb38-3">    ids_ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> example_batch[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"image_id"</span>]</span>
<span id="cb38-4">    objects <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> example_batch[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"objects"</span>]</span>
<span id="cb38-5">    targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb38-6">        {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"image_id"</span>: id_, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"annotations"</span>: object_} <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> id_, object_ <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(ids_, objects)</span>
<span id="cb38-7">    ]</span>
<span id="cb38-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> feature_extractor(images<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>images, annotations<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>targets, return_tensors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pt"</span>)</span></code></pre></div>
</div>
<p>We could apply this to our data using <code>map</code> but it often makes more sense to applay these on the fly using the <code>with_transform</code> method.</p>
<div id="cell-55" class="cell">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1">dataset[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"train"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dataset[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"train"</span>].with_transform(transform)</span></code></pre></div>
</div>
<p>Let‚Äôs take a look at an example</p>
<div id="cell-57" class="cell">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1">dataset[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"train"</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="font-weight: bold">{</span>
    <span style="color: #008000; text-decoration-color: #008000">'pixel_values'</span>: <span style="color: #800080; text-decoration-color: #800080; font-weight: bold">tensor</span><span style="font-weight: bold">([[[</span><span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-0.7650</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-0.9705</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-0.9705</span>,  <span style="color: #808000; text-decoration-color: #808000">...</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-1.4158</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-1.3815</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-1.3815</span><span style="font-weight: bold">]</span>,
         <span style="font-weight: bold">[</span><span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-0.7822</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-0.9020</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-0.9020</span>,  <span style="color: #808000; text-decoration-color: #808000">...</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-1.3815</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-1.3644</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-1.4500</span><span style="font-weight: bold">]</span>,
         <span style="font-weight: bold">[</span><span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-0.8164</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-0.9020</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-0.9192</span>,  <span style="color: #808000; text-decoration-color: #808000">...</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-1.3815</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-1.3815</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-1.4500</span><span style="font-weight: bold">]</span>,
         <span style="color: #808000; text-decoration-color: #808000">...</span>,
         <span style="font-weight: bold">[</span> <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1.5297</span>,  <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1.5639</span>,  <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1.5810</span>,  <span style="color: #808000; text-decoration-color: #808000">...</span>,  <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1.4612</span>,  <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1.4612</span>,  <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1.4783</span><span style="font-weight: bold">]</span>,
         <span style="font-weight: bold">[</span> <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1.5125</span>,  <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1.5297</span>,  <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1.5468</span>,  <span style="color: #808000; text-decoration-color: #808000">...</span>,  <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1.4783</span>,  <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1.4783</span>,  <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1.4954</span><span style="font-weight: bold">]</span>,
         <span style="font-weight: bold">[</span> <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1.4954</span>,  <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1.5125</span>,  <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1.5125</span>,  <span style="color: #808000; text-decoration-color: #808000">...</span>,  <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1.5125</span>,  <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1.5125</span>,  <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1.5297</span><span style="font-weight: bold">]]</span>,

        <span style="font-weight: bold">[[</span><span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-0.6527</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-0.8627</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-0.8627</span>,  <span style="color: #808000; text-decoration-color: #808000">...</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-1.3179</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-1.2829</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-1.2829</span><span style="font-weight: bold">]</span>,
         <span style="font-weight: bold">[</span><span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-0.7052</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-0.8102</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-0.8277</span>,  <span style="color: #808000; text-decoration-color: #808000">...</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-1.3004</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-1.2829</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-1.3704</span><span style="font-weight: bold">]</span>,
         <span style="font-weight: bold">[</span><span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-0.7402</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-0.8102</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-0.8277</span>,  <span style="color: #808000; text-decoration-color: #808000">...</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-1.3529</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-1.3529</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-1.4405</span><span style="font-weight: bold">]</span>,
         <span style="color: #808000; text-decoration-color: #808000">...</span>,
         <span style="font-weight: bold">[</span> <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1.5357</span>,  <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1.5707</span>,  <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1.5882</span>,  <span style="color: #808000; text-decoration-color: #808000">...</span>,  <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1.3957</span>,  <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1.3957</span>,  <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1.4132</span><span style="font-weight: bold">]</span>,
         <span style="font-weight: bold">[</span> <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1.5182</span>,  <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1.5357</span>,  <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1.5532</span>,  <span style="color: #808000; text-decoration-color: #808000">...</span>,  <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1.4132</span>,  <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1.4132</span>,  <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1.4307</span><span style="font-weight: bold">]</span>,
         <span style="font-weight: bold">[</span> <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1.5007</span>,  <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1.5182</span>,  <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1.5182</span>,  <span style="color: #808000; text-decoration-color: #808000">...</span>,  <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1.4482</span>,  <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1.4482</span>,  <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1.4657</span><span style="font-weight: bold">]]</span>,

        <span style="font-weight: bold">[[</span><span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-0.4275</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-0.6367</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-0.6367</span>,  <span style="color: #808000; text-decoration-color: #808000">...</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-1.1073</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-1.0898</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-1.0898</span><span style="font-weight: bold">]</span>,
         <span style="font-weight: bold">[</span><span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-0.4624</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-0.5670</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-0.5844</span>,  <span style="color: #808000; text-decoration-color: #808000">...</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-1.1247</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-1.1247</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-1.2119</span><span style="font-weight: bold">]</span>,
         <span style="font-weight: bold">[</span><span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-0.5147</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-0.6018</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-0.6193</span>,  <span style="color: #808000; text-decoration-color: #808000">...</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-1.2293</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-1.2467</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-1.3339</span><span style="font-weight: bold">]</span>,
         <span style="color: #808000; text-decoration-color: #808000">...</span>,
         <span style="font-weight: bold">[</span> <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1.4548</span>,  <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1.4897</span>,  <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1.5071</span>,  <span style="color: #808000; text-decoration-color: #808000">...</span>,  <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1.3154</span>,  <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1.3154</span>,  <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1.3328</span><span style="font-weight: bold">]</span>,
         <span style="font-weight: bold">[</span> <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1.4374</span>,  <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1.4548</span>,  <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1.4722</span>,  <span style="color: #808000; text-decoration-color: #808000">...</span>,  <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1.3328</span>,  <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1.3328</span>,  <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1.3502</span><span style="font-weight: bold">]</span>,
         <span style="font-weight: bold">[</span> <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1.4200</span>,  <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1.4374</span>,  <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1.4374</span>,  <span style="color: #808000; text-decoration-color: #808000">...</span>,  <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1.3677</span>,  <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1.3677</span>,  <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1.3851</span><span style="font-weight: bold">]]])</span>,
    <span style="color: #008000; text-decoration-color: #008000">'pixel_mask'</span>: <span style="color: #800080; text-decoration-color: #800080; font-weight: bold">tensor</span><span style="font-weight: bold">([[</span><span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span>,  <span style="color: #808000; text-decoration-color: #808000">...</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span><span style="font-weight: bold">]</span>,
        <span style="font-weight: bold">[</span><span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span>,  <span style="color: #808000; text-decoration-color: #808000">...</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span><span style="font-weight: bold">]</span>,
        <span style="font-weight: bold">[</span><span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span>,  <span style="color: #808000; text-decoration-color: #808000">...</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span><span style="font-weight: bold">]</span>,
        <span style="color: #808000; text-decoration-color: #808000">...</span>,
        <span style="font-weight: bold">[</span><span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span>,  <span style="color: #808000; text-decoration-color: #808000">...</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span><span style="font-weight: bold">]</span>,
        <span style="font-weight: bold">[</span><span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span>,  <span style="color: #808000; text-decoration-color: #808000">...</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span><span style="font-weight: bold">]</span>,
        <span style="font-weight: bold">[</span><span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span>,  <span style="color: #808000; text-decoration-color: #808000">...</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span><span style="font-weight: bold">]])</span>,
    <span style="color: #008000; text-decoration-color: #008000">'labels'</span>: <span style="font-weight: bold">{</span>
        <span style="color: #008000; text-decoration-color: #008000">'boxes'</span>: <span style="color: #800080; text-decoration-color: #800080; font-weight: bold">tensor</span><span style="font-weight: bold">([[</span><span style="color: #008080; text-decoration-color: #008080; font-weight: bold">0.4575</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">0.5120</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">0.6450</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">0.2726</span><span style="font-weight: bold">]])</span>,
        <span style="color: #008000; text-decoration-color: #008000">'class_labels'</span>: <span style="color: #800080; text-decoration-color: #800080; font-weight: bold">tensor</span><span style="font-weight: bold">([</span><span style="color: #008080; text-decoration-color: #008080; font-weight: bold">0</span><span style="font-weight: bold">])</span>,
        <span style="color: #008000; text-decoration-color: #008000">'image_id'</span>: <span style="color: #800080; text-decoration-color: #800080; font-weight: bold">tensor</span><span style="font-weight: bold">([</span><span style="color: #008080; text-decoration-color: #008080; font-weight: bold">8081</span><span style="font-weight: bold">])</span>,
        <span style="color: #008000; text-decoration-color: #008000">'area'</span>: <span style="color: #800080; text-decoration-color: #800080; font-weight: bold">tensor</span><span style="font-weight: bold">([</span><span style="color: #008080; text-decoration-color: #008080; font-weight: bold">172346.9688</span><span style="font-weight: bold">])</span>,
        <span style="color: #008000; text-decoration-color: #008000">'iscrowd'</span>: <span style="color: #800080; text-decoration-color: #800080; font-weight: bold">tensor</span><span style="font-weight: bold">([</span><span style="color: #008080; text-decoration-color: #008080; font-weight: bold">0</span><span style="font-weight: bold">])</span>,
        <span style="color: #008000; text-decoration-color: #008000">'orig_size'</span>: <span style="color: #800080; text-decoration-color: #800080; font-weight: bold">tensor</span><span style="font-weight: bold">([</span><span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1086</span>,  <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">600</span><span style="font-weight: bold">])</span>,
        <span style="color: #008000; text-decoration-color: #008000">'size'</span>: <span style="color: #800080; text-decoration-color: #800080; font-weight: bold">tensor</span><span style="font-weight: bold">([</span><span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1332</span>,  <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">736</span><span style="font-weight: bold">])</span>
    <span style="font-weight: bold">}</span>
<span style="font-weight: bold">}</span>
</pre>
</div>
</div>
<p>The next thing we need to take care of is a collate function. ‚ÄòData collators are objects that will form a batch by using a list of dataset elements as input. These elements are of the same type as the elements of train_dataset or eval_dataset.‚Äô <a href="https://huggingface.co/docs/transformers/main_classes/data_collator#data-collator">source</a>.</p>
<div id="cell-59" class="cell">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb41-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> collate_fn(batch):</span>
<span id="cb41-2">    pixel_values <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [item[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pixel_values"</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> item <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> batch]</span>
<span id="cb41-3">    encoding <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> feature_extractor.pad_and_create_pixel_mask(</span>
<span id="cb41-4">        pixel_values, return_tensors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pt"</span></span>
<span id="cb41-5">    )</span>
<span id="cb41-6">    labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [item[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"labels"</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> item <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> batch]</span>
<span id="cb41-7">    batch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {} <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># collated batch  </span></span>
<span id="cb41-8">    batch[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pixel_values'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> encoding[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pixel_values'</span>]</span>
<span id="cb41-9">    batch[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pixel_mask"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> encoding[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pixel_mask"</span>]</span>
<span id="cb41-10">    batch[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"labels"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> labels</span>
<span id="cb41-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> batch</span></code></pre></div>
</div>
</section>
</section>
</section>
<section id="creating-a-detr-model" class="level2">
<h2 class="anchored" data-anchor-id="creating-a-detr-model">Creating a detr model</h2>
<section id="avoiding-ambiguous-labels" class="level3">
<h3 class="anchored" data-anchor-id="avoiding-ambiguous-labels">Avoiding ambiguous labels</h3>
<p>We‚Äôre almost at the point where we can start training the model. We just do a little bit of housekeeping to make sure our model knows what our encoded labels are. It‚Äôs super annoying when you are trying a model out on the Hugging Face Hub and you get back labels, <code>0</code> or <code>3</code> with no clue what these labels refer to. We can avoid this by telling our model what labels we have. This mapping will then be bundled with the model when we push it to the hub.</p>
<div id="cell-62" class="cell">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1">id2label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(dataset[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"train"</span>].features[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"objects"</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"category_id"</span>].names))</span>
<span id="cb42-2">label2id <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {v: k <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> k, v <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> id2label.items()}</span>
<span id="cb42-3">label2id</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="font-weight: bold">{</span><span style="color: #008000; text-decoration-color: #008000">'early_printed_illustration'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">0</span><span style="font-weight: bold">}</span>
</pre>
</div>
</div>
<p>Now we can create the <code>DetrForObjectDetection</code> model. This should all look familiar if you‚Äôve used transformers for other tasks.</p>
<div id="cell-64" class="cell">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb43-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> transformers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> DetrForObjectDetection</span>
<span id="cb43-2"></span>
<span id="cb43-3">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DetrForObjectDetection.from_pretrained(</span>
<span id="cb43-4">    model_checkpoint,</span>
<span id="cb43-5">    num_labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb43-6">    id2label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>id2label,</span>
<span id="cb43-7">    label2id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>label2id,</span>
<span id="cb43-8">    ignore_mismatched_sizes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb43-9">)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"c3775a8de4f8426eaafbb2570d43b825","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"92632e6620094d18a2e86ff4286d3486","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Downloading: "https://github.com/rwightman/pytorch-image-models/releases/download/v0.1-rsb-weights/resnet50_a1_0-14fe96d1.pth" to /root/.cache/torch/hub/checkpoints/resnet50_a1_0-14fe96d1.pth
Some weights of DetrForObjectDetection were not initialized from the model checkpoint at facebook/detr-resnet-50 and are newly initialized because the shapes did not match:
- class_labels_classifier.weight: found shape torch.Size([92, 256]) in the checkpoint and torch.Size([2, 256]) in the model instantiated
- class_labels_classifier.bias: found shape torch.Size([92]) in the checkpoint and torch.Size([2]) in the model instantiated
You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.</code></pre>
</div>
</div>
<p>If you wanted to use another backbone you could do something like:</p>
<div class="sourceCode" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb45-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># from transformers import DetrForObjectDetection</span></span>
<span id="cb45-2"></span>
<span id="cb45-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># config = DetrConfig(backbone='regnetz_e8',id2label=id2label, label2id=label2id)</span></span>
<span id="cb45-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># model = DetrForObjectDetection(config)</span></span></code></pre></div>
</section>
</section>
<section id="training-the-detr-model" class="level2">
<h2 class="anchored" data-anchor-id="training-the-detr-model">Training the detr model</h2>
<p>We now specify our <code>TrainingArguments</code></p>
<div id="cell-68" class="cell">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb46-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> transformers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> TrainingArguments</span>
<span id="cb46-2"></span>
<span id="cb46-3">training_args <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TrainingArguments(</span>
<span id="cb46-4">    output_dir<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"detr-resnet-50_fine_tuned_nls_chapbooks"</span>,</span>
<span id="cb46-5">    per_device_train_batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>,</span>
<span id="cb46-6">    num_train_epochs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,</span>
<span id="cb46-7">    fp16<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>,</span>
<span id="cb46-8">    save_steps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>,</span>
<span id="cb46-9">    logging_steps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>,</span>
<span id="cb46-10">    learning_rate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-4</span>,</span>
<span id="cb46-11">    save_total_limit<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,</span>
<span id="cb46-12">    remove_unused_columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>,</span>
<span id="cb46-13">    push_to_hub<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb46-14">    hub_model_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"davanstrien/detr-resnet-50_fine_tuned_nls_chapbooks"</span>,</span>
<span id="cb46-15">)</span></code></pre></div>
</div>
<p>and create our <code>Trainer</code></p>
<div id="cell-70" class="cell">
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb47-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> transformers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Trainer</span>
<span id="cb47-2"></span>
<span id="cb47-3">trainer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Trainer(</span>
<span id="cb47-4">    model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>model,</span>
<span id="cb47-5">    args<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>training_args,</span>
<span id="cb47-6">    data_collator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>collate_fn,</span>
<span id="cb47-7">    train_dataset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dataset[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"train"</span>],</span>
<span id="cb47-8">    tokenizer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>feature_extractor,</span>
<span id="cb47-9">)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Cloning https://huggingface.co/davanstrien/detr-resnet-50_fine_tuned_nls_chapbooks into local empty directory.</code></pre>
</div>
</div>
<div id="cell-71" class="cell">
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb49-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#collapse</span></span>
<span id="cb49-2">trainer.train()</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>/usr/local/lib/python3.7/dist-packages/transformers/optimization.py:310: FutureWarning: This implementation of AdamW is deprecated and will be removed in a future version. Use the PyTorch implementation torch.optim.AdamW instead, or set `no_deprecation_warning=True` to disable this warning
  FutureWarning,
***** Running training *****
  Num examples = 6531
  Num Epochs = 10
  Instantaneous batch size per device = 8
  Total train batch size (w. parallel, distributed &amp; accumulation) = 8
  Gradient Accumulation steps = 1
  Total optimization steps = 8170
Automatic Weights &amp; Biases logging enabled, to disable set os.environ["WANDB_DISABLED"] = "true"</code></pre>
</div>
<div class="cell-output cell-output-display">
Changes to your `wandb` environment variables will be ignored because your `wandb` session has already started. For more information on how to modify your settings with `wandb.init()` arguments, please refer to <a href="https://wandb.me/wandb-init" target="_blank">the W&amp;B docs</a>.
</div>
<div class="cell-output cell-output-stderr">
<pre><code>wandb: Currently logged in as: davanstrien (flyswot). Use `wandb login --relogin` to force relogin</code></pre>
</div>
<div class="cell-output cell-output-display">
Tracking run with wandb version 0.12.21
</div>
<div class="cell-output cell-output-display">
Run data is saved locally in <code>/content/wandb/run-20220724_144321-sgzdksxm</code>
</div>
<div class="cell-output cell-output-display">
Syncing run <strong><a href="https://wandb.ai/davanstrien/chapbooks/runs/sgzdksxm" target="_blank">detr-resnet-50_fine_tuned_nls_chapbooks</a></strong> to <a href="https://wandb.ai/davanstrien/chapbooks" target="_blank">Weights &amp; Biases</a> (<a href="https://wandb.me/run" target="_blank">docs</a>)<br>
</div>
<div class="cell-output cell-output-display">

    <div>
      
      <progress value="8170" max="8170" style="width:300px; height:20px; vertical-align: middle;"></progress>
      [8170/8170 5:15:38, Epoch 10/10]
    </div>
    
<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">Step</th>
<th data-quarto-table-cell-role="th">Training Loss</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>50</td>
<td>1.975700</td>
</tr>
<tr class="even">
<td>100</td>
<td>3.254000</td>
</tr>
<tr class="odd">
<td>150</td>
<td>1.563300</td>
</tr>
<tr class="even">
<td>200</td>
<td>1.103100</td>
</tr>
<tr class="odd">
<td>250</td>
<td>1.468000</td>
</tr>
<tr class="even">
<td>300</td>
<td>1.169700</td>
</tr>
<tr class="odd">
<td>350</td>
<td>1.326600</td>
</tr>
<tr class="even">
<td>400</td>
<td>1.413800</td>
</tr>
<tr class="odd">
<td>450</td>
<td>1.101600</td>
</tr>
<tr class="even">
<td>500</td>
<td>1.054500</td>
</tr>
<tr class="odd">
<td>550</td>
<td>0.946000</td>
</tr>
<tr class="even">
<td>600</td>
<td>0.871600</td>
</tr>
<tr class="odd">
<td>650</td>
<td>0.723600</td>
</tr>
<tr class="even">
<td>700</td>
<td>0.866800</td>
</tr>
<tr class="odd">
<td>750</td>
<td>0.740400</td>
</tr>
<tr class="even">
<td>800</td>
<td>0.753300</td>
</tr>
<tr class="odd">
<td>850</td>
<td>0.748900</td>
</tr>
<tr class="even">
<td>900</td>
<td>0.919600</td>
</tr>
<tr class="odd">
<td>950</td>
<td>0.805800</td>
</tr>
<tr class="even">
<td>1000</td>
<td>0.902200</td>
</tr>
<tr class="odd">
<td>1050</td>
<td>0.788800</td>
</tr>
<tr class="even">
<td>1100</td>
<td>0.734400</td>
</tr>
<tr class="odd">
<td>1150</td>
<td>0.635700</td>
</tr>
<tr class="even">
<td>1200</td>
<td>0.769000</td>
</tr>
<tr class="odd">
<td>1250</td>
<td>0.673000</td>
</tr>
<tr class="even">
<td>1300</td>
<td>0.766200</td>
</tr>
<tr class="odd">
<td>1350</td>
<td>0.664800</td>
</tr>
<tr class="even">
<td>1400</td>
<td>0.653700</td>
</tr>
<tr class="odd">
<td>1450</td>
<td>0.589500</td>
</tr>
<tr class="even">
<td>1500</td>
<td>0.580900</td>
</tr>
<tr class="odd">
<td>1550</td>
<td>0.583200</td>
</tr>
<tr class="even">
<td>1600</td>
<td>0.736000</td>
</tr>
<tr class="odd">
<td>1650</td>
<td>0.594900</td>
</tr>
<tr class="even">
<td>1700</td>
<td>0.701400</td>
</tr>
<tr class="odd">
<td>1750</td>
<td>0.600300</td>
</tr>
<tr class="even">
<td>1800</td>
<td>0.470900</td>
</tr>
<tr class="odd">
<td>1850</td>
<td>0.522800</td>
</tr>
<tr class="even">
<td>1900</td>
<td>0.590300</td>
</tr>
<tr class="odd">
<td>1950</td>
<td>0.566300</td>
</tr>
<tr class="even">
<td>2000</td>
<td>0.586800</td>
</tr>
<tr class="odd">
<td>2050</td>
<td>0.623800</td>
</tr>
<tr class="even">
<td>2100</td>
<td>0.523400</td>
</tr>
<tr class="odd">
<td>2150</td>
<td>0.562500</td>
</tr>
<tr class="even">
<td>2200</td>
<td>0.604100</td>
</tr>
<tr class="odd">
<td>2250</td>
<td>0.518000</td>
</tr>
<tr class="even">
<td>2300</td>
<td>0.525100</td>
</tr>
<tr class="odd">
<td>2350</td>
<td>0.499100</td>
</tr>
<tr class="even">
<td>2400</td>
<td>0.564900</td>
</tr>
<tr class="odd">
<td>2450</td>
<td>0.455100</td>
</tr>
<tr class="even">
<td>2500</td>
<td>0.465000</td>
</tr>
<tr class="odd">
<td>2550</td>
<td>0.533200</td>
</tr>
<tr class="even">
<td>2600</td>
<td>0.512500</td>
</tr>
<tr class="odd">
<td>2650</td>
<td>0.465100</td>
</tr>
<tr class="even">
<td>2700</td>
<td>0.521800</td>
</tr>
<tr class="odd">
<td>2750</td>
<td>0.519500</td>
</tr>
<tr class="even">
<td>2800</td>
<td>0.456800</td>
</tr>
<tr class="odd">
<td>2850</td>
<td>0.444400</td>
</tr>
<tr class="even">
<td>2900</td>
<td>0.429600</td>
</tr>
<tr class="odd">
<td>2950</td>
<td>0.445400</td>
</tr>
<tr class="even">
<td>3000</td>
<td>0.425600</td>
</tr>
<tr class="odd">
<td>3050</td>
<td>0.439600</td>
</tr>
<tr class="even">
<td>3100</td>
<td>0.468000</td>
</tr>
<tr class="odd">
<td>3150</td>
<td>0.426500</td>
</tr>
<tr class="even">
<td>3200</td>
<td>0.433500</td>
</tr>
<tr class="odd">
<td>3250</td>
<td>0.479400</td>
</tr>
<tr class="even">
<td>3300</td>
<td>0.421800</td>
</tr>
<tr class="odd">
<td>3350</td>
<td>0.449500</td>
</tr>
<tr class="even">
<td>3400</td>
<td>0.399300</td>
</tr>
<tr class="odd">
<td>3450</td>
<td>0.424500</td>
</tr>
<tr class="even">
<td>3500</td>
<td>0.447700</td>
</tr>
<tr class="odd">
<td>3550</td>
<td>0.428900</td>
</tr>
<tr class="even">
<td>3600</td>
<td>0.403800</td>
</tr>
<tr class="odd">
<td>3650</td>
<td>0.448300</td>
</tr>
<tr class="even">
<td>3700</td>
<td>0.424300</td>
</tr>
<tr class="odd">
<td>3750</td>
<td>0.396600</td>
</tr>
<tr class="even">
<td>3800</td>
<td>0.405900</td>
</tr>
<tr class="odd">
<td>3850</td>
<td>0.436300</td>
</tr>
<tr class="even">
<td>3900</td>
<td>0.371500</td>
</tr>
<tr class="odd">
<td>3950</td>
<td>0.412300</td>
</tr>
<tr class="even">
<td>4000</td>
<td>0.389200</td>
</tr>
<tr class="odd">
<td>4050</td>
<td>0.391900</td>
</tr>
<tr class="even">
<td>4100</td>
<td>0.403200</td>
</tr>
<tr class="odd">
<td>4150</td>
<td>0.386800</td>
</tr>
<tr class="even">
<td>4200</td>
<td>0.382500</td>
</tr>
<tr class="odd">
<td>4250</td>
<td>0.402000</td>
</tr>
<tr class="even">
<td>4300</td>
<td>0.374400</td>
</tr>
<tr class="odd">
<td>4350</td>
<td>0.355900</td>
</tr>
<tr class="even">
<td>4400</td>
<td>0.390800</td>
</tr>
<tr class="odd">
<td>4450</td>
<td>0.402600</td>
</tr>
<tr class="even">
<td>4500</td>
<td>0.397100</td>
</tr>
<tr class="odd">
<td>4550</td>
<td>0.399700</td>
</tr>
<tr class="even">
<td>4600</td>
<td>0.363900</td>
</tr>
<tr class="odd">
<td>4650</td>
<td>0.373600</td>
</tr>
<tr class="even">
<td>4700</td>
<td>0.391600</td>
</tr>
<tr class="odd">
<td>4750</td>
<td>0.339200</td>
</tr>
<tr class="even">
<td>4800</td>
<td>0.351900</td>
</tr>
<tr class="odd">
<td>4850</td>
<td>0.381800</td>
</tr>
<tr class="even">
<td>4900</td>
<td>0.381800</td>
</tr>
<tr class="odd">
<td>4950</td>
<td>0.326000</td>
</tr>
<tr class="even">
<td>5000</td>
<td>0.388300</td>
</tr>
<tr class="odd">
<td>5050</td>
<td>0.359100</td>
</tr>
<tr class="even">
<td>5100</td>
<td>0.380500</td>
</tr>
<tr class="odd">
<td>5150</td>
<td>0.357100</td>
</tr>
<tr class="even">
<td>5200</td>
<td>0.389500</td>
</tr>
<tr class="odd">
<td>5250</td>
<td>0.386200</td>
</tr>
<tr class="even">
<td>5300</td>
<td>0.373000</td>
</tr>
<tr class="odd">
<td>5350</td>
<td>0.340000</td>
</tr>
<tr class="even">
<td>5400</td>
<td>0.337100</td>
</tr>
<tr class="odd">
<td>5450</td>
<td>0.357500</td>
</tr>
<tr class="even">
<td>5500</td>
<td>0.338900</td>
</tr>
<tr class="odd">
<td>5550</td>
<td>0.334500</td>
</tr>
<tr class="even">
<td>5600</td>
<td>0.362000</td>
</tr>
<tr class="odd">
<td>5650</td>
<td>0.426100</td>
</tr>
<tr class="even">
<td>5700</td>
<td>0.329500</td>
</tr>
<tr class="odd">
<td>5750</td>
<td>0.321500</td>
</tr>
<tr class="even">
<td>5800</td>
<td>0.328800</td>
</tr>
<tr class="odd">
<td>5850</td>
<td>0.322400</td>
</tr>
<tr class="even">
<td>5900</td>
<td>0.385900</td>
</tr>
<tr class="odd">
<td>5950</td>
<td>0.373800</td>
</tr>
<tr class="even">
<td>6000</td>
<td>0.326000</td>
</tr>
<tr class="odd">
<td>6050</td>
<td>0.335200</td>
</tr>
<tr class="even">
<td>6100</td>
<td>0.341600</td>
</tr>
<tr class="odd">
<td>6150</td>
<td>0.309600</td>
</tr>
<tr class="even">
<td>6200</td>
<td>0.295700</td>
</tr>
<tr class="odd">
<td>6250</td>
<td>0.338600</td>
</tr>
<tr class="even">
<td>6300</td>
<td>0.326800</td>
</tr>
<tr class="odd">
<td>6350</td>
<td>0.305600</td>
</tr>
<tr class="even">
<td>6400</td>
<td>0.287200</td>
</tr>
<tr class="odd">
<td>6450</td>
<td>0.307700</td>
</tr>
<tr class="even">
<td>6500</td>
<td>0.297000</td>
</tr>
<tr class="odd">
<td>6550</td>
<td>0.296700</td>
</tr>
<tr class="even">
<td>6600</td>
<td>0.292700</td>
</tr>
<tr class="odd">
<td>6650</td>
<td>0.305300</td>
</tr>
<tr class="even">
<td>6700</td>
<td>0.289300</td>
</tr>
<tr class="odd">
<td>6750</td>
<td>0.290600</td>
</tr>
<tr class="even">
<td>6800</td>
<td>0.277100</td>
</tr>
<tr class="odd">
<td>6850</td>
<td>0.296500</td>
</tr>
<tr class="even">
<td>6900</td>
<td>0.291800</td>
</tr>
<tr class="odd">
<td>6950</td>
<td>0.285800</td>
</tr>
<tr class="even">
<td>7000</td>
<td>0.291400</td>
</tr>
<tr class="odd">
<td>7050</td>
<td>0.282500</td>
</tr>
<tr class="even">
<td>7100</td>
<td>0.271500</td>
</tr>
<tr class="odd">
<td>7150</td>
<td>0.278300</td>
</tr>
<tr class="even">
<td>7200</td>
<td>0.272100</td>
</tr>
<tr class="odd">
<td>7250</td>
<td>0.273800</td>
</tr>
<tr class="even">
<td>7300</td>
<td>0.313500</td>
</tr>
<tr class="odd">
<td>7350</td>
<td>0.288600</td>
</tr>
<tr class="even">
<td>7400</td>
<td>0.258700</td>
</tr>
<tr class="odd">
<td>7450</td>
<td>0.275700</td>
</tr>
<tr class="even">
<td>7500</td>
<td>0.248200</td>
</tr>
<tr class="odd">
<td>7550</td>
<td>0.280800</td>
</tr>
<tr class="even">
<td>7600</td>
<td>0.268500</td>
</tr>
<tr class="odd">
<td>7650</td>
<td>0.258700</td>
</tr>
<tr class="even">
<td>7700</td>
<td>0.302800</td>
</tr>
<tr class="odd">
<td>7750</td>
<td>0.288700</td>
</tr>
<tr class="even">
<td>7800</td>
<td>0.278400</td>
</tr>
<tr class="odd">
<td>7850</td>
<td>0.260700</td>
</tr>
<tr class="even">
<td>7900</td>
<td>0.271200</td>
</tr>
<tr class="odd">
<td>7950</td>
<td>0.247900</td>
</tr>
<tr class="even">
<td>8000</td>
<td>0.234700</td>
</tr>
<tr class="odd">
<td>8050</td>
<td>0.263900</td>
</tr>
<tr class="even">
<td>8100</td>
<td>0.251900</td>
</tr>
<tr class="odd">
<td>8150</td>
<td>0.246900</td>
</tr>
</tbody>
</table>
<p>
</p></div>
<div class="cell-output cell-output-stderr">
<pre><code>Saving model checkpoint to detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-200
Configuration saved in detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-200/config.json
Model weights saved in detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-200/pytorch_model.bin
Feature extractor saved in detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-200/preprocessor_config.json
Feature extractor saved in detr-resnet-50_fine_tuned_nls_chapbooks/preprocessor_config.json
Saving model checkpoint to detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-400
Configuration saved in detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-400/config.json
Model weights saved in detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-400/pytorch_model.bin
Feature extractor saved in detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-400/preprocessor_config.json
Saving model checkpoint to detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-600
Configuration saved in detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-600/config.json
Model weights saved in detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-600/pytorch_model.bin
Feature extractor saved in detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-600/preprocessor_config.json
Deleting older checkpoint [detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-200] due to args.save_total_limit
Saving model checkpoint to detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-800
Configuration saved in detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-800/config.json
Model weights saved in detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-800/pytorch_model.bin
Feature extractor saved in detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-800/preprocessor_config.json
Deleting older checkpoint [detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-400] due to args.save_total_limit
Saving model checkpoint to detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-1000
Configuration saved in detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-1000/config.json
Model weights saved in detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-1000/pytorch_model.bin
Feature extractor saved in detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-1000/preprocessor_config.json
Deleting older checkpoint [detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-600] due to args.save_total_limit
Saving model checkpoint to detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-1200
Configuration saved in detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-1200/config.json
Model weights saved in detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-1200/pytorch_model.bin
Feature extractor saved in detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-1200/preprocessor_config.json
Deleting older checkpoint [detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-800] due to args.save_total_limit
Saving model checkpoint to detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-1400
Configuration saved in detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-1400/config.json
Model weights saved in detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-1400/pytorch_model.bin
Feature extractor saved in detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-1400/preprocessor_config.json
Deleting older checkpoint [detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-1000] due to args.save_total_limit
Saving model checkpoint to detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-1600
Configuration saved in detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-1600/config.json
Model weights saved in detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-1600/pytorch_model.bin
Feature extractor saved in detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-1600/preprocessor_config.json
Deleting older checkpoint [detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-1200] due to args.save_total_limit
Saving model checkpoint to detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-1800
Configuration saved in detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-1800/config.json
Model weights saved in detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-1800/pytorch_model.bin
Feature extractor saved in detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-1800/preprocessor_config.json
Deleting older checkpoint [detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-1400] due to args.save_total_limit
Saving model checkpoint to detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-2000
Configuration saved in detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-2000/config.json
Model weights saved in detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-2000/pytorch_model.bin
Feature extractor saved in detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-2000/preprocessor_config.json
Deleting older checkpoint [detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-1600] due to args.save_total_limit
Saving model checkpoint to detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-2200
Configuration saved in detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-2200/config.json
Model weights saved in detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-2200/pytorch_model.bin
Feature extractor saved in detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-2200/preprocessor_config.json
Deleting older checkpoint [detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-1800] due to args.save_total_limit
Saving model checkpoint to detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-2400
Configuration saved in detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-2400/config.json
Model weights saved in detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-2400/pytorch_model.bin
Feature extractor saved in detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-2400/preprocessor_config.json
Deleting older checkpoint [detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-2000] due to args.save_total_limit
Saving model checkpoint to detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-2600
Configuration saved in detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-2600/config.json
Model weights saved in detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-2600/pytorch_model.bin
Feature extractor saved in detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-2600/preprocessor_config.json
Deleting older checkpoint [detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-2200] due to args.save_total_limit
Saving model checkpoint to detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-2800
Configuration saved in detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-2800/config.json
Model weights saved in detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-2800/pytorch_model.bin
Feature extractor saved in detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-2800/preprocessor_config.json
Deleting older checkpoint [detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-2400] due to args.save_total_limit
Saving model checkpoint to detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-3000
Configuration saved in detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-3000/config.json
Model weights saved in detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-3000/pytorch_model.bin
Feature extractor saved in detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-3000/preprocessor_config.json
Deleting older checkpoint [detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-2600] due to args.save_total_limit
Saving model checkpoint to detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-3200
Configuration saved in detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-3200/config.json
Model weights saved in detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-3200/pytorch_model.bin
Feature extractor saved in detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-3200/preprocessor_config.json
Deleting older checkpoint [detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-2800] due to args.save_total_limit
Saving model checkpoint to detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-3400
Configuration saved in detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-3400/config.json
Model weights saved in detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-3400/pytorch_model.bin
Feature extractor saved in detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-3400/preprocessor_config.json
Deleting older checkpoint [detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-3000] due to args.save_total_limit
Saving model checkpoint to detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-3600
Configuration saved in detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-3600/config.json
Model weights saved in detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-3600/pytorch_model.bin
Feature extractor saved in detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-3600/preprocessor_config.json
Deleting older checkpoint [detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-3200] due to args.save_total_limit
Saving model checkpoint to detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-3800
Configuration saved in detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-3800/config.json
Model weights saved in detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-3800/pytorch_model.bin
Feature extractor saved in detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-3800/preprocessor_config.json
Deleting older checkpoint [detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-3400] due to args.save_total_limit
Saving model checkpoint to detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-4000
Configuration saved in detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-4000/config.json
Model weights saved in detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-4000/pytorch_model.bin
Feature extractor saved in detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-4000/preprocessor_config.json
Deleting older checkpoint [detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-3600] due to args.save_total_limit
Saving model checkpoint to detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-4200
Configuration saved in detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-4200/config.json
Model weights saved in detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-4200/pytorch_model.bin
Feature extractor saved in detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-4200/preprocessor_config.json
Deleting older checkpoint [detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-3800] due to args.save_total_limit
Saving model checkpoint to detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-4400
Configuration saved in detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-4400/config.json
Model weights saved in detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-4400/pytorch_model.bin
Feature extractor saved in detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-4400/preprocessor_config.json
Deleting older checkpoint [detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-4000] due to args.save_total_limit
Saving model checkpoint to detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-4600
Configuration saved in detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-4600/config.json
Model weights saved in detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-4600/pytorch_model.bin
Feature extractor saved in detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-4600/preprocessor_config.json
Deleting older checkpoint [detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-4200] due to args.save_total_limit
Saving model checkpoint to detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-4800
Configuration saved in detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-4800/config.json
Model weights saved in detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-4800/pytorch_model.bin
Feature extractor saved in detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-4800/preprocessor_config.json
Deleting older checkpoint [detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-4400] due to args.save_total_limit
Saving model checkpoint to detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-5000
Configuration saved in detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-5000/config.json
Model weights saved in detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-5000/pytorch_model.bin
Feature extractor saved in detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-5000/preprocessor_config.json
Deleting older checkpoint [detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-4600] due to args.save_total_limit
Saving model checkpoint to detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-5200
Configuration saved in detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-5200/config.json
Model weights saved in detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-5200/pytorch_model.bin
Feature extractor saved in detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-5200/preprocessor_config.json
Deleting older checkpoint [detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-4800] due to args.save_total_limit
Saving model checkpoint to detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-5400
Configuration saved in detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-5400/config.json
Model weights saved in detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-5400/pytorch_model.bin
Feature extractor saved in detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-5400/preprocessor_config.json
Deleting older checkpoint [detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-5000] due to args.save_total_limit
Saving model checkpoint to detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-5600
Configuration saved in detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-5600/config.json
Model weights saved in detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-5600/pytorch_model.bin
Feature extractor saved in detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-5600/preprocessor_config.json
Deleting older checkpoint [detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-5200] due to args.save_total_limit
Saving model checkpoint to detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-5800
Configuration saved in detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-5800/config.json
Model weights saved in detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-5800/pytorch_model.bin
Feature extractor saved in detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-5800/preprocessor_config.json
Deleting older checkpoint [detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-5400] due to args.save_total_limit
Saving model checkpoint to detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-6000
Configuration saved in detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-6000/config.json
Model weights saved in detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-6000/pytorch_model.bin
Feature extractor saved in detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-6000/preprocessor_config.json
Deleting older checkpoint [detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-5600] due to args.save_total_limit
Saving model checkpoint to detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-6200
Configuration saved in detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-6200/config.json
Model weights saved in detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-6200/pytorch_model.bin
Feature extractor saved in detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-6200/preprocessor_config.json
Deleting older checkpoint [detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-5800] due to args.save_total_limit
Saving model checkpoint to detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-6400
Configuration saved in detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-6400/config.json
Model weights saved in detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-6400/pytorch_model.bin
Feature extractor saved in detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-6400/preprocessor_config.json
Deleting older checkpoint [detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-6000] due to args.save_total_limit
Saving model checkpoint to detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-6600
Configuration saved in detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-6600/config.json
Model weights saved in detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-6600/pytorch_model.bin
Feature extractor saved in detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-6600/preprocessor_config.json
Deleting older checkpoint [detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-6200] due to args.save_total_limit
Saving model checkpoint to detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-6800
Configuration saved in detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-6800/config.json
Model weights saved in detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-6800/pytorch_model.bin
Feature extractor saved in detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-6800/preprocessor_config.json
Deleting older checkpoint [detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-6400] due to args.save_total_limit
Saving model checkpoint to detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-7000
Configuration saved in detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-7000/config.json
Model weights saved in detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-7000/pytorch_model.bin
Feature extractor saved in detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-7000/preprocessor_config.json
Deleting older checkpoint [detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-6600] due to args.save_total_limit
Saving model checkpoint to detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-7200
Configuration saved in detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-7200/config.json
Model weights saved in detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-7200/pytorch_model.bin
Feature extractor saved in detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-7200/preprocessor_config.json
Deleting older checkpoint [detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-6800] due to args.save_total_limit
Saving model checkpoint to detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-7400
Configuration saved in detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-7400/config.json
Model weights saved in detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-7400/pytorch_model.bin
Feature extractor saved in detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-7400/preprocessor_config.json
Deleting older checkpoint [detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-7000] due to args.save_total_limit
Saving model checkpoint to detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-7600
Configuration saved in detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-7600/config.json
Model weights saved in detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-7600/pytorch_model.bin
Feature extractor saved in detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-7600/preprocessor_config.json
Deleting older checkpoint [detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-7200] due to args.save_total_limit
Saving model checkpoint to detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-7800
Configuration saved in detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-7800/config.json
Model weights saved in detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-7800/pytorch_model.bin
Feature extractor saved in detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-7800/preprocessor_config.json
Deleting older checkpoint [detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-7400] due to args.save_total_limit
Saving model checkpoint to detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-8000
Configuration saved in detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-8000/config.json
Model weights saved in detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-8000/pytorch_model.bin
Feature extractor saved in detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-8000/preprocessor_config.json
Deleting older checkpoint [detr-resnet-50_fine_tuned_nls_chapbooks/checkpoint-7600] due to args.save_total_limit


Training completed. Do not forget to share your model on huggingface.co/models =)

</code></pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #800080; text-decoration-color: #800080; font-weight: bold">TrainOutput</span><span style="font-weight: bold">(</span>
    <span style="color: #808000; text-decoration-color: #808000">global_step</span>=<span style="color: #008080; text-decoration-color: #008080; font-weight: bold">8170</span>,
    <span style="color: #808000; text-decoration-color: #808000">training_loss</span>=<span style="color: #008080; text-decoration-color: #008080; font-weight: bold">0.5031144771902768</span>,
    <span style="color: #808000; text-decoration-color: #808000">metrics</span>=<span style="font-weight: bold">{</span>
        <span style="color: #008000; text-decoration-color: #008000">'train_runtime'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">18954.8014</span>,
        <span style="color: #008000; text-decoration-color: #008000">'train_samples_per_second'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">3.446</span>,
        <span style="color: #008000; text-decoration-color: #008000">'train_steps_per_second'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">0.431</span>,
        <span style="color: #008000; text-decoration-color: #008000">'total_flos'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">5.190134584879058e+19</span>,
        <span style="color: #008000; text-decoration-color: #008000">'train_loss'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">0.5031144771902768</span>,
        <span style="color: #008000; text-decoration-color: #008000">'epoch'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">10.0</span>
    <span style="font-weight: bold">}</span>
<span style="font-weight: bold">)</span>
</pre>
</div>
</div>
<p>Once we‚Äôve finished training we can use <code>push_to_hub</code> to share our model on the hub.</p>
<div id="cell-73" class="cell">
<div class="sourceCode cell-code" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb53-1">trainer.push_to_hub(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"finished training"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Saving model checkpoint to detr-resnet-50_fine_tuned_nls_chapbooks
Configuration saved in detr-resnet-50_fine_tuned_nls_chapbooks/config.json
Model weights saved in detr-resnet-50_fine_tuned_nls_chapbooks/pytorch_model.bin
Feature extractor saved in detr-resnet-50_fine_tuned_nls_chapbooks/preprocessor_config.json
Several commits (2) will be pushed upstream.
The progress bars may be unreliable.</code></pre>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"5bf4c2600b6648d6a30183acd31b1125","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"2ec3e4ed00f24da0b496d3d801971eeb","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>To https://huggingface.co/davanstrien/detr-resnet-50_fine_tuned_nls_chapbooks
   c94bb78..5c7b9d8  main -&gt; main

Dropping the following result as it does not have all the necessary fields:
{'task': {'name': 'Object Detection', 'type': 'object-detection'}, 'dataset': {'name': 'nls_chapbook_illustrations', 'type': 'nls_chapbook_illustrations', 'args': 'illustration_detection'}}
To https://huggingface.co/davanstrien/detr-resnet-50_fine_tuned_nls_chapbooks
   5c7b9d8..2ece586  main -&gt; main
</code></pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #008000; text-decoration-color: #008000">'https://huggingface.co/davanstrien/detr-resnet-50_fine_tuned_nls_chapbooks/commit/5c7b9d8907981c7ee0005334a3d96d5a8d623957'</span>
</pre>
</div>
<div class="cell-output cell-output-display">

</div>
</div>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>We‚Äôve seen how we can use the datasets library to perform object detection. The main thing we need to work out when we‚Äôre trying to use datasets for a computer vision task in the transfortmer libraryy is how to ensure we can create a transform that gets the images and annotations into a format understood by the relevant <code>feature_extractor</code>. Once we‚Äôve done this for one example we need to replicate the same thing with a batch of examples so we can use it as a transform.</p>
<p>One this is in place many of the same approaches to defining the model and training arguments should look very familiar. I didn‚Äôt spend much time on the training process in this post. I‚Äôll dig into tha in a fguure post as well as covering the process of using/evaluating the model.</p>


</section>

 ]]></description>
  <guid>https://danielvanstrien.xyz/posts/post-with-code/detr/2022-08-16-detr-object-detection.html</guid>
  <pubDate>Tue, 16 Aug 2022 00:00:00 GMT</pubDate>
  <media:content url="https://raw.githubusercontent.com/davanstrien/blog/4100b7d4db7def820bde7930934f1094af87accf/images/detr_model_output.webp" medium="image" type="image/webp"/>
</item>
<item>
  <title>Searching for machine learning models using semantic search</title>
  <dc:creator>Daniel van Strien</dc:creator>
  <link>https://danielvanstrien.xyz/posts/post-with-code/semantic-model-search/2022-07-26-semantic-search-ml-models.html</link>
  <description><![CDATA[ 




<p>The <a href="https://huggingface.co/models">Hugging Face model hub</a> has (at the time of the last checking) 60,509 models publicly available. Some of these models are useful as base models for further fine-tuning; these include your classics like <code>bert-base-uncased</code>.</p>
<p>The hub also has more obscure indie hits that might already do a good job on your desired downstream task or be a closer start. For example, if one wanted to classify the genre of 18th Century books, it might make sense to start with <a href="https://huggingface.co/BritishLibraryLabs/bl-books-genre">a model for classifying 19th Century books</a>.</p>
<section id="finding-candidate-models" class="level2">
<h2 class="anchored" data-anchor-id="finding-candidate-models">Finding candidate models</h2>
<p>Ideally, we‚Äôd like a quick way to identify if a model might already do close to what we want. From there, we would likely want to review a bunch of other info about the model before deciding if it might be helpful for us or not.</p>
<p>Unfortunately, finding suitable models on the hub isn‚Äôt always that easy. Even knowing that models for genre classification exist on the hub, we don‚Äôt find any results.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://danielvanstrien.xyz/posts/post-with-code/semantic-model-search/hub_model_search.webp" class="img-fluid figure-img"></p>
<figcaption>Search results</figcaption>
</figure>
</div>
<p>It‚Äôs not documented exactly how the search on the hub works, but it seems to be based mainly on the model‚Äôs name rather than the README or other information. In this blog post, I will continue some <a href="https://danielvanstrien.xyz/metadata/deployment/huggingface/ethics/huggingface-datasets/faiss/2022/01/13/image_search.html">previous experiments with embeddings</a> to see if there might be different ways in which we could identify potential models.</p>
<p>This will be a very rough experiment and is more about establishing whether this is an avenue worth exploring rather than a fully fleshed-out approach.</p>
<p>First install some libraries we‚Äôll use:</p>
<div id="4NYGk1z2859D" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span></code></pre></div>
</div>
<div id="aM_Rgsey87zT" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">deps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"datasets"</span> ,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sentence-transformers"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rich['jupyter']"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"requests"</span>]</span>
<span id="cb2-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> torch.cuda.is_available():</span>
<span id="cb2-3">    deps.append(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"faiss-gpu"</span>)</span>
<span id="cb2-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb2-5">    deps.append(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"faise-cpu"</span>)</span></code></pre></div>
</div>
<div id="9iRSQjuh9Zcv" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span>capture</span>
<span id="cb3-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>pip install {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" "</span>.join(deps)} <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span>upgrade</span></code></pre></div>
</div>
<div id="Q1aENjqJQd9-" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>git config <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">global</span> credential.helper store</span></code></pre></div>
</div>
<p>These days I almost always have the rich extension loaded!</p>
<div id="b96767fb-42cc-43c0-ad41-e8b6acad55e2" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>load_ext rich</span></code></pre></div>
</div>
</section>
<section id="using-the-huggingface_hub-api-to-download-some-model-metadata" class="level2">
<h2 class="anchored" data-anchor-id="using-the-huggingface_hub-api-to-download-some-model-metadata">Using the huggingface_hub API to download some model metadata</h2>
<p>Our goal is to see if we might be able to find suitable models more efficiently using some form of semantic search (i.e.&nbsp;using embeddings). To do this, we should grab some model data from the hub. The easiest way to do this is using the hub API.</p>
<div id="067510aa-422e-4df0-a96e-954b2e3e7b4c" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> huggingface_hub <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> hf_api</span>
<span id="cb6-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> re</span>
<span id="cb6-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rich <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span></span></code></pre></div>
</div>
<div id="b267170f-c18f-48d7-9b74-a4cda2b6f7ec" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">api <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hf_api.HfApi()</span></code></pre></div>
</div>
<div id="7951900f-2e41-4d6d-875d-21d6e0191325" class="cell" data-outputid="61ea0a7c-20fa-4759-f942-6d3d381a2958" data-execution_count="8">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">api</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="font-weight: bold">&lt;</span><span style="color: #ff00ff; text-decoration-color: #ff00ff; font-weight: bold">huggingface_hub.hf_api.HfApi</span><span style="color: #000000; text-decoration-color: #000000"> object at </span><span style="color: #008080; text-decoration-color: #008080; font-weight: bold">0x7f63832ff810</span><span style="font-weight: bold">&gt;</span>
</pre>
</div>
</div>
<p>We can take a look at some example models</p>
<div id="f48afd68-f454-446b-895f-72fa4db1b0b0" class="cell" data-outputid="f562419a-3aa8-400f-fd21-ee8704b78eca" data-execution_count="9">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">all_models <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> api.list_models()</span>
<span id="cb9-2">all_models[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="font-weight: bold">[</span>
    ModelInfo: <span style="font-weight: bold">{</span>
        modelId: hfl/chinese-macbert-base
        sha: <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>
        lastModified: <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>
        tags: <span style="font-weight: bold">[]</span>
        pipeline_tag: fill-mask
        siblings: <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>
        private: <span style="color: #ff0000; text-decoration-color: #ff0000; font-style: italic">False</span>
        author: <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>
        config: <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>
        id: hfl/chinese-macbert-base
<span style="font-weight: bold">}</span>,
    ModelInfo: <span style="font-weight: bold">{</span>
        modelId: bert-base-uncased
        sha: <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>
        lastModified: <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>
        tags: <span style="font-weight: bold">[]</span>
        pipeline_tag: fill-mask
        siblings: <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>
        private: <span style="color: #ff0000; text-decoration-color: #ff0000; font-style: italic">False</span>
        author: <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>
        config: <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>
        id: bert-base-uncased
<span style="font-weight: bold">}</span>,
    ModelInfo: <span style="font-weight: bold">{</span>
        modelId: microsoft/deberta-base
        sha: <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>
        lastModified: <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>
        tags: <span style="font-weight: bold">[]</span>
        pipeline_tag: <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>
        siblings: <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>
        private: <span style="color: #ff0000; text-decoration-color: #ff0000; font-style: italic">False</span>
        author: <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>
        config: <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>
        id: microsoft/deberta-base
<span style="font-weight: bold">}</span>
<span style="font-weight: bold">]</span>
</pre>
</div>
</div>
<p>For a particular model we can also see what files there are.</p>
<div id="21bc5f59-7bc7-4771-aeb2-b72de638415d" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">files <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> api.list_repo_files(all_models[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].modelId)</span></code></pre></div>
</div>
<div id="016488e0-a684-476c-acfa-b141ba4333bb" class="cell" data-outputid="bb1ce4f6-bd86-4cd2-dd31-57f670527f99" data-execution_count="11">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">files</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="font-weight: bold">[</span>
    <span style="color: #008000; text-decoration-color: #008000">'.gitattributes'</span>,
    <span style="color: #008000; text-decoration-color: #008000">'README.md'</span>,
    <span style="color: #008000; text-decoration-color: #008000">'added_tokens.json'</span>,
    <span style="color: #008000; text-decoration-color: #008000">'config.json'</span>,
    <span style="color: #008000; text-decoration-color: #008000">'flax_model.msgpack'</span>,
    <span style="color: #008000; text-decoration-color: #008000">'pytorch_model.bin'</span>,
    <span style="color: #008000; text-decoration-color: #008000">'special_tokens_map.json'</span>,
    <span style="color: #008000; text-decoration-color: #008000">'tf_model.h5'</span>,
    <span style="color: #008000; text-decoration-color: #008000">'tokenizer.json'</span>,
    <span style="color: #008000; text-decoration-color: #008000">'tokenizer_config.json'</span>,
    <span style="color: #008000; text-decoration-color: #008000">'vocab.txt'</span>
<span style="font-weight: bold">]</span>
</pre>
</div>
</div>
<section id="filtering" class="level3">
<h3 class="anchored" data-anchor-id="filtering">Filtering</h3>
<p>To limit the scope of this blog post, we‚Äôll focus only on Pytorch models and ‚Äòtext classification‚Äô models. The metadata about the model type is likely usually pretty reliable. The model task metadata, on the other hand, is not always reliable in my experience. This means we probably have some models that aren‚Äôt text-classification models and don‚Äôt include some actual text classification models in our dataset. For now, we won‚Äôt worry too much about this.</p>
<div id="3e0d7349-7a39-4560-ad2b-cea6729841d6" class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> huggingface_hub <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ModelSearchArguments</span></code></pre></div>
</div>
<div id="c8acc3a4-daa6-47eb-b33e-41a24839fdbf" class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">model_args <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ModelSearchArguments()</span></code></pre></div>
</div>
<div id="2395c5be-021b-4936-8a59-17dc1c72faad" class="cell" data-outputid="c4084327-bb26-4fa8-c9a4-4697f08f0dbf" data-execution_count="14">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> huggingface_hub <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ModelFilter</span>
<span id="cb14-2"></span>
<span id="cb14-3">model_filter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ModelFilter(</span>
<span id="cb14-4">    task<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>model_args.pipeline_tag.TextClassification, </span>
<span id="cb14-5">    library<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>model_args.library.PyTorch</span>
<span id="cb14-6">)</span>
<span id="cb14-7">api.list_models(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>model_filter)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace">ModelInfo: <span style="font-weight: bold">{</span>
        modelId: distilbert-base-uncased-finetuned-sst-<span style="color: #008080; text-decoration-color: #008080; font-weight: bold">2</span>-english
        sha: 00c3f1ef306e837efb641eaca05d24d161d9513c
        lastModified: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">2022</span>-<span style="color: #008080; text-decoration-color: #008080; font-weight: bold">07</span>-22T<span style="color: #00ff00; text-decoration-color: #00ff00; font-weight: bold">08:00:55</span>.000Z
        tags: <span style="font-weight: bold">[</span><span style="color: #008000; text-decoration-color: #008000">'pytorch'</span>, <span style="color: #008000; text-decoration-color: #008000">'tf'</span>, <span style="color: #008000; text-decoration-color: #008000">'rust'</span>, <span style="color: #008000; text-decoration-color: #008000">'distilbert'</span>, <span style="color: #008000; text-decoration-color: #008000">'text-classification'</span>, <span style="color: #008000; text-decoration-color: #008000">'en'</span>, <span style="color: #008000; text-decoration-color: #008000">'dataset:sst2'</span>, <span style="color: #008000; text-decoration-color: #008000">'dataset:glue'</span>, <span style="color: #008000; text-decoration-color: #008000">'transformers'</span>, <span style="color: #008000; text-decoration-color: #008000">'license:apache-2.0'</span>, <span style="color: #008000; text-decoration-color: #008000">'model-index'</span><span style="font-weight: bold">]</span>
        pipeline_tag: text-classification
        siblings: <span style="font-weight: bold">[</span><span style="color: #800080; text-decoration-color: #800080; font-weight: bold">RepoFile</span><span style="font-weight: bold">(</span><span style="color: #808000; text-decoration-color: #808000">rfilename</span>=<span style="color: #008000; text-decoration-color: #008000">'.gitattributes'</span><span style="font-weight: bold">)</span>, <span style="color: #800080; text-decoration-color: #800080; font-weight: bold">RepoFile</span><span style="font-weight: bold">(</span><span style="color: #808000; text-decoration-color: #808000">rfilename</span>=<span style="color: #008000; text-decoration-color: #008000">'README.md'</span><span style="font-weight: bold">)</span>, <span style="color: #800080; text-decoration-color: #800080; font-weight: bold">RepoFile</span><span style="font-weight: bold">(</span><span style="color: #808000; text-decoration-color: #808000">rfilename</span>=<span style="color: #008000; text-decoration-color: #008000">'config.json'</span><span style="font-weight: bold">)</span>, <span style="color: #800080; text-decoration-color: #800080; font-weight: bold">RepoFile</span><span style="font-weight: bold">(</span><span style="color: #808000; text-decoration-color: #808000">rfilename</span>=<span style="color: #008000; text-decoration-color: #008000">'map.jpeg'</span><span style="font-weight: bold">)</span>, <span style="color: #800080; text-decoration-color: #800080; font-weight: bold">RepoFile</span><span style="font-weight: bold">(</span><span style="color: #808000; text-decoration-color: #808000">rfilename</span>=<span style="color: #008000; text-decoration-color: #008000">'pytorch_model.bin'</span><span style="font-weight: bold">)</span>, <span style="color: #800080; text-decoration-color: #800080; font-weight: bold">RepoFile</span><span style="font-weight: bold">(</span><span style="color: #808000; text-decoration-color: #808000">rfilename</span>=<span style="color: #008000; text-decoration-color: #008000">'rust_model.ot'</span><span style="font-weight: bold">)</span>, <span style="color: #800080; text-decoration-color: #800080; font-weight: bold">RepoFile</span><span style="font-weight: bold">(</span><span style="color: #808000; text-decoration-color: #808000">rfilename</span>=<span style="color: #008000; text-decoration-color: #008000">'tf_model.h5'</span><span style="font-weight: bold">)</span>, <span style="color: #800080; text-decoration-color: #800080; font-weight: bold">RepoFile</span><span style="font-weight: bold">(</span><span style="color: #808000; text-decoration-color: #808000">rfilename</span>=<span style="color: #008000; text-decoration-color: #008000">'tokenizer_config.json'</span><span style="font-weight: bold">)</span>, <span style="color: #800080; text-decoration-color: #800080; font-weight: bold">RepoFile</span><span style="font-weight: bold">(</span><span style="color: #808000; text-decoration-color: #808000">rfilename</span>=<span style="color: #008000; text-decoration-color: #008000">'vocab.txt'</span><span style="font-weight: bold">)]</span>
        private: <span style="color: #ff0000; text-decoration-color: #ff0000; font-style: italic">False</span>
        author: <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>
        config: <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>
        id: distilbert-base-uncased-finetuned-sst-<span style="color: #008080; text-decoration-color: #008080; font-weight: bold">2</span>-english
        downloads: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">5185721</span>
        likes: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">76</span>
        library_name: transformers
<span style="font-weight: bold">}</span>
</pre>
</div>
</div>
<p>Now we have a filter we‚Äôll use that to grab all the models that match this filter.</p>
<div id="ae5c2a2b-f38d-40db-b869-96d9e07a0a25" class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">all_models <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> api.list_models(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>model_filter)</span></code></pre></div>
</div>
<div id="437595fb-489f-4537-98cd-dbae244be69b" class="cell" data-outputid="35d1942b-42f3-478d-c0d0-aad067b52a77" data-execution_count="16">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">all_models[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace">ModelInfo: <span style="font-weight: bold">{</span>
        modelId: distilbert-base-uncased-finetuned-sst-<span style="color: #008080; text-decoration-color: #008080; font-weight: bold">2</span>-english
        sha: 00c3f1ef306e837efb641eaca05d24d161d9513c
        lastModified: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">2022</span>-<span style="color: #008080; text-decoration-color: #008080; font-weight: bold">07</span>-22T<span style="color: #00ff00; text-decoration-color: #00ff00; font-weight: bold">08:00:55</span>.000Z
        tags: <span style="font-weight: bold">[</span><span style="color: #008000; text-decoration-color: #008000">'pytorch'</span>, <span style="color: #008000; text-decoration-color: #008000">'tf'</span>, <span style="color: #008000; text-decoration-color: #008000">'rust'</span>, <span style="color: #008000; text-decoration-color: #008000">'distilbert'</span>, <span style="color: #008000; text-decoration-color: #008000">'text-classification'</span>, <span style="color: #008000; text-decoration-color: #008000">'en'</span>, <span style="color: #008000; text-decoration-color: #008000">'dataset:sst2'</span>, <span style="color: #008000; text-decoration-color: #008000">'dataset:glue'</span>, <span style="color: #008000; text-decoration-color: #008000">'transformers'</span>, <span style="color: #008000; text-decoration-color: #008000">'license:apache-2.0'</span>, <span style="color: #008000; text-decoration-color: #008000">'model-index'</span><span style="font-weight: bold">]</span>
        pipeline_tag: text-classification
        siblings: <span style="font-weight: bold">[</span><span style="color: #800080; text-decoration-color: #800080; font-weight: bold">RepoFile</span><span style="font-weight: bold">(</span><span style="color: #808000; text-decoration-color: #808000">rfilename</span>=<span style="color: #008000; text-decoration-color: #008000">'.gitattributes'</span><span style="font-weight: bold">)</span>, <span style="color: #800080; text-decoration-color: #800080; font-weight: bold">RepoFile</span><span style="font-weight: bold">(</span><span style="color: #808000; text-decoration-color: #808000">rfilename</span>=<span style="color: #008000; text-decoration-color: #008000">'README.md'</span><span style="font-weight: bold">)</span>, <span style="color: #800080; text-decoration-color: #800080; font-weight: bold">RepoFile</span><span style="font-weight: bold">(</span><span style="color: #808000; text-decoration-color: #808000">rfilename</span>=<span style="color: #008000; text-decoration-color: #008000">'config.json'</span><span style="font-weight: bold">)</span>, <span style="color: #800080; text-decoration-color: #800080; font-weight: bold">RepoFile</span><span style="font-weight: bold">(</span><span style="color: #808000; text-decoration-color: #808000">rfilename</span>=<span style="color: #008000; text-decoration-color: #008000">'map.jpeg'</span><span style="font-weight: bold">)</span>, <span style="color: #800080; text-decoration-color: #800080; font-weight: bold">RepoFile</span><span style="font-weight: bold">(</span><span style="color: #808000; text-decoration-color: #808000">rfilename</span>=<span style="color: #008000; text-decoration-color: #008000">'pytorch_model.bin'</span><span style="font-weight: bold">)</span>, <span style="color: #800080; text-decoration-color: #800080; font-weight: bold">RepoFile</span><span style="font-weight: bold">(</span><span style="color: #808000; text-decoration-color: #808000">rfilename</span>=<span style="color: #008000; text-decoration-color: #008000">'rust_model.ot'</span><span style="font-weight: bold">)</span>, <span style="color: #800080; text-decoration-color: #800080; font-weight: bold">RepoFile</span><span style="font-weight: bold">(</span><span style="color: #808000; text-decoration-color: #808000">rfilename</span>=<span style="color: #008000; text-decoration-color: #008000">'tf_model.h5'</span><span style="font-weight: bold">)</span>, <span style="color: #800080; text-decoration-color: #800080; font-weight: bold">RepoFile</span><span style="font-weight: bold">(</span><span style="color: #808000; text-decoration-color: #808000">rfilename</span>=<span style="color: #008000; text-decoration-color: #008000">'tokenizer_config.json'</span><span style="font-weight: bold">)</span>, <span style="color: #800080; text-decoration-color: #800080; font-weight: bold">RepoFile</span><span style="font-weight: bold">(</span><span style="color: #808000; text-decoration-color: #808000">rfilename</span>=<span style="color: #008000; text-decoration-color: #008000">'vocab.txt'</span><span style="font-weight: bold">)]</span>
        private: <span style="color: #ff0000; text-decoration-color: #ff0000; font-style: italic">False</span>
        author: <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>
        config: <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>
        id: distilbert-base-uncased-finetuned-sst-<span style="color: #008080; text-decoration-color: #008080; font-weight: bold">2</span>-english
        downloads: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">5185721</span>
        likes: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">76</span>
        library_name: transformers
<span style="font-weight: bold">}</span>
</pre>
</div>
</div>
<p>Let‚Äôs see how many models that gives us.</p>
<div id="cc2ebb52-22a0-4b5c-827f-a30fb1888127" class="cell" data-outputid="cb4843c7-c2a5-4ce4-88e2-8a3ca61d0b62" data-execution_count="17">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(all_models)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #008080; text-decoration-color: #008080; font-weight: bold">6860</span>
</pre>
</div>
</div>
<p>Later on, in this blog, we‚Äôll want to work with the <code>config.json</code> files (we‚Äôll get back to why later!), so we‚Äôll quickly check that all our models have this.</p>
<div id="874f1d37-e12d-4e96-8ba6-c3e34375c808" class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> has_config(model):</span>
<span id="cb18-2">    has_config <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb18-3">    files <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.siblings</span>
<span id="cb18-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> files:</span>
<span id="cb18-5">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"config.json"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>.rfilename:</span>
<span id="cb18-6">            has_config <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb18-7">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> has_config</span>
<span id="cb18-8">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb18-9">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">continue</span></span></code></pre></div>
</div>
<div id="004ba1c9-6399-4f30-8874-3293d473ae82" class="cell" data-outputid="6170ebb0-3e34-4fd7-c65d-168f44cdc0a1" data-execution_count="19">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">has_config(all_models[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #00ff00; text-decoration-color: #00ff00; font-style: italic">True</span>
</pre>
</div>
</div>
<div id="3a5685b2-c398-4b68-931b-8555dff260f4" class="cell" data-execution_count="20">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">has_config <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [model <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> model <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> all_models <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> has_config(model)]</span></code></pre></div>
</div>
<p>Let‚Äôs check how many we have now</p>
<div id="2a10c2d8-a651-4ab9-9a63-2c16d1c0ca6c" class="cell" data-outputid="a2781c38-844b-4e53-f384-955162485784" data-execution_count="21">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(has_config)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #008080; text-decoration-color: #008080; font-weight: bold">6858</span>
</pre>
</div>
</div>
<p>We can also download a particular file from the hub</p>
<div id="407bf115-4fcc-404f-b087-07713bddba08" class="cell" data-outputid="b35734dc-07a4-4a84-da67-8545de2db38e" data-execution_count="22">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> huggingface_hub <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> hf_hub_download</span>
<span id="cb22-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hf_hub_download(repo_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>all_models[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].modelId, filename<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"config.json"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"b0a08dc1a7ae40aaa3c5d10e5ac6b711","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
</div>
<div id="49ca43cc-fe31-41a5-a320-3455287676c5" class="cell" data-outputid="8b1df43f-4790-42ee-ac42-2a5ef2c48a49" data-execution_count="23">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #008000; text-decoration-color: #008000">'/root/.cache/huggingface/hub/models--distilbert-base-uncased-finetuned-sst-2-english/snapshots/00c3f1ef306e837efb641eaca05d24d161d9513c/config.json'</span>
</pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="23">
<pre><code>Unable to display output for mime type(s): application/vnd.google.colaboratory.intrinsic+json</code></pre>
</div>
</div>
<div id="82b0df42-0a43-444d-8c95-20416fbbe1e7" class="cell" data-execution_count="24">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> json</span>
<span id="cb25-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb25-3">    data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> json.load(f)</span></code></pre></div>
</div>
<div id="0e74566e-7454-4821-835f-48bcbf9994ee" class="cell" data-outputid="70e58eca-c14f-4233-ad3e-11ba57ec22db" data-execution_count="25">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">data</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="font-weight: bold">{</span>
    <span style="color: #008000; text-decoration-color: #008000">'activation'</span>: <span style="color: #008000; text-decoration-color: #008000">'gelu'</span>,
    <span style="color: #008000; text-decoration-color: #008000">'architectures'</span>: <span style="font-weight: bold">[</span><span style="color: #008000; text-decoration-color: #008000">'DistilBertForSequenceClassification'</span><span style="font-weight: bold">]</span>,
    <span style="color: #008000; text-decoration-color: #008000">'attention_dropout'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">0.1</span>,
    <span style="color: #008000; text-decoration-color: #008000">'dim'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">768</span>,
    <span style="color: #008000; text-decoration-color: #008000">'dropout'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">0.1</span>,
    <span style="color: #008000; text-decoration-color: #008000">'finetuning_task'</span>: <span style="color: #008000; text-decoration-color: #008000">'sst-2'</span>,
    <span style="color: #008000; text-decoration-color: #008000">'hidden_dim'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">3072</span>,
    <span style="color: #008000; text-decoration-color: #008000">'id2label'</span>: <span style="font-weight: bold">{</span><span style="color: #008000; text-decoration-color: #008000">'0'</span>: <span style="color: #008000; text-decoration-color: #008000">'NEGATIVE'</span>, <span style="color: #008000; text-decoration-color: #008000">'1'</span>: <span style="color: #008000; text-decoration-color: #008000">'POSITIVE'</span><span style="font-weight: bold">}</span>,
    <span style="color: #008000; text-decoration-color: #008000">'initializer_range'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">0.02</span>,
    <span style="color: #008000; text-decoration-color: #008000">'label2id'</span>: <span style="font-weight: bold">{</span><span style="color: #008000; text-decoration-color: #008000">'NEGATIVE'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">0</span>, <span style="color: #008000; text-decoration-color: #008000">'POSITIVE'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span><span style="font-weight: bold">}</span>,
    <span style="color: #008000; text-decoration-color: #008000">'max_position_embeddings'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">512</span>,
    <span style="color: #008000; text-decoration-color: #008000">'model_type'</span>: <span style="color: #008000; text-decoration-color: #008000">'distilbert'</span>,
    <span style="color: #008000; text-decoration-color: #008000">'n_heads'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">12</span>,
    <span style="color: #008000; text-decoration-color: #008000">'n_layers'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">6</span>,
    <span style="color: #008000; text-decoration-color: #008000">'output_past'</span>: <span style="color: #00ff00; text-decoration-color: #00ff00; font-style: italic">True</span>,
    <span style="color: #008000; text-decoration-color: #008000">'pad_token_id'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">0</span>,
    <span style="color: #008000; text-decoration-color: #008000">'qa_dropout'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">0.1</span>,
    <span style="color: #008000; text-decoration-color: #008000">'seq_classif_dropout'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">0.2</span>,
    <span style="color: #008000; text-decoration-color: #008000">'sinusoidal_pos_embds'</span>: <span style="color: #ff0000; text-decoration-color: #ff0000; font-style: italic">False</span>,
    <span style="color: #008000; text-decoration-color: #008000">'tie_weights_'</span>: <span style="color: #00ff00; text-decoration-color: #00ff00; font-style: italic">True</span>,
    <span style="color: #008000; text-decoration-color: #008000">'vocab_size'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">30522</span>
<span style="font-weight: bold">}</span>
</pre>
</div>
</div>
<p>We can also check if the model has a <code>README.md</code></p>
<div id="14a01e6e-0bed-4c77-a448-aee48942d50b" class="cell" data-execution_count="26">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> has_file_in_repo(model,file_name):</span>
<span id="cb27-2">    has_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb27-3">    files <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.siblings</span>
<span id="cb27-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> files:</span>
<span id="cb27-5">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> file_name <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>.rfilename:</span>
<span id="cb27-6">            has_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb27-7">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> has_file</span>
<span id="cb27-8">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb27-9">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">continue</span>    </span></code></pre></div>
</div>
<div id="f3569532-b79d-43b3-b6de-dd7bccbebec6" class="cell" data-outputid="526f5015-acb4-4f1d-f9e3-890a780091dd" data-execution_count="27">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1">has_file_in_repo(has_config[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>],<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'README.md'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #00ff00; text-decoration-color: #00ff00; font-style: italic">True</span>
</pre>
</div>
</div>
<div id="7c49793f-2c9b-44a2-8ca5-50aac39be0ce" class="cell" data-execution_count="28">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1">has_readme <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [model <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> model <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> has_config <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> has_file_in_repo(model,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"README.md"</span>)]</span></code></pre></div>
</div>
<p>We can see that there are more configs than READMEs</p>
<div id="431659b1-4913-4161-9de1-71d18fad467a" class="cell" data-outputid="ece8f7eb-585e-4449-ada1-0167aabfd0cf" data-execution_count="29">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(has_readme)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #008080; text-decoration-color: #008080; font-weight: bold">3482</span>
</pre>
</div>
</div>
<div id="5a9d1090-b64e-4715-b5bc-16ed72024696" class="cell" data-outputid="46efd8af-3b3a-45d3-dbaa-8f3c9c22447c" data-execution_count="30">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(has_config)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #008080; text-decoration-color: #008080; font-weight: bold">6858</span>
</pre>
</div>
</div>
<p>We now write some functions to grab both the <code>README.md</code> and <code>config.json</code> files from the hub.</p>
<div id="8f2c70a3-6c96-4c82-a93f-0c65bfcd68b5" class="cell">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> requests.exceptions <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> JSONDecodeError</span>
<span id="cb32-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> concurrent.futures</span></code></pre></div>
</div>
<div id="ab2a6d98-e53e-49e3-b9dd-3f001e90ec09" class="cell">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@lru_cache</span>(maxsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb33-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_model_labels(model):</span>
<span id="cb33-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">try</span>:</span>
<span id="cb33-4">        url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hf_hub_url(repo_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>model.modelId, filename<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"config.json"</span>)</span>
<span id="cb33-5">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> model.modelId, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(requests.get(url).json()[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label2id'</span>].keys())</span>
<span id="cb33-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">except</span> (<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">KeyError</span>, JSONDecodeError, <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">AttributeError</span>):</span>
<span id="cb33-7">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> model.modelId, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb33-8">    </span></code></pre></div>
</div>
<div id="5a80fea4-b7ec-4a4b-98fe-d9987029bc49" class="cell" data-outputid="13f8a44e-a0f0-46db-919a-c496fe045580">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1">get_model_labels(has_config[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="font-weight: bold">(</span><span style="color: #008000; text-decoration-color: #008000">'distilbert-base-uncased-finetuned-sst-2-english'</span>, <span style="font-weight: bold">[</span><span style="color: #008000; text-decoration-color: #008000">'NEGATIVE'</span>, <span style="color: #008000; text-decoration-color: #008000">'POSITIVE'</span><span style="font-weight: bold">])</span>
</pre>
</div>
</div>
<div id="71ba4c5b-d302-4b7d-858b-0ecaecf65ad2" class="cell">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_model_readme(model):</span>
<span id="cb35-2">    url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hf_hub_url(repo_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>model.modelId, filename<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"README.md"</span>)</span>
<span id="cb35-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> requests.get(url).text</span></code></pre></div>
</div>
<div id="998611d1-911f-4b48-890e-2f952e412123" class="cell">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_data(model):</span>
<span id="cb36-2">    readme <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_model_readme(model)</span>
<span id="cb36-3">    _, labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_model_labels(model)</span>
<span id="cb36-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> model.modelId, labels, readme</span></code></pre></div>
</div>
<p>Since this takes a little while we make a progress bar and do this using multiple threads</p>
<div id="ki3UoGgBedzj" class="cell">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> tqdm.auto <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tqdm</span></code></pre></div>
</div>
<div id="3ff5f5c9-9c7a-4ace-b7bb-f85bca8b0051" class="cell" data-outputid="95fc39e4-d9a3-4d37-e795-7d568b11a2ab">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> tqdm(total<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(has_config)) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> progress:</span>
<span id="cb38-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> concurrent.futures.ThreadPoolExecutor() <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> e:</span>
<span id="cb38-3">        tasks <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb38-4">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> model <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> has_config:</span>
<span id="cb38-5">            future <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> e.submit(get_data, model)</span>
<span id="cb38-6">            future.add_done_callback(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> p: progress.update())</span>
<span id="cb38-7">            tasks.append(future)</span>
<span id="cb38-8">results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [task.result() <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> task <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> tasks]</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"228ce92c5f38428a95105d02358f781e","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
</div>
<p>Load our data using Pandas.</p>
<div id="b2215212-5dea-439e-a755-1d88fa304fe9" class="cell">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span></code></pre></div>
</div>
<div id="4cf45fc9-ff41-43ba-b555-acfe5a00fb4e" class="cell">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(results,columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'modelId'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'readme'</span>])</span></code></pre></div>
</div>
<div id="07806467-b410-4a9d-b1c6-0fa915113fa8" class="cell" data-outputid="ea7fba8c-ef67-4cc8-d7f6-1fe242092a1a">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb41-1">df</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="152">

  <div id="df-ffd0311e-ae03-466b-b28a-6d45205c23ad">
    <div class="colab-df-container">
      <div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">modelId</th>
<th data-quarto-table-cell-role="th">label</th>
<th data-quarto-table-cell-role="th">readme</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>distilbert-base-uncased-finetuned-sst-2-english</td>
<td>[NEGATIVE, POSITIVE]</td>
<td>---\nlanguage: en\nlicense: apache-2.0\ndatase...</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>cross-encoder/ms-marco-MiniLM-L-12-v2</td>
<td>[LABEL_0]</td>
<td>---\nlicense: apache-2.0\n---\n# Cross-Encoder...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>cardiffnlp/twitter-xlm-roberta-base-sentiment</td>
<td>[Negative, Neutral, Positive]</td>
<td>---\nlanguage: multilingual\nwidget:\n- text: ...</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>facebook/bart-large-mnli</td>
<td>[contradiction, entailment, neutral]</td>
<td>---\nlicense: mit\nthumbnail: https://huggingf...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>ProsusAI/finbert</td>
<td>[positive, negative, neutral]</td>
<td>---\nlanguage: "en"\ntags:\n- financial-sentim...</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">...</td>
<td>...</td>
<td>...</td>
<td>...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">6845</td>
<td>jinwooChoi/SKKU_AP_SA_KBT6</td>
<td>[LABEL_0, LABEL_1, LABEL_2]</td>
<td>Entry not found</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">6846</td>
<td>jinwooChoi/SKKU_AP_SA_KBT7</td>
<td>[LABEL_0, LABEL_1, LABEL_2]</td>
<td>Entry not found</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">6847</td>
<td>naem1023/electra-phrase-clause-classification-...</td>
<td>None</td>
<td>Entry not found</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">6848</td>
<td>naem1023/electra-phrase-clause-classification-...</td>
<td>None</td>
<td>---\nlicense: apache-2.0\n---\n</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">6849</td>
<td>YYAH/Bert_Roman_Urdu</td>
<td>[LABEL_0, LABEL_1, LABEL_2, LABEL_3]</td>
<td>---\nlicense: unknown\n---\n</td>
</tr>
</tbody>
</table>

<p>6850 rows √ó 3 columns</p>
</div>
      <button class="colab-df-convert" onclick="convertToInteractive('df-ffd0311e-ae03-466b-b28a-6d45205c23ad')" title="Convert this dataframe to an interactive table." style="display:none;">
        
  <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewbox="0 0 24 24" width="24px">
    <path d="M0 0h24v24H0V0z" fill="none"></path>
    <path d="M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z"></path><path d="M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z"></path>
  </svg>
      </button>
      
  <style>
    .colab-df-container {
      display:flex;
      flex-wrap:wrap;
      gap: 12px;
    }

    .colab-df-convert {
      background-color: #E8F0FE;
      border: none;
      border-radius: 50%;
      cursor: pointer;
      display: none;
      fill: #1967D2;
      height: 32px;
      padding: 0 0 0 0;
      width: 32px;
    }

    .colab-df-convert:hover {
      background-color: #E2EBFA;
      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);
      fill: #174EA6;
    }

    [theme=dark] .colab-df-convert {
      background-color: #3B4455;
      fill: #D2E3FC;
    }

    [theme=dark] .colab-df-convert:hover {
      background-color: #434B5C;
      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);
      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));
      fill: #FFFFFF;
    }
  </style>

      <script>
        const buttonEl =
          document.querySelector('#df-ffd0311e-ae03-466b-b28a-6d45205c23ad button.colab-df-convert');
        buttonEl.style.display =
          google.colab.kernel.accessAllowed ? 'block' : 'none';

        async function convertToInteractive(key) {
          const element = document.querySelector('#df-ffd0311e-ae03-466b-b28a-6d45205c23ad');
          const dataTable =
            await google.colab.kernel.invokeFunction('convertToInteractive',
                                                     [key], {});
          if (!dataTable) return;

          const docLinkHtml = 'Like what you see? Visit the ' +
            '<a target="_blank" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'
            + ' to learn more about interactive tables.';
          element.innerHTML = '';
          dataTable['output_type'] = 'display_data';
          await google.colab.output.renderOutput(dataTable, element);
          const docLink = document.createElement('div');
          docLink.innerHTML = docLinkHtml;
          element.appendChild(docLink);
        }
      </script>
    </div>
  </div>
  
</div>
</div>
<p>You can see we now have a DataFrame containing the modelID, the model labels and the <code>README.md</code> for each model (where it exists).</p>
<p>Since the <code>README.md</code> (the model card) is the obvious source of information about a model we‚Äôll start here. One question we may have is how long our the <code>README.md</code> is. Some models have very detailed model cards whilst others have very little information in the model card. We can get a bit of a sense of this by looking at the range of <code>README.md</code> lenghts:</p>
<div id="cca840b3-8267-467b-afac-5ee65fe60826" class="cell" data-outputid="649b8058-b23c-4a19-aadc-b86983dad67c">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1">df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'readme'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>).describe()</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace">count     <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">6850.000000</span>
mean      <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1009.164818</span>
std       <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1750.509155</span>
min          <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">0.000000</span>
<span style="color: #008080; text-decoration-color: #008080; font-weight: bold">25</span>%         <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">15.000000</span>
<span style="color: #008080; text-decoration-color: #008080; font-weight: bold">50</span>%         <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">20.500000</span>
<span style="color: #008080; text-decoration-color: #008080; font-weight: bold">75</span>%       <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1736.000000</span>
max      <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">56172.000000</span>
Name: readme, dtype: float64
</pre>
</div>
</div>
<p>We might want to filter on the length of the README so we‚Äôll store that info in a new column.</p>
<div id="b74ea3e4-0416-4b63-a9cc-0e071c787847" class="cell">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb43-1">df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'readme_len'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'readme'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>)</span></code></pre></div>
</div>
<p>Since we might want to work with this data again, let‚Äôs load it into a <code>datasets</code> Dataset and use <code>push_to_hub</code> to store a copy.</p>
<div id="CToEfh1hoAd9" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb44-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> datasets <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Dataset</span></code></pre></div>
</div>
<div id="wosRsA-kpSys" class="cell" data-outputid="a1c23174-caac-4f58-ff2e-053725d91293">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb45-1">ds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Dataset.from_pandas(df)</span>
<span id="cb45-2">ds</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #800080; text-decoration-color: #800080; font-weight: bold">Dataset</span><span style="font-weight: bold">({</span>
    features: <span style="font-weight: bold">[</span><span style="color: #008000; text-decoration-color: #008000">'modelId'</span>, <span style="color: #008000; text-decoration-color: #008000">'label'</span>, <span style="color: #008000; text-decoration-color: #008000">'readme'</span>, <span style="color: #008000; text-decoration-color: #008000">'readme_len'</span><span style="font-weight: bold">]</span>,
    num_rows: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">6850</span>
<span style="font-weight: bold">})</span>
</pre>
</div>
</div>
<div id="LLbMIkpeoNlQ" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb46-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> huggingface_hub <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> notebook_login</span></code></pre></div>
</div>
<div id="NNeymt5hoPGi" class="cell" data-outputid="968e23b7-6fa3-4125-c942-f204d0c26600" data-execution_count="10">
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb47-1">notebook_login()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Login successful
Your token has been saved to /root/.huggingface/token</code></pre>
</div>
</div>
<div id="CH0d6FiJoFJi" class="cell" data-outputid="df5b9707-6ada-4115-92df-9ed7c3b01512">
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb49-1">ds.push_to_hub(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'davanstrien/hf_model_metadata'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"28cc772b519d4347985897d4903dc19a","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>/usr/local/lib/python3.7/dist-packages/huggingface_hub/hf_api.py:1951: FutureWarning: `identical_ok` has no effect and is deprecated. It will be removed in 0.11.0.
  FutureWarning,</code></pre>
</div>
</div>
<p>We can now load it again using <code>load_dataset</code>.</p>
<div id="YxAbSYhjp-eq" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb51-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> datasets <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> load_dataset</span></code></pre></div>
</div>
<div id="iaJDdJ2SqCB2" class="cell" data-outputid="c88fbeb4-2c53-4d14-856f-6f8c7ea6c86e" data-execution_count="12">
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb52-1">ds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> load_dataset(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'davanstrien/hf_model_metadata'</span>, split<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"408e1a3ed2724e3888bd734e124fbef1","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Using custom data configuration davanstrien--hf_model_metadata-019f1ad4bdf705b5</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Downloading and preparing dataset None/None (download: 3.71 MiB, generated: 10.64 MiB, post-processed: Unknown size, total: 14.35 MiB) to /root/.cache/huggingface/datasets/davanstrien___parquet/davanstrien--hf_model_metadata-019f1ad4bdf705b5/0.0.0/2a3b91fbd88a2c90d1dbbb32b460cf621d31bd5b05b934492fdef7d8d6f236ec...</code></pre>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"e7977f25a481447c8def638353f05f3a","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"bc7a4fb51c644d3a818211fa2f1f528c","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"4cd45d16679342b493b93eb3d36069e6","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"2a6c2f8b6841459c83ce393208525562","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Dataset parquet downloaded and prepared to /root/.cache/huggingface/datasets/davanstrien___parquet/davanstrien--hf_model_metadata-019f1ad4bdf705b5/0.0.0/2a3b91fbd88a2c90d1dbbb32b460cf621d31bd5b05b934492fdef7d8d6f236ec. Subsequent calls will reuse this data.</code></pre>
</div>
</div>
<p>Clean up some memory‚Ä¶</p>
<div id="8aX5KyADobXr" class="cell">
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb56-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">del</span> df</span></code></pre></div>
</div>
</section>
</section>
<section id="semantic-search-of-model-cards" class="level2">
<h2 class="anchored" data-anchor-id="semantic-search-of-model-cards">Semantic search of model cards</h2>
<p>We now get to the main point of all of this. Can we use semantic search to try and find models of interest? For this, we‚Äôll use the sentence-transformers library. This blog won‚Äôt cover all the background of this library. The <a href="https://www.sbert.net/index.html">docs</a> give a helpful overview and some tutorials.</p>
<p>To start, we‚Äôll see if we can search using the information in the <code>README.md</code>. This should, in theory, contain data that might be similar to the kinds of things we want to search for when finding candidate models. We might prefer to use semantic search over an exact match because the terms we use might be different, or there is a related concept/model that might be close enough to make it worthwhile for fine-tuning.</p>
<p>First, we import the <code>SentenceTransformer</code> class and some util functions.</p>
<div id="94dee729-8602-411e-a739-25905f6a2cea" class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb57-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sentence_transformers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> SentenceTransformer, util</span></code></pre></div>
</div>
<p>We‚Äôll now download an embedding model. There are many we could choose from but since we‚Äôre just trying things out at the moment we won‚Äôt stress about the particular model we use here.</p>
<div id="1d121b46-c11e-4883-a909-b64678b51b3b" class="cell" data-outputid="520af8a8-9a99-407d-f218-4ffac17c4b88" data-execution_count="14">
<div class="sourceCode cell-code" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb58-1">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> SentenceTransformer(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'all-MiniLM-L6-v2'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"f3a0b5889f9a40a3a372f7a124e19a75","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"c6cca6bee5874814a6b0284f046affd7","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"cf8315e50b0349028f1573fdf6fbcd1a","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"8fc2797a9f5a4ed39310dd5f0f356534","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"9ac9a69af1894aff91b59ef8c11c29a2","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"15ac8a912e2c44be9d7207d3939637bf","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"dc30bece345d44b4bbf638a6c2f74485","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"18855d2579ca4564a4ad25fe7974b921","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"f5b776124d68413cbddd5111cfad76c9","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"20b2ddb4039749b1aabbe15ec0c04c4b","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"1e22fbe1e9e343a8bd8d01089996d362","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"55ce595a743d4f328ce11c77047236b2","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"368866595611494c88cba4752f61d456","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"77a5a674eec24e8ebb4fc367997dcd60","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
</div>
<p>Let‚Äôs start on longer README‚Äôs, here i mean a long readme that is just not super short‚Ä¶</p>
<div id="03244a14-235a-4ed2-baeb-fb76d9f2e819" class="cell" data-outputid="a578fe56-dde3-4c5d-cee3-c839a7c5bbb3" data-execution_count="15">
<div class="sourceCode cell-code" id="cb59" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb59-1">ds_longer_readmes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ds.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: x[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'readme_len'</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"e8860ae0f2ee4b1f961865168fa0f178","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
</div>
<p>We now create embeddings for the <code>readme</code> column and store this in a new <code>embedding</code> column</p>
<div id="WH4bKP9Tb0UG" class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb60" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb60-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> encode_readme(readme):</span>
<span id="cb60-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> model.encode(readme,device<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cuda'</span>)</span></code></pre></div>
</div>
<div id="b47352c2-3fa7-4e9e-bcbe-df7ebbbfcf30" class="cell" data-outputid="cfcf00ff-c9da-4569-9783-2639240f250f" data-execution_count="17">
<div class="sourceCode cell-code" id="cb61" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb61-1">ds_with_embeddings <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ds_longer_readmes.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> example: </span>
<span id="cb61-2">                                           {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"embedding"</span>:encode_readme(example[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'readme'</span>])},batched<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>)</span>
<span id="cb61-3">                                                                      </span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"370b4cd2300449b48325c49182ada640","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
</div>
<div id="5097699f-8676-48c1-9470-a53d43b0248c" class="cell" data-outputid="0c91419a-2419-4a65-c3c8-bf0789abbd32" data-execution_count="18">
<div class="sourceCode cell-code" id="cb62" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb62-1">ds_with_embeddings</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #800080; text-decoration-color: #800080; font-weight: bold">Dataset</span><span style="font-weight: bold">({</span>
    features: <span style="font-weight: bold">[</span><span style="color: #008000; text-decoration-color: #008000">'modelId'</span>, <span style="color: #008000; text-decoration-color: #008000">'label'</span>, <span style="color: #008000; text-decoration-color: #008000">'readme'</span>, <span style="color: #008000; text-decoration-color: #008000">'readme_len'</span>, <span style="color: #008000; text-decoration-color: #008000">'embedding'</span><span style="font-weight: bold">]</span>,
    num_rows: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">3284</span>
<span style="font-weight: bold">})</span>
</pre>
</div>
</div>
<p>We can now use the <code>add_fais_index</code> to create an index which allows us to efficiently query these embeddings</p>
<div id="19424e6a-ef3d-4c8e-bf99-fbdedb4fdc65" class="cell" data-outputid="2ee9c92d-f6b3-4b4d-d953-43497c538d03" data-execution_count="19">
<div class="sourceCode cell-code" id="cb63" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb63-1">ds_with_embeddings.add_faiss_index(column<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'embedding'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"ad63f7dfb31d4c3fb4c0ea73cab19917","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #800080; text-decoration-color: #800080; font-weight: bold">Dataset</span><span style="font-weight: bold">({</span>
    features: <span style="font-weight: bold">[</span><span style="color: #008000; text-decoration-color: #008000">'modelId'</span>, <span style="color: #008000; text-decoration-color: #008000">'label'</span>, <span style="color: #008000; text-decoration-color: #008000">'readme'</span>, <span style="color: #008000; text-decoration-color: #008000">'readme_len'</span>, <span style="color: #008000; text-decoration-color: #008000">'embedding'</span><span style="font-weight: bold">]</span>,
    num_rows: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">3284</span>
<span style="font-weight: bold">})</span>
</pre>
</div>
</div>
<section id="similar-models" class="level3">
<h3 class="anchored" data-anchor-id="similar-models">Similar models</h3>
<p>To start, we‚Äôll take a readme for a model and see how well the model performs on finding similar models.</p>
<div id="eefa5c39-54aa-4367-909e-16837b506c98" class="cell" data-execution_count="31">
<div class="sourceCode cell-code" id="cb64" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb64-1">query_readme <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ds_with_embeddings[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">35</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'readme'</span>]</span></code></pre></div>
</div>
<div id="9c6e6f85-d27d-46ae-85fb-96e1cb137a23" class="cell" data-outputid="542302b8-dbb5-4046-ec0f-e713e60d8c29" data-execution_count="32">
<div class="sourceCode cell-code" id="cb65" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb65-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(query_readme)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"># Twitter-roBERTa-base for Irony Detection

This is a roBERTa-base model trained on ~58M tweets and finetuned for irony detection with the TweetEval benchmark.

- Paper: <span style="font-weight: bold">[</span>_TweetEval_ benchmark <span style="font-weight: bold">(</span>Findings of EMNLP <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">2020</span><span style="font-weight: bold">)](</span><span style="color: #0000ff; text-decoration-color: #0000ff; text-decoration: underline">https://arxiv.org/pdf/2010.12421.pdf).</span> 
- Git Repo: <span style="font-weight: bold">[</span>Tweeteval official repository<span style="font-weight: bold">](</span><span style="color: #0000ff; text-decoration-color: #0000ff; text-decoration: underline">https://github.com/cardiffnlp/tweeteval).</span>

## Example of classification

```python
from transformers import AutoModelForSequenceClassification
from transformers import TFAutoModelForSequenceClassification
from transformers import AutoTokenizer
import numpy as np
from scipy.special import softmax
import csv
import urllib.request

# Preprocess text <span style="font-weight: bold">(</span>username and link placeholders<span style="font-weight: bold">)</span>
def <span style="color: #800080; text-decoration-color: #800080; font-weight: bold">preprocess</span><span style="font-weight: bold">(</span>text<span style="font-weight: bold">)</span>:
    new_text = <span style="font-weight: bold">[</span>
    <span style="font-weight: bold">]</span>
    for t in <span style="color: #800080; text-decoration-color: #800080; font-weight: bold">text.split</span><span style="font-weight: bold">(</span><span style="color: #008000; text-decoration-color: #008000">" "</span><span style="font-weight: bold">)</span>:
        t = <span style="color: #008000; text-decoration-color: #008000">'@user'</span> if <span style="color: #800080; text-decoration-color: #800080; font-weight: bold">t.startswith</span><span style="font-weight: bold">(</span><span style="color: #008000; text-decoration-color: #008000">'@'</span><span style="font-weight: bold">)</span> and <span style="color: #800080; text-decoration-color: #800080; font-weight: bold">len</span><span style="font-weight: bold">(</span>t<span style="font-weight: bold">)</span> &gt; <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span> else t
        t = <span style="color: #008000; text-decoration-color: #008000">'http'</span> if <span style="color: #800080; text-decoration-color: #800080; font-weight: bold">t.startswith</span><span style="font-weight: bold">(</span><span style="color: #008000; text-decoration-color: #008000">'http'</span><span style="font-weight: bold">)</span> else t
        <span style="color: #800080; text-decoration-color: #800080; font-weight: bold">new_text.append</span><span style="font-weight: bold">(</span>t<span style="font-weight: bold">)</span>
    return <span style="color: #008000; text-decoration-color: #008000">" "</span><span style="color: #800080; text-decoration-color: #800080; font-weight: bold">.join</span><span style="font-weight: bold">(</span>new_text<span style="font-weight: bold">)</span>

# Tasks:
# emoji, emotion, hate, irony, offensive, sentiment
# stance/abortion, stance/atheism, stance/climate, stance/feminist, stance/hillary

<span style="color: #808000; text-decoration-color: #808000">task</span>=<span style="color: #008000; text-decoration-color: #008000">'irony'</span>
MODEL = f"cardiffnlp/twitter-roberta-base-<span style="font-weight: bold">{</span>task<span style="font-weight: bold">}</span>"

tokenizer = <span style="color: #800080; text-decoration-color: #800080; font-weight: bold">AutoTokenizer.from_pretrained</span><span style="font-weight: bold">(</span>MODEL<span style="font-weight: bold">)</span>

# download label mapping
<span style="color: #808000; text-decoration-color: #808000">labels</span>=<span style="font-weight: bold">[]</span>
mapping_link = f"<span style="color: #0000ff; text-decoration-color: #0000ff; text-decoration: underline">https://raw.githubusercontent.com/cardiffnlp/tweeteval/main/datasets/</span><span style="font-weight: bold">{</span>task<span style="font-weight: bold">}</span><span style="color: #800080; text-decoration-color: #800080">/</span><span style="color: #ff00ff; text-decoration-color: #ff00ff">mapping.txt</span>"
with <span style="color: #800080; text-decoration-color: #800080; font-weight: bold">urllib.request.urlopen</span><span style="font-weight: bold">(</span>mapping_link<span style="font-weight: bold">)</span> as f:
    html = <span style="color: #800080; text-decoration-color: #800080; font-weight: bold">f.read</span><span style="font-weight: bold">()</span><span style="color: #800080; text-decoration-color: #800080; font-weight: bold">.decode</span><span style="font-weight: bold">(</span><span style="color: #008000; text-decoration-color: #008000">'utf-8'</span><span style="font-weight: bold">)</span><span style="color: #800080; text-decoration-color: #800080; font-weight: bold">.split</span><span style="font-weight: bold">(</span><span style="color: #008000; text-decoration-color: #008000">"\n"</span><span style="font-weight: bold">)</span>
    csvreader = <span style="color: #800080; text-decoration-color: #800080; font-weight: bold">csv.reader</span><span style="font-weight: bold">(</span>html, <span style="color: #808000; text-decoration-color: #808000">delimiter</span>=<span style="color: #008000; text-decoration-color: #008000">'\t'</span><span style="font-weight: bold">)</span>
labels = <span style="font-weight: bold">[</span>row<span style="font-weight: bold">[</span><span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span><span style="font-weight: bold">]</span> for row in csvreader if <span style="color: #800080; text-decoration-color: #800080; font-weight: bold">len</span><span style="font-weight: bold">(</span>row<span style="font-weight: bold">)</span> &gt; <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span><span style="font-weight: bold">]</span>

# PT
model = <span style="color: #800080; text-decoration-color: #800080; font-weight: bold">AutoModelForSequenceClassification.from_pretrained</span><span style="font-weight: bold">(</span>MODEL<span style="font-weight: bold">)</span>
<span style="color: #800080; text-decoration-color: #800080; font-weight: bold">model.save_pretrained</span><span style="font-weight: bold">(</span>MODEL<span style="font-weight: bold">)</span>

text = <span style="color: #008000; text-decoration-color: #008000">"Great, it broke the first day..."</span>
text = <span style="color: #800080; text-decoration-color: #800080; font-weight: bold">preprocess</span><span style="font-weight: bold">(</span>text<span style="font-weight: bold">)</span>
encoded_input = <span style="color: #800080; text-decoration-color: #800080; font-weight: bold">tokenizer</span><span style="font-weight: bold">(</span>text, <span style="color: #808000; text-decoration-color: #808000">return_tensors</span>=<span style="color: #008000; text-decoration-color: #008000">'pt'</span><span style="font-weight: bold">)</span>
output = <span style="color: #800080; text-decoration-color: #800080; font-weight: bold">model</span><span style="font-weight: bold">(</span>**encoded_input<span style="font-weight: bold">)</span>
scores = output<span style="font-weight: bold">[</span><span style="color: #008080; text-decoration-color: #008080; font-weight: bold">0</span><span style="font-weight: bold">][</span><span style="color: #008080; text-decoration-color: #008080; font-weight: bold">0</span><span style="font-weight: bold">]</span><span style="color: #800080; text-decoration-color: #800080; font-weight: bold">.detach</span><span style="font-weight: bold">()</span><span style="color: #800080; text-decoration-color: #800080; font-weight: bold">.numpy</span><span style="font-weight: bold">()</span>
scores = <span style="color: #800080; text-decoration-color: #800080; font-weight: bold">softmax</span><span style="font-weight: bold">(</span>scores<span style="font-weight: bold">)</span>

# # TF
# model = <span style="color: #800080; text-decoration-color: #800080; font-weight: bold">TFAutoModelForSequenceClassification.from_pretrained</span><span style="font-weight: bold">(</span>MODEL<span style="font-weight: bold">)</span>
# <span style="color: #800080; text-decoration-color: #800080; font-weight: bold">model.save_pretrained</span><span style="font-weight: bold">(</span>MODEL<span style="font-weight: bold">)</span>

# text = <span style="color: #008000; text-decoration-color: #008000">"Great, it broke the first day..."</span>
# encoded_input = <span style="color: #800080; text-decoration-color: #800080; font-weight: bold">tokenizer</span><span style="font-weight: bold">(</span>text, <span style="color: #808000; text-decoration-color: #808000">return_tensors</span>=<span style="color: #008000; text-decoration-color: #008000">'tf'</span><span style="font-weight: bold">)</span>
# output = <span style="color: #800080; text-decoration-color: #800080; font-weight: bold">model</span><span style="font-weight: bold">(</span>encoded_input<span style="font-weight: bold">)</span>
# scores = output<span style="font-weight: bold">[</span><span style="color: #008080; text-decoration-color: #008080; font-weight: bold">0</span><span style="font-weight: bold">][</span><span style="color: #008080; text-decoration-color: #008080; font-weight: bold">0</span><span style="font-weight: bold">]</span><span style="color: #800080; text-decoration-color: #800080; font-weight: bold">.numpy</span><span style="font-weight: bold">()</span>
# scores = <span style="color: #800080; text-decoration-color: #800080; font-weight: bold">softmax</span><span style="font-weight: bold">(</span>scores<span style="font-weight: bold">)</span>

ranking = <span style="color: #800080; text-decoration-color: #800080; font-weight: bold">np.argsort</span><span style="font-weight: bold">(</span>scores<span style="font-weight: bold">)</span>
ranking = ranking<span style="font-weight: bold">[</span>::<span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-1</span><span style="font-weight: bold">]</span>
for i in <span style="color: #800080; text-decoration-color: #800080; font-weight: bold">range</span><span style="font-weight: bold">(</span>scores.shape<span style="font-weight: bold">[</span><span style="color: #008080; text-decoration-color: #008080; font-weight: bold">0</span><span style="font-weight: bold">])</span>:
    l = labels<span style="font-weight: bold">[</span>ranking<span style="font-weight: bold; font-style: italic">]</span>
<span style="font-style: italic">    s = scores</span><span style="font-weight: bold; font-style: italic">[</span><span style="font-style: italic">ranking</span><span style="font-weight: bold; font-style: italic">]</span>
<span style="font-style: italic">    </span><span style="color: #800080; text-decoration-color: #800080; font-weight: bold; font-style: italic">print</span><span style="font-weight: bold; font-style: italic">(</span><span style="font-style: italic">f"</span><span style="font-weight: bold; font-style: italic">{</span><span style="font-style: italic">i+</span><span style="color: #008080; text-decoration-color: #008080; font-weight: bold; font-style: italic">1</span><span style="font-weight: bold; font-style: italic">})</span><span style="font-style: italic"> </span><span style="font-weight: bold; font-style: italic">{</span><span style="font-style: italic">l</span><span style="font-weight: bold; font-style: italic">}</span><span style="font-style: italic"> </span><span style="font-weight: bold; font-style: italic">{</span><span style="color: #800080; text-decoration-color: #800080; font-weight: bold; font-style: italic">np.round</span><span style="font-weight: bold; font-style: italic">(</span><span style="color: #800080; text-decoration-color: #800080; font-weight: bold; font-style: italic">float</span><span style="font-weight: bold; font-style: italic">(</span><span style="font-style: italic">s</span><span style="font-weight: bold; font-style: italic">)</span><span style="font-style: italic">, </span><span style="color: #008080; text-decoration-color: #008080; font-weight: bold; font-style: italic">4</span><span style="font-weight: bold; font-style: italic">)}</span><span style="font-style: italic">"</span><span style="font-weight: bold; font-style: italic">)</span>

<span style="font-style: italic">```</span>

<span style="font-style: italic">Output: </span>

<span style="font-style: italic">```</span>
<span style="color: #008080; text-decoration-color: #008080; font-weight: bold; font-style: italic">1</span><span style="font-weight: bold; font-style: italic">)</span><span style="font-style: italic"> irony </span><span style="color: #008080; text-decoration-color: #008080; font-weight: bold; font-style: italic">0.914</span>
<span style="color: #008080; text-decoration-color: #008080; font-weight: bold; font-style: italic">2</span><span style="font-weight: bold; font-style: italic">)</span><span style="font-style: italic"> non_irony </span><span style="color: #008080; text-decoration-color: #008080; font-weight: bold; font-style: italic">0.086</span>
<span style="font-style: italic">```</span>

</pre>
</div>
</div>
<p>We pass this README into the model we used to create our embedding. This creates a query embedding for this README.</p>
<div id="58c521ae-952e-4fa8-82bf-8d5d81627f5b" class="cell" data-execution_count="33">
<div class="sourceCode cell-code" id="cb66" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb66-1">q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.encode(query_readme)</span></code></pre></div>
</div>
<p>We can use <code>get_nearest_examples</code> to look for the most similar results to this query.</p>
<div id="5ba977d4-7163-4edf-8dfe-cd789303918a" class="cell" data-execution_count="34">
<div class="sourceCode cell-code" id="cb67" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb67-1">scores, retrieved_examples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ds_with_embeddings.get_nearest_examples(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'embedding'</span>, q, k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span></code></pre></div>
</div>
<p>Let‚Äôs take a look at the first result</p>
<div id="R2ii4efY6KQv" class="cell" data-outputid="da27ad73-add3-4a6c-c3af-0a3c59363dbf" data-execution_count="38">
<div class="sourceCode cell-code" id="cb68" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb68-1"> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(retrieved_examples[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'modelId'</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace">cardiffnlp/twitter-roberta-base-irony
</pre>
</div>
</div>
<div id="44bad884-80c6-4ee6-af83-10e0ecf91082" class="cell" data-outputid="b6c18969-17bd-4248-a3a9-bd19f9297b73" data-execution_count="39">
<div class="sourceCode cell-code" id="cb69" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb69-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(retrieved_examples[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"readme"</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"># Twitter-roBERTa-base for Irony Detection

This is a roBERTa-base model trained on ~58M tweets and finetuned for irony detection with the TweetEval benchmark.

- Paper: <span style="font-weight: bold">[</span>_TweetEval_ benchmark <span style="font-weight: bold">(</span>Findings of EMNLP <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">2020</span><span style="font-weight: bold">)](</span><span style="color: #0000ff; text-decoration-color: #0000ff; text-decoration: underline">https://arxiv.org/pdf/2010.12421.pdf).</span> 
- Git Repo: <span style="font-weight: bold">[</span>Tweeteval official repository<span style="font-weight: bold">](</span><span style="color: #0000ff; text-decoration-color: #0000ff; text-decoration: underline">https://github.com/cardiffnlp/tweeteval).</span>

## Example of classification

```python
from transformers import AutoModelForSequenceClassification
from transformers import TFAutoModelForSequenceClassification
from transformers import AutoTokenizer
import numpy as np
from scipy.special import softmax
import csv
import urllib.request

# Preprocess text <span style="font-weight: bold">(</span>username and link placeholders<span style="font-weight: bold">)</span>
def <span style="color: #800080; text-decoration-color: #800080; font-weight: bold">preprocess</span><span style="font-weight: bold">(</span>text<span style="font-weight: bold">)</span>:
    new_text = <span style="font-weight: bold">[</span>
    <span style="font-weight: bold">]</span>
    for t in <span style="color: #800080; text-decoration-color: #800080; font-weight: bold">text.split</span><span style="font-weight: bold">(</span><span style="color: #008000; text-decoration-color: #008000">" "</span><span style="font-weight: bold">)</span>:
        t = <span style="color: #008000; text-decoration-color: #008000">'@user'</span> if <span style="color: #800080; text-decoration-color: #800080; font-weight: bold">t.startswith</span><span style="font-weight: bold">(</span><span style="color: #008000; text-decoration-color: #008000">'@'</span><span style="font-weight: bold">)</span> and <span style="color: #800080; text-decoration-color: #800080; font-weight: bold">len</span><span style="font-weight: bold">(</span>t<span style="font-weight: bold">)</span> &gt; <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span> else t
        t = <span style="color: #008000; text-decoration-color: #008000">'http'</span> if <span style="color: #800080; text-decoration-color: #800080; font-weight: bold">t.startswith</span><span style="font-weight: bold">(</span><span style="color: #008000; text-decoration-color: #008000">'http'</span><span style="font-weight: bold">)</span> else t
        <span style="color: #800080; text-decoration-color: #800080; font-weight: bold">new_text.append</span><span style="font-weight: bold">(</span>t<span style="font-weight: bold">)</span>
    return <span style="color: #008000; text-decoration-color: #008000">" "</span><span style="color: #800080; text-decoration-color: #800080; font-weight: bold">.join</span><span style="font-weight: bold">(</span>new_text<span style="font-weight: bold">)</span>

# Tasks:
# emoji, emotion, hate, irony, offensive, sentiment
# stance/abortion, stance/atheism, stance/climate, stance/feminist, stance/hillary

<span style="color: #808000; text-decoration-color: #808000">task</span>=<span style="color: #008000; text-decoration-color: #008000">'irony'</span>
MODEL = f"cardiffnlp/twitter-roberta-base-<span style="font-weight: bold">{</span>task<span style="font-weight: bold">}</span>"

tokenizer = <span style="color: #800080; text-decoration-color: #800080; font-weight: bold">AutoTokenizer.from_pretrained</span><span style="font-weight: bold">(</span>MODEL<span style="font-weight: bold">)</span>

# download label mapping
<span style="color: #808000; text-decoration-color: #808000">labels</span>=<span style="font-weight: bold">[]</span>
mapping_link = f"<span style="color: #0000ff; text-decoration-color: #0000ff; text-decoration: underline">https://raw.githubusercontent.com/cardiffnlp/tweeteval/main/datasets/</span><span style="font-weight: bold">{</span>task<span style="font-weight: bold">}</span><span style="color: #800080; text-decoration-color: #800080">/</span><span style="color: #ff00ff; text-decoration-color: #ff00ff">mapping.txt</span>"
with <span style="color: #800080; text-decoration-color: #800080; font-weight: bold">urllib.request.urlopen</span><span style="font-weight: bold">(</span>mapping_link<span style="font-weight: bold">)</span> as f:
    html = <span style="color: #800080; text-decoration-color: #800080; font-weight: bold">f.read</span><span style="font-weight: bold">()</span><span style="color: #800080; text-decoration-color: #800080; font-weight: bold">.decode</span><span style="font-weight: bold">(</span><span style="color: #008000; text-decoration-color: #008000">'utf-8'</span><span style="font-weight: bold">)</span><span style="color: #800080; text-decoration-color: #800080; font-weight: bold">.split</span><span style="font-weight: bold">(</span><span style="color: #008000; text-decoration-color: #008000">"\n"</span><span style="font-weight: bold">)</span>
    csvreader = <span style="color: #800080; text-decoration-color: #800080; font-weight: bold">csv.reader</span><span style="font-weight: bold">(</span>html, <span style="color: #808000; text-decoration-color: #808000">delimiter</span>=<span style="color: #008000; text-decoration-color: #008000">'\t'</span><span style="font-weight: bold">)</span>
labels = <span style="font-weight: bold">[</span>row<span style="font-weight: bold">[</span><span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span><span style="font-weight: bold">]</span> for row in csvreader if <span style="color: #800080; text-decoration-color: #800080; font-weight: bold">len</span><span style="font-weight: bold">(</span>row<span style="font-weight: bold">)</span> &gt; <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span><span style="font-weight: bold">]</span>

# PT
model = <span style="color: #800080; text-decoration-color: #800080; font-weight: bold">AutoModelForSequenceClassification.from_pretrained</span><span style="font-weight: bold">(</span>MODEL<span style="font-weight: bold">)</span>
<span style="color: #800080; text-decoration-color: #800080; font-weight: bold">model.save_pretrained</span><span style="font-weight: bold">(</span>MODEL<span style="font-weight: bold">)</span>

text = <span style="color: #008000; text-decoration-color: #008000">"Great, it broke the first day..."</span>
text = <span style="color: #800080; text-decoration-color: #800080; font-weight: bold">preprocess</span><span style="font-weight: bold">(</span>text<span style="font-weight: bold">)</span>
encoded_input = <span style="color: #800080; text-decoration-color: #800080; font-weight: bold">tokenizer</span><span style="font-weight: bold">(</span>text, <span style="color: #808000; text-decoration-color: #808000">return_tensors</span>=<span style="color: #008000; text-decoration-color: #008000">'pt'</span><span style="font-weight: bold">)</span>
output = <span style="color: #800080; text-decoration-color: #800080; font-weight: bold">model</span><span style="font-weight: bold">(</span>**encoded_input<span style="font-weight: bold">)</span>
scores = output<span style="font-weight: bold">[</span><span style="color: #008080; text-decoration-color: #008080; font-weight: bold">0</span><span style="font-weight: bold">][</span><span style="color: #008080; text-decoration-color: #008080; font-weight: bold">0</span><span style="font-weight: bold">]</span><span style="color: #800080; text-decoration-color: #800080; font-weight: bold">.detach</span><span style="font-weight: bold">()</span><span style="color: #800080; text-decoration-color: #800080; font-weight: bold">.numpy</span><span style="font-weight: bold">()</span>
scores = <span style="color: #800080; text-decoration-color: #800080; font-weight: bold">softmax</span><span style="font-weight: bold">(</span>scores<span style="font-weight: bold">)</span>

# # TF
# model = <span style="color: #800080; text-decoration-color: #800080; font-weight: bold">TFAutoModelForSequenceClassification.from_pretrained</span><span style="font-weight: bold">(</span>MODEL<span style="font-weight: bold">)</span>
# <span style="color: #800080; text-decoration-color: #800080; font-weight: bold">model.save_pretrained</span><span style="font-weight: bold">(</span>MODEL<span style="font-weight: bold">)</span>

# text = <span style="color: #008000; text-decoration-color: #008000">"Great, it broke the first day..."</span>
# encoded_input = <span style="color: #800080; text-decoration-color: #800080; font-weight: bold">tokenizer</span><span style="font-weight: bold">(</span>text, <span style="color: #808000; text-decoration-color: #808000">return_tensors</span>=<span style="color: #008000; text-decoration-color: #008000">'tf'</span><span style="font-weight: bold">)</span>
# output = <span style="color: #800080; text-decoration-color: #800080; font-weight: bold">model</span><span style="font-weight: bold">(</span>encoded_input<span style="font-weight: bold">)</span>
# scores = output<span style="font-weight: bold">[</span><span style="color: #008080; text-decoration-color: #008080; font-weight: bold">0</span><span style="font-weight: bold">][</span><span style="color: #008080; text-decoration-color: #008080; font-weight: bold">0</span><span style="font-weight: bold">]</span><span style="color: #800080; text-decoration-color: #800080; font-weight: bold">.numpy</span><span style="font-weight: bold">()</span>
# scores = <span style="color: #800080; text-decoration-color: #800080; font-weight: bold">softmax</span><span style="font-weight: bold">(</span>scores<span style="font-weight: bold">)</span>

ranking = <span style="color: #800080; text-decoration-color: #800080; font-weight: bold">np.argsort</span><span style="font-weight: bold">(</span>scores<span style="font-weight: bold">)</span>
ranking = ranking<span style="font-weight: bold">[</span>::<span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-1</span><span style="font-weight: bold">]</span>
for i in <span style="color: #800080; text-decoration-color: #800080; font-weight: bold">range</span><span style="font-weight: bold">(</span>scores.shape<span style="font-weight: bold">[</span><span style="color: #008080; text-decoration-color: #008080; font-weight: bold">0</span><span style="font-weight: bold">])</span>:
    l = labels<span style="font-weight: bold">[</span>ranking<span style="font-weight: bold; font-style: italic">]</span>
<span style="font-style: italic">    s = scores</span><span style="font-weight: bold; font-style: italic">[</span><span style="font-style: italic">ranking</span><span style="font-weight: bold; font-style: italic">]</span>
<span style="font-style: italic">    </span><span style="color: #800080; text-decoration-color: #800080; font-weight: bold; font-style: italic">print</span><span style="font-weight: bold; font-style: italic">(</span><span style="font-style: italic">f"</span><span style="font-weight: bold; font-style: italic">{</span><span style="font-style: italic">i+</span><span style="color: #008080; text-decoration-color: #008080; font-weight: bold; font-style: italic">1</span><span style="font-weight: bold; font-style: italic">})</span><span style="font-style: italic"> </span><span style="font-weight: bold; font-style: italic">{</span><span style="font-style: italic">l</span><span style="font-weight: bold; font-style: italic">}</span><span style="font-style: italic"> </span><span style="font-weight: bold; font-style: italic">{</span><span style="color: #800080; text-decoration-color: #800080; font-weight: bold; font-style: italic">np.round</span><span style="font-weight: bold; font-style: italic">(</span><span style="color: #800080; text-decoration-color: #800080; font-weight: bold; font-style: italic">float</span><span style="font-weight: bold; font-style: italic">(</span><span style="font-style: italic">s</span><span style="font-weight: bold; font-style: italic">)</span><span style="font-style: italic">, </span><span style="color: #008080; text-decoration-color: #008080; font-weight: bold; font-style: italic">4</span><span style="font-weight: bold; font-style: italic">)}</span><span style="font-style: italic">"</span><span style="font-weight: bold; font-style: italic">)</span>

<span style="font-style: italic">```</span>

<span style="font-style: italic">Output: </span>

<span style="font-style: italic">```</span>
<span style="color: #008080; text-decoration-color: #008080; font-weight: bold; font-style: italic">1</span><span style="font-weight: bold; font-style: italic">)</span><span style="font-style: italic"> irony </span><span style="color: #008080; text-decoration-color: #008080; font-weight: bold; font-style: italic">0.914</span>
<span style="color: #008080; text-decoration-color: #008080; font-weight: bold; font-style: italic">2</span><span style="font-weight: bold; font-style: italic">)</span><span style="font-style: italic"> non_irony </span><span style="color: #008080; text-decoration-color: #008080; font-weight: bold; font-style: italic">0.086</span>
<span style="font-style: italic">```</span>

</pre>
</div>
</div>
<p>and a lower similarity result</p>
<div id="f956bd40-1ead-4c7f-80a9-1e7f95c33a27" class="cell" data-outputid="29added4-9de2-49bf-c5ea-0785c5a0ff8a" data-execution_count="42">
<div class="sourceCode cell-code" id="cb70" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb70-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(retrieved_examples[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"readme"</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>])</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace">---
language: <span style="color: #008000; text-decoration-color: #008000">"en"</span>
tags:
- roberta
- sentiment
- twitter

widget:
- text: <span style="color: #008000; text-decoration-color: #008000">"Oh no. This is bad.."</span>
- text: <span style="color: #008000; text-decoration-color: #008000">"To be or not to be."</span>
- text: <span style="color: #008000; text-decoration-color: #008000">"Oh Happy Day"</span>

---

This RoBERTa-based model can classify the sentiment of English language text in <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">3</span> classes:

- positive üòÄ
- neutral üòê
- negative üôÅ

The model was fine-tuned on <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">5</span>,<span style="color: #008080; text-decoration-color: #008080; font-weight: bold">304</span> manually annotated social media posts. 
The hold-out accuracy is <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">86.1</span>%. 
For details on the training approach see Web Appendix F in Hartmann et al. <span style="font-weight: bold">(</span><span style="color: #008080; text-decoration-color: #008080; font-weight: bold">2021</span><span style="font-weight: bold">)</span>. 

# Application
```python
from transformers import pipeline
classifier = <span style="color: #800080; text-decoration-color: #800080; font-weight: bold">pipeline</span><span style="font-weight: bold">(</span><span style="color: #008000; text-decoration-color: #008000">"text-classification"</span>, <span style="color: #808000; text-decoration-color: #808000">model</span>=<span style="color: #008000; text-decoration-color: #008000">"j-hartmann/sentiment-roberta-large-english-3-classes"</span>, 
<span style="color: #808000; text-decoration-color: #808000">return_all_scores</span>=<span style="color: #00ff00; text-decoration-color: #00ff00; font-style: italic">True</span><span style="font-weight: bold">)</span>
<span style="color: #800080; text-decoration-color: #800080; font-weight: bold">classifier</span><span style="font-weight: bold">(</span><span style="color: #008000; text-decoration-color: #008000">"This is so nice!"</span><span style="font-weight: bold">)</span>
```

```python
Output:
<span style="font-weight: bold">[[{</span><span style="color: #008000; text-decoration-color: #008000">'label'</span>: <span style="color: #008000; text-decoration-color: #008000">'negative'</span>, <span style="color: #008000; text-decoration-color: #008000">'score'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">0.00016451838018838316</span><span style="font-weight: bold">}</span>,
  <span style="font-weight: bold">{</span><span style="color: #008000; text-decoration-color: #008000">'label'</span>: <span style="color: #008000; text-decoration-color: #008000">'neutral'</span>, <span style="color: #008000; text-decoration-color: #008000">'score'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">0.000174045650055632</span><span style="font-weight: bold">}</span>,
  <span style="font-weight: bold">{</span><span style="color: #008000; text-decoration-color: #008000">'label'</span>: <span style="color: #008000; text-decoration-color: #008000">'positive'</span>, <span style="color: #008000; text-decoration-color: #008000">'score'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">0.9996614456176758</span><span style="font-weight: bold">}]]</span>
```

# Reference
Please cite <span style="font-weight: bold">(</span><span style="color: #0000ff; text-decoration-color: #0000ff; text-decoration: underline">https://journals.sagepub.com/doi/full/10.1177/00222437211037258)</span> when you use our model. Feel free to 
reach out to <span style="font-weight: bold">(</span>mailto:j.p.hartmann@rug.nl<span style="font-weight: bold">)</span> with any questions or feedback you may have.
```
@article<span style="font-weight: bold">{</span>hartmann2021,
  <span style="color: #808000; text-decoration-color: #808000">title</span>=<span style="font-weight: bold">{</span>The Power of Brand Selfies<span style="font-weight: bold">}</span>,
  <span style="color: #808000; text-decoration-color: #808000">author</span>=<span style="font-weight: bold">{</span>Hartmann, Jochen and Heitmann, Mark and Schamp, Christina and Netzer, Oded<span style="font-weight: bold">}</span>,
  <span style="color: #808000; text-decoration-color: #808000">journal</span>=<span style="font-weight: bold">{</span>Journal of Marketing Research<span style="font-weight: bold">}</span>
  <span style="color: #808000; text-decoration-color: #808000">year</span>=<span style="font-weight: bold">{</span><span style="color: #008080; text-decoration-color: #008080; font-weight: bold">2021</span><span style="font-weight: bold">}</span>
<span style="font-weight: bold">}</span>
```
</pre>
</div>
</div>
<p>The results seem pretty reasonable; the first result appears to be a duplicate. The lower result is for a slightly different task using social media data.</p>
</section>
<section id="searching" class="level3">
<h3 class="anchored" data-anchor-id="searching">Searching</h3>
<p>Being able to find similar model cards is a start but we actually wanted to be able to search directly. Let‚Äôs see how our results do if we instead search for some terms we might use to try and find suitable models.</p>
<div id="5X1SP0zdqn0m" class="cell" data-execution_count="43">
<div class="sourceCode cell-code" id="cb71" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb71-1">q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.encode(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fake news"</span>)</span></code></pre></div>
</div>
<div id="Gyu4kUT_rJN5" class="cell" data-execution_count="44">
<div class="sourceCode cell-code" id="cb72" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb72-1">scores, retrieved_examples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ds_with_embeddings.get_nearest_examples(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'embedding'</span>, q, k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span></code></pre></div>
</div>
<div id="ab6d70dc-9ece-4b14-aac5-9cb7e386dbae" class="cell" data-outputid="72ba07c4-64ae-47c3-f7b3-4223feb9a78b" data-execution_count="45">
<div class="sourceCode cell-code" id="cb73" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb73-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(retrieved_examples[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"readme"</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace">This model is fined tuned for the Fake news classifier: Train a text classification model to detect fake news 
articles. Base on the Kaggle <span style="color: #800080; text-decoration-color: #800080; font-weight: bold">dataset</span><span style="font-weight: bold">(</span><span style="color: #0000ff; text-decoration-color: #0000ff; text-decoration: underline">https://www.kaggle.com/clmentbisaillon/fake-and-real-news-dataset).</span>

</pre>
</div>
</div>
<div id="4d202459-7ae7-4dae-84b5-71da7a634b13" class="cell" data-outputid="085a337f-2700-4274-87f7-e93b476b9d41" data-execution_count="46">
<div class="sourceCode cell-code" id="cb74" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb74-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(retrieved_examples[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"readme"</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace">Fake news classifier
This model trains a text classification model to detect fake news articles, 

it uses distilbert-base-uncased-finetuned-sst-<span style="color: #008080; text-decoration-color: #008080; font-weight: bold">2</span>-english pretrained model to work on 

fake and real news dataset from kaggle <span style="font-weight: bold">(</span><span style="color: #0000ff; text-decoration-color: #0000ff; text-decoration: underline">https://www.kaggle.com/clmentbisaillon/fake-and-real-news-dataset)</span>
</pre>
</div>
</div>
<div id="9a4284d7-33ba-4b06-938d-42b0a5a3c01f" class="cell" data-outputid="8942a90d-5e37-4cad-a51d-319a9bed69c8" data-execution_count="47">
<div class="sourceCode cell-code" id="cb75" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb75-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(retrieved_examples[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"readme"</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>])</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace">---
license: mit
---
# Fake and real news classification task 

Model  : <span style="font-weight: bold">[</span>DistilRoBERTa base model<span style="font-weight: bold">](</span><span style="color: #0000ff; text-decoration-color: #0000ff; text-decoration: underline">https://huggingface.co/distilroberta-base)</span>

Dataset : <span style="font-weight: bold">[</span>Fake and real news dataset<span style="font-weight: bold">](</span><span style="color: #0000ff; text-decoration-color: #0000ff; text-decoration: underline">https://www.kaggle.com/datasets/clmentbisaillon/fake-and-real-news-dataset)</span>






</pre>
</div>
</div>
<p>Not a bad start. Let‚Äôs try another one</p>
<div id="JtCctN1E6bP5" class="cell" data-outputid="136640bf-230e-4db2-9bc9-ac625b75a6ad" data-execution_count="58">
<div class="sourceCode cell-code" id="cb76" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb76-1">q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.encode(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"financial sentiment"</span>)</span>
<span id="cb76-2">scores, retrieved_examples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ds_with_embeddings.get_nearest_examples(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'embedding'</span>, q, k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb76-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(retrieved_examples[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"readme"</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace">---
language: en
tags:
- financial-sentiment-analysis
- sentiment-analysis
datasets:
- financial_phrasebank
widget:
- text: Operating profit rose to EUR <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">13.1</span> mn from EUR <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">8.7</span> mn in the corresponding period in <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">2007</span> representing <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">7.7</span> %
of net sales.
- text: Bids or offers include at least <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span>,<span style="color: #008080; text-decoration-color: #008080; font-weight: bold">000</span> shares and the value of the shares must correspond to at least EUR 
<span style="color: #008080; text-decoration-color: #008080; font-weight: bold">4</span>,<span style="color: #008080; text-decoration-color: #008080; font-weight: bold">000</span>.
- text: Raute reported a loss per share of EUR <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">0.86</span> for the first half of <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">2009</span> , against EPS of EUR <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">0.74</span> in the 
corresponding period of <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">2008</span>.
---
### FinancialBERT for Sentiment Analysis

<span style="font-weight: bold">[</span>*FinancialBERT*<span style="font-weight: bold">](</span><span style="color: #0000ff; text-decoration-color: #0000ff; text-decoration: underline">https://huggingface.co/ahmedrachid/FinancialBERT)</span> is a BERT model pre-trained on a large corpora 
of financial texts. The purpose is to enhance financial NLP research and practice in financial domain, hoping that 
financial practitioners and researchers can benefit from this model without the necessity of the significant 
computational resources required to train the model. 

The model was fine-tuned for Sentiment Analysis task on _Financial PhraseBank_ dataset. Experiments show that this 
model outperforms the general BERT and other financial domain-specific models.
 
More details on `FinancialBERT`'s pre-training process can be found at: 
<span style="color: #0000ff; text-decoration-color: #0000ff; text-decoration: underline">https://www.researchgate.net/publication/358284785_FinancialBERT_-_A_Pretrained_Language_Model_for_Financial_Text_M</span>
<span style="color: #0000ff; text-decoration-color: #0000ff; text-decoration: underline">ining</span>

### Training data
FinancialBERT model was fine-tuned on <span style="font-weight: bold">[</span>Financial 
PhraseBank<span style="font-weight: bold">](</span><span style="color: #0000ff; text-decoration-color: #0000ff; text-decoration: underline">https://www.researchgate.net/publication/251231364_FinancialPhraseBank-v10),</span> a dataset consisting of 
<span style="color: #008080; text-decoration-color: #008080; font-weight: bold">4840</span> Financial News categorised by sentiment <span style="font-weight: bold">(</span>negative, neutral, positive<span style="font-weight: bold">)</span>.

### Fine-tuning hyper-parameters
- learning_rate = <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">2e-5</span>
- batch_size = <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">32</span>
- max_seq_length = <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">512</span>
- num_train_epochs = <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">5</span>

### Evaluation metrics
The evaluation metrics used are: Precision, Recall and F1-score. The following is the classification report on the 
test set.

| sentiment  | precision        | recall           | f1-score  | support  |
| ------------- |:-------------:|:-------------:|:-------------:| -----:|
| negative | <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">0.96</span>      | <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">0.97</span> | <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">0.97</span> | <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">58</span> |
| neutral | <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">0.98</span>      | <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">0.99</span> | <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">0.98</span> | <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">279</span> |
| positive | <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">0.98</span>     | <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">0.97</span> | <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">0.97</span> | <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">148</span> |
| macro avg | <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">0.97</span>     | <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">0.98</span> | <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">0.98</span> | <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">485</span> |
| weighted avg | <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">0.98</span>     | <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">0.98</span> | <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">0.98</span> | <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">485</span> |

 ### How to use 
The model can be used thanks to Transformers pipeline for sentiment analysis.
```python
from transformers import BertTokenizer, BertForSequenceClassification
from transformers import pipeline

model = <span style="color: #800080; text-decoration-color: #800080; font-weight: bold">BertForSequenceClassification.from_pretrained</span><span style="font-weight: bold">(</span><span style="color: #008000; text-decoration-color: #008000">"ahmedrachid/FinancialBERT-Sentiment-Analysis"</span>,<span style="color: #808000; text-decoration-color: #808000">num_labels</span>=<span style="color: #008080; text-decoration-color: #008080; font-weight: bold">3</span><span style="font-weight: bold">)</span>
tokenizer = <span style="color: #800080; text-decoration-color: #800080; font-weight: bold">BertTokenizer.from_pretrained</span><span style="font-weight: bold">(</span><span style="color: #008000; text-decoration-color: #008000">"ahmedrachid/FinancialBERT-Sentiment-Analysis"</span><span style="font-weight: bold">)</span>

nlp = <span style="color: #800080; text-decoration-color: #800080; font-weight: bold">pipeline</span><span style="font-weight: bold">(</span><span style="color: #008000; text-decoration-color: #008000">"sentiment-analysis"</span>, <span style="color: #808000; text-decoration-color: #808000">model</span>=<span style="color: #800080; text-decoration-color: #800080">model</span>, <span style="color: #808000; text-decoration-color: #808000">tokenizer</span>=<span style="color: #800080; text-decoration-color: #800080">tokenizer</span><span style="font-weight: bold">)</span>

sentences = <span style="font-weight: bold">[</span><span style="color: #008000; text-decoration-color: #008000">"Operating profit rose to EUR 13.1 mn from EUR 8.7 mn in the corresponding period in 2007 representing</span>
<span style="color: #008000; text-decoration-color: #008000">7.7 % of net sales."</span>,  
             <span style="color: #008000; text-decoration-color: #008000">"Bids or offers include at least 1,000 shares and the value of the shares must correspond to at least </span>
<span style="color: #008000; text-decoration-color: #008000">EUR 4,000."</span>, 
             <span style="color: #008000; text-decoration-color: #008000">"Raute reported a loss per share of EUR 0.86 for the first half of 2009 , against EPS of EUR 0.74 in </span>
<span style="color: #008000; text-decoration-color: #008000">the corresponding period of 2008."</span>, 
             <span style="font-weight: bold">]</span>
results = <span style="color: #800080; text-decoration-color: #800080; font-weight: bold">nlp</span><span style="font-weight: bold">(</span>sentences<span style="font-weight: bold">)</span>
<span style="color: #800080; text-decoration-color: #800080; font-weight: bold">print</span><span style="font-weight: bold">(</span>results<span style="font-weight: bold">)</span>

<span style="font-weight: bold">[{</span><span style="color: #008000; text-decoration-color: #008000">'label'</span>: <span style="color: #008000; text-decoration-color: #008000">'positive'</span>, <span style="color: #008000; text-decoration-color: #008000">'score'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">0.9998133778572083</span><span style="font-weight: bold">}</span>,
 <span style="font-weight: bold">{</span><span style="color: #008000; text-decoration-color: #008000">'label'</span>: <span style="color: #008000; text-decoration-color: #008000">'neutral'</span>, <span style="color: #008000; text-decoration-color: #008000">'score'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">0.9997822642326355</span><span style="font-weight: bold">}</span>,
 <span style="font-weight: bold">{</span><span style="color: #008000; text-decoration-color: #008000">'label'</span>: <span style="color: #008000; text-decoration-color: #008000">'negative'</span>, <span style="color: #008000; text-decoration-color: #008000">'score'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">0.9877365231513977</span><span style="font-weight: bold">}]</span>
```

&gt; Created by <span style="font-weight: bold">[</span>Ahmed Rachid Hazourli<span style="font-weight: bold">](</span><span style="color: #0000ff; text-decoration-color: #0000ff; text-decoration: underline">https://www.linkedin.com/in/ahmed-rachid/)</span>

</pre>
</div>
</div>
<div id="vgxRIzp86hqj" class="cell" data-outputid="2680360f-5af8-45d0-e96d-b3d2ab98fce6" data-execution_count="59">
<div class="sourceCode cell-code" id="cb77" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb77-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(retrieved_examples[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"readme"</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace">---
language: <span style="color: #008000; text-decoration-color: #008000">"en"</span>
tags:
- financial-sentiment-analysis
- sentiment-analysis
widget:
- text: <span style="color: #008000; text-decoration-color: #008000">"Stocks rallied and the British pound gained."</span>
---

FinBERT is a pre-trained NLP model to analyze sentiment of financial text. It is built by further training the BERT
language model in the finance domain, using a large financial corpus and thereby fine-tuning it for financial 
sentiment classification. <span style="font-weight: bold">[</span>Financial 
PhraseBank<span style="font-weight: bold">](</span><span style="color: #0000ff; text-decoration-color: #0000ff; text-decoration: underline">https://www.researchgate.net/publication/251231107_Good_Debt_or_Bad_Debt_Detecting_Semantic_Orientation</span>
<span style="color: #0000ff; text-decoration-color: #0000ff; text-decoration: underline">s_in_Economic_Texts)</span> by Malo et al. <span style="font-weight: bold">(</span><span style="color: #008080; text-decoration-color: #008080; font-weight: bold">2014</span><span style="font-weight: bold">)</span> is used for fine-tuning. For more details, please see the paper 
<span style="font-weight: bold">[</span>FinBERT: Financial Sentiment Analysis with Pre-trained Language Models<span style="font-weight: bold">](</span><span style="color: #0000ff; text-decoration-color: #0000ff; text-decoration: underline">https://arxiv.org/abs/1908.10063)</span> and our 
related <span style="font-weight: bold">(</span><span style="color: #0000ff; text-decoration-color: #0000ff; text-decoration: underline">https://medium.com/prosus-ai-tech-blog/finbert-financial-sentiment-analysis-with-bert-b277a3607101)</span> on 
Medium.

The model will give softmax outputs for three labels: positive, negative or neutral.

---

About Prosus

Prosus is a global consumer internet group and one of the largest technology investors in the world. Operating and 
investing globally in markets with long-term growth potential, Prosus builds leading consumer internet companies 
that empower people and enrich communities. For more information, please visit www.prosus.com.

Contact information

Please contact Dogu Araci dogu.araciprosuscom and Zulkuf Genc zulkuf.gencprosuscom about any FinBERT related issues
and questions.
</pre>
</div>
</div>
<div id="ZsWQFzN26lyH" class="cell" data-outputid="184a7348-7329-4ada-f35f-2271a27dd9f9" data-execution_count="61">
<div class="sourceCode cell-code" id="cb78" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb78-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(retrieved_examples[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"readme"</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>])</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace">---
license: apache-<span style="color: #008080; text-decoration-color: #008080; font-weight: bold">2.0</span>
tags:
- Finance-sentiment-analysis
- generated_from_trainer
metrics:
- f1
- accuracy
- precision
- recall
model-index:
- name: bert-base-finance-sentiment-noisy-search
  results: <span style="font-weight: bold">[]</span>
widget:
 - text: <span style="color: #008000; text-decoration-color: #008000">"Third quarter reported revenues were $10.9 billion, up 5 percent compared to prior year and up 8 percent </span>
<span style="color: #008000; text-decoration-color: #008000">on a currency-neutral basis"</span>
   example_title: <span style="color: #008000; text-decoration-color: #008000">"Positive"</span>
 - text: <span style="color: #008000; text-decoration-color: #008000">"The London-listed website for businesses reported a pretax loss of $26.6 million compared with a loss of </span>
<span style="color: #008000; text-decoration-color: #008000">$12.9 million the previous year"</span>
   example_title: <span style="color: #008000; text-decoration-color: #008000">"Negative"</span>
 - text:  <span style="color: #008000; text-decoration-color: #008000">"Microsoft updates Outlook, Teams, and PowerPoint to be hybrid work ready"</span>
   example_title: <span style="color: #008000; text-decoration-color: #008000">"Neutral"</span>
---

<span style="font-weight: bold">&lt;</span><span style="color: #000000; text-decoration-color: #000000">!-- This model card has been generated automatically according to the information the Trainer had access to. You</span>
<span style="color: #000000; text-decoration-color: #000000">should probably proofread and complete it, then remove this comment. --</span><span style="font-weight: bold">&gt;</span>

# bert-base-finance-sentiment-noisy-search

This model is a fine-tuned version of <span style="font-weight: bold">(</span><span style="color: #0000ff; text-decoration-color: #0000ff; text-decoration: underline">https://huggingface.co/bert-base-uncased)</span> on Kaggle finance news sentiment 
analysis with data enhancement using noisy search. The process is explained below:

<span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span>. First <span style="color: #008000; text-decoration-color: #008000">"bert-base-uncased"</span> was fine-tuned on Kaggle's finance news sentiment analysis 
<span style="color: #0000ff; text-decoration-color: #0000ff; text-decoration: underline">https://www.kaggle.com/ankurzing/sentiment-analysis-for-financial-news</span> dataset achieving accuracy of about <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">88</span>%
<span style="color: #008080; text-decoration-color: #008080; font-weight: bold">2</span>. We then used a logistic-regression classifier on the same data. Here we looked at coefficients that contributed 
the most to the <span style="color: #008000; text-decoration-color: #008000">"Positive"</span> and <span style="color: #008000; text-decoration-color: #008000">"Negative"</span> classes by inspecting only bi-grams. 
<span style="color: #008080; text-decoration-color: #008080; font-weight: bold">3</span>. Using the top <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">25</span> bi-grams per class <span style="font-weight: bold">(</span>i.e. <span style="color: #008000; text-decoration-color: #008000">"Positive"</span> <span style="color: #800080; text-decoration-color: #800080">/</span> <span style="color: #008000; text-decoration-color: #008000">"Negative"</span><span style="font-weight: bold">)</span> we invoked Bing news search with those 
bi-grams and retrieved up to <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">50</span> news items per bi-gram phrase.
<span style="color: #008080; text-decoration-color: #008080; font-weight: bold">4</span>. We called it <span style="color: #008000; text-decoration-color: #008000">"noisy-search"</span> because it is assumed the positive bi-grams <span style="font-weight: bold">(</span>e.g. <span style="color: #008000; text-decoration-color: #008000">"profit rose"</span> , <span style="color: #008000; text-decoration-color: #008000">"growth net"</span><span style="font-weight: bold">)</span> give
rise to positive examples whereas negative bi-grams <span style="font-weight: bold">(</span>e.g. <span style="color: #008000; text-decoration-color: #008000">"loss increase"</span>, <span style="color: #008000; text-decoration-color: #008000">"share loss"</span><span style="font-weight: bold">)</span> result in negative 
examples but note that we didn't test for the validity of this assumption <span style="font-weight: bold">(</span>hence: noisy-search<span style="font-weight: bold">)</span>
<span style="color: #008080; text-decoration-color: #008080; font-weight: bold">5</span>. For each article we kept the title + excerpt and labeled it according to pre-assumptions on class associations.
<span style="color: #008080; text-decoration-color: #008080; font-weight: bold">6</span>. We then trained the same model on the noisy data and apply it to an held-out test set from the original data set
split.
<span style="color: #008080; text-decoration-color: #008080; font-weight: bold">7</span>. Training with couple of thousands noisy <span style="color: #008000; text-decoration-color: #008000">"positives"</span> and <span style="color: #008000; text-decoration-color: #008000">"negatives"</span> examples yielded a test set accuracy of 
about <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">95</span>%. 
<span style="color: #008080; text-decoration-color: #008080; font-weight: bold">8</span>. It shows that by automatically collecting noisy examples using search we can boost accuracy performance from 
about <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">88</span>% to more than <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">95</span>%.

Accuracy results for Logistic Regression <span style="font-weight: bold">(</span>LR<span style="font-weight: bold">)</span> and BERT <span style="font-weight: bold">(</span>base-cased<span style="font-weight: bold">)</span> are shown in the attached pdf:

<span style="color: #0000ff; text-decoration-color: #0000ff; text-decoration: underline">https://drive.google.com/file/d/1MI9gRdppactVZ_XvhCwvoaOV1aRfprrd/view?usp=sharing</span> 


## Model description

BERT model trained on noisy data from search results. See PDF for more details.

## Intended uses &amp; limitations

Intended for use on finance news sentiment analysis with <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">3</span> options: <span style="color: #008000; text-decoration-color: #008000">"Positive"</span>, <span style="color: #008000; text-decoration-color: #008000">"Neutral"</span> and <span style="color: #008000; text-decoration-color: #008000">"Negative"</span>
To get the best results feed the classifier with the title and either the 1st paragraph or a short news 
summarization e.g. of up to <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">64</span> tokens. 

### Training hyperparameters

The following hyperparameters were used during training:
- learning_rate: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">5e-05</span>
- train_batch_size: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">8</span>
- eval_batch_size: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">8</span>
- seed: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">42</span>
- optimizer: Adam with <span style="color: #808000; text-decoration-color: #808000">betas</span>=<span style="font-weight: bold">(</span><span style="color: #008080; text-decoration-color: #008080; font-weight: bold">0.9</span>,<span style="color: #008080; text-decoration-color: #008080; font-weight: bold">0.999</span><span style="font-weight: bold">)</span> and <span style="color: #808000; text-decoration-color: #808000">epsilon</span>=<span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1e-08</span>
- lr_scheduler_type: linear
- num_epochs: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">5</span>


### Framework versions

- Transformers <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">4.16</span>.<span style="color: #008080; text-decoration-color: #008080; font-weight: bold">2</span>
- Pytorch <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1.10</span>.<span style="color: #008080; text-decoration-color: #008080; font-weight: bold">0</span>+cu111
- Datasets <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1.18</span>.<span style="color: #008080; text-decoration-color: #008080; font-weight: bold">3</span>
- Tokenizers <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">0.11</span>.<span style="color: #008080; text-decoration-color: #008080; font-weight: bold">0</span>

</pre>
</div>
</div>
<p>These seem like a good starting point. However, we have a few issues relying on model cards alone. Firstly a lot of models don‚Äôt include them and the quality of them can be mixed. It‚Äôs maybe a question if we want to use a model that has no model card at all but it is possible that despite a good model card we don‚Äôt capture everything we‚Äôd need for searching in the README.</p>
</section>
</section>
<section id="can-we-search-using-model-labels" class="level2">
<h2 class="anchored" data-anchor-id="can-we-search-using-model-labels">Can we search using model labels?</h2>
<p>We‚Äôre only working with classification models in this case. For most Pytorch models on the hub, we have a config file. This config usually contains the model‚Äôs labels. For example, ‚Äòpositive‚Äô, ‚Äònegative‚Äô.</p>
<p>Maybe instead of relying only on the metadata, we can search ‚Äòinside‚Äô the model. The labels will often be a helpful reflection of what we‚Äôre looking for. For example, we want to find a sentiment classification model that roughly puts text into positive or negative sentiment. Again, relying on exact label matches may not work well, but maybe embeddings get around this problem. Let‚Äôs try it out!</p>
<p>Let‚Äôs look at an example label.</p>
<div id="Jpp0XLQCr8IJ" class="cell" data-outputid="eccdba8e-1adb-4eea-e8ff-51fe40107b0a" data-execution_count="62">
<div class="sourceCode cell-code" id="cb79" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb79-1">ds[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>]</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="font-weight: bold">[</span><span style="color: #008000; text-decoration-color: #008000">'NEGATIVE'</span>, <span style="color: #008000; text-decoration-color: #008000">'POSITIVE'</span><span style="font-weight: bold">]</span>
</pre>
</div>
</div>
<p>Since we‚Äôre expecting labels to match this format lets filter out any that don‚Äôt fit this structure.</p>
<div id="VN0CnVw4sPQ6" class="cell" data-outputid="f3e3e663-9f0b-42f3-d73f-c6503e30e71b" data-execution_count="63">
<div class="sourceCode cell-code" id="cb80" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb80-1">ds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ds.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> example: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">isinstance</span>(example[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>],<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>))</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"80d415bda86347cba39a1d0ed9b07f34","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
</div>
<section id="how-to-create-embeddings-for-our-labels" class="level3">
<h3 class="anchored" data-anchor-id="how-to-create-embeddings-for-our-labels">How to create embeddings for our labels?</h3>
<p>How should we encode our labels? At the moment, we have a list of labels. One option would be to create an embedding for every single label, which will require us to query multiple embeddings to check for a match. We may also prefer intuatively to have an embedding for the combination of labels. This is because we probably know more about the model type from all its labels rather than looking at one label at a time. We‚Äôll deal with the labels very crudely by joining them on <code>,</code> and creating a single string out of all the labels. I‚Äôm sure this isn‚Äôt the best possible approach, but it might be a good place to start testing this idea.</p>
<div id="LJ9qTkXPr8E7" class="cell" data-outputid="c4baa793-38b5-485a-891e-eaff9b88ddbc" data-execution_count="64">
<div class="sourceCode cell-code" id="cb81" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb81-1">ds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ds.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> example: {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"string_label"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">","</span>.join(example[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>])})</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"84fa0cfa1ed841979ca99fe17ddf2197","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
</div>
<div id="vURgYEktr8Bq" class="cell" data-outputid="a1f5f2f0-fd6d-4364-db5e-ab4036c3e0f2" data-execution_count="65">
<div class="sourceCode cell-code" id="cb82" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb82-1">ds</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #800080; text-decoration-color: #800080; font-weight: bold">Dataset</span><span style="font-weight: bold">({</span>
    features: <span style="font-weight: bold">[</span><span style="color: #008000; text-decoration-color: #008000">'modelId'</span>, <span style="color: #008000; text-decoration-color: #008000">'label'</span>, <span style="color: #008000; text-decoration-color: #008000">'readme'</span>, <span style="color: #008000; text-decoration-color: #008000">'readme_len'</span>, <span style="color: #008000; text-decoration-color: #008000">'string_label'</span><span style="font-weight: bold">]</span>,
    num_rows: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">4175</span>
<span style="font-weight: bold">})</span>
</pre>
</div>
</div>
<div id="BXiXjHbxspIO" class="cell" data-outputid="3cef0728-5614-42e6-f601-b0c32f381afb" data-execution_count="66">
<div class="sourceCode cell-code" id="cb83" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb83-1">ds_with_embeddings <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ds.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> example: </span>
<span id="cb83-2">                                           {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"label_embedding"</span>:encode_readme(example[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'string_label'</span>])},batched<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>)</span>
<span id="cb83-3">                                                                      </span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"83eb1c47e6d14d268e01dfb6bece0c14","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
</div>
<div id="xmaC0PD_spF6" class="cell" data-outputid="c8387dda-589c-47dc-b4ac-862f12869c90" data-execution_count="67">
<div class="sourceCode cell-code" id="cb84" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb84-1">ds_with_embeddings</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #800080; text-decoration-color: #800080; font-weight: bold">Dataset</span><span style="font-weight: bold">({</span>
    features: <span style="font-weight: bold">[</span><span style="color: #008000; text-decoration-color: #008000">'modelId'</span>, <span style="color: #008000; text-decoration-color: #008000">'label'</span>, <span style="color: #008000; text-decoration-color: #008000">'readme'</span>, <span style="color: #008000; text-decoration-color: #008000">'readme_len'</span>, <span style="color: #008000; text-decoration-color: #008000">'string_label'</span>, <span style="color: #008000; text-decoration-color: #008000">'label_embedding'</span><span style="font-weight: bold">]</span>,
    num_rows: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">4175</span>
<span style="font-weight: bold">})</span>
</pre>
</div>
</div>
</section>
<section id="searching-with-labels" class="level3">
<h3 class="anchored" data-anchor-id="searching-with-labels">Searching with labels</h3>
<p>Now we have some embeddings for the labels, let‚Äôs try searching. Let‚Äôs start with an existing set of labels to see how well we can match those.</p>
<div id="Imdak0SwspDS" class="cell" data-outputid="1cec116b-ddcc-4341-d7ec-2546c85be687" data-execution_count="68">
<div class="sourceCode cell-code" id="cb85" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb85-1">ds_with_embeddings[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'string_label'</span>]</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #008000; text-decoration-color: #008000">'NEGATIVE,POSITIVE'</span>
</pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="68">
<pre><code>Unable to display output for mime type(s): application/vnd.google.colaboratory.intrinsic+json</code></pre>
</div>
</div>
<div id="voCH1RhWspAp" class="cell" data-execution_count="69">
<div class="sourceCode cell-code" id="cb87" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb87-1">q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.encode(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"negative"</span>)</span></code></pre></div>
</div>
<div id="Fx1ZfWnTtHSB" class="cell" data-outputid="fb3b53fe-3d6b-45f8-ea2b-a4478f787096" data-execution_count="70">
<div class="sourceCode cell-code" id="cb88" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb88-1">ds_with_embeddings.add_faiss_index(column<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label_embedding'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"71a66efdc9ca44019ebdd09eef58e444","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #800080; text-decoration-color: #800080; font-weight: bold">Dataset</span><span style="font-weight: bold">({</span>
    features: <span style="font-weight: bold">[</span><span style="color: #008000; text-decoration-color: #008000">'modelId'</span>, <span style="color: #008000; text-decoration-color: #008000">'label'</span>, <span style="color: #008000; text-decoration-color: #008000">'readme'</span>, <span style="color: #008000; text-decoration-color: #008000">'readme_len'</span>, <span style="color: #008000; text-decoration-color: #008000">'string_label'</span>, <span style="color: #008000; text-decoration-color: #008000">'label_embedding'</span><span style="font-weight: bold">]</span>,
    num_rows: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">4175</span>
<span style="font-weight: bold">})</span>
</pre>
</div>
</div>
<div id="eonCnFZIso94" class="cell" data-execution_count="71">
<div class="sourceCode cell-code" id="cb89" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb89-1">scores, retrieved_examples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ds_with_embeddings.get_nearest_examples(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label_embedding'</span>, q, k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span></code></pre></div>
</div>
<div id="eD4DKZgmso6t" class="cell" data-outputid="251c4135-b60a-48d4-eef7-dc6893b078e6" data-execution_count="72">
<div class="sourceCode cell-code" id="cb90" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb90-1">retrieved_examples[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>][:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>]</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="font-weight: bold">[</span>
    <span style="font-weight: bold">[</span><span style="color: #008000; text-decoration-color: #008000">'negative'</span>, <span style="color: #008000; text-decoration-color: #008000">'positive'</span><span style="font-weight: bold">]</span>,
    <span style="font-weight: bold">[</span><span style="color: #008000; text-decoration-color: #008000">'negative'</span>, <span style="color: #008000; text-decoration-color: #008000">'positive'</span><span style="font-weight: bold">]</span>,
    <span style="font-weight: bold">[</span><span style="color: #008000; text-decoration-color: #008000">'negative'</span>, <span style="color: #008000; text-decoration-color: #008000">'positive'</span><span style="font-weight: bold">]</span>,
    <span style="font-weight: bold">[</span><span style="color: #008000; text-decoration-color: #008000">'negative'</span>, <span style="color: #008000; text-decoration-color: #008000">'positive'</span><span style="font-weight: bold">]</span>,
    <span style="font-weight: bold">[</span><span style="color: #008000; text-decoration-color: #008000">'negative'</span>, <span style="color: #008000; text-decoration-color: #008000">'positive'</span><span style="font-weight: bold">]</span>,
    <span style="font-weight: bold">[</span><span style="color: #008000; text-decoration-color: #008000">'negative'</span>, <span style="color: #008000; text-decoration-color: #008000">'positive'</span><span style="font-weight: bold">]</span>,
    <span style="font-weight: bold">[</span><span style="color: #008000; text-decoration-color: #008000">'negative'</span>, <span style="color: #008000; text-decoration-color: #008000">'positive'</span><span style="font-weight: bold">]</span>,
    <span style="font-weight: bold">[</span><span style="color: #008000; text-decoration-color: #008000">'negative'</span>, <span style="color: #008000; text-decoration-color: #008000">'positive'</span><span style="font-weight: bold">]</span>,
    <span style="font-weight: bold">[</span><span style="color: #008000; text-decoration-color: #008000">'negative'</span>, <span style="color: #008000; text-decoration-color: #008000">'positive'</span><span style="font-weight: bold">]</span>,
    <span style="font-weight: bold">[</span><span style="color: #008000; text-decoration-color: #008000">'negative'</span>, <span style="color: #008000; text-decoration-color: #008000">'positive'</span><span style="font-weight: bold">]</span>
<span style="font-weight: bold">]</span>
</pre>
</div>
</div>
<p>So far, these results look pretty good, although we haven‚Äôt done anything we couldn‚Äôt do with simple string matching. Let‚Äôs see what happens if we use a slightly more abstract search.</p>
<div id="nTLa_ucOtgcr" class="cell" data-execution_count="73">
<div class="sourceCode cell-code" id="cb91" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb91-1">q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.encode(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"music"</span>)</span></code></pre></div>
</div>
<div id="bqSUNY53so4F" class="cell" data-execution_count="74">
<div class="sourceCode cell-code" id="cb92" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb92-1">scores, retrieved_examples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ds_with_embeddings.get_nearest_examples(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label_embedding'</span>, q, k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span></code></pre></div>
</div>
<div id="s6IEMI39so1R" class="cell" data-outputid="a18886af-0ca6-4933-e02b-82915760ca9d" data-execution_count="75">
<div class="sourceCode cell-code" id="cb93" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb93-1">retrieved_examples[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>][:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>]</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="font-weight: bold">[</span>
    <span style="font-weight: bold">[</span><span style="color: #008000; text-decoration-color: #008000">'Dance'</span>, <span style="color: #008000; text-decoration-color: #008000">'Heavy Metal'</span>, <span style="color: #008000; text-decoration-color: #008000">'Hip Hop'</span>, <span style="color: #008000; text-decoration-color: #008000">'Indie'</span>, <span style="color: #008000; text-decoration-color: #008000">'Pop'</span>, <span style="color: #008000; text-decoration-color: #008000">'Rock'</span><span style="font-weight: bold">]</span>,
    <span style="font-weight: bold">[</span><span style="color: #008000; text-decoration-color: #008000">'Dance'</span>, <span style="color: #008000; text-decoration-color: #008000">'Heavy Metal'</span>, <span style="color: #008000; text-decoration-color: #008000">'Hip Hop'</span>, <span style="color: #008000; text-decoration-color: #008000">'Indie'</span>, <span style="color: #008000; text-decoration-color: #008000">'Pop'</span>, <span style="color: #008000; text-decoration-color: #008000">'Rock'</span><span style="font-weight: bold">]</span>,
    <span style="font-weight: bold">[</span><span style="color: #008000; text-decoration-color: #008000">'Dance'</span>, <span style="color: #008000; text-decoration-color: #008000">'Heavy Metal'</span>, <span style="color: #008000; text-decoration-color: #008000">'Hip Hop'</span>, <span style="color: #008000; text-decoration-color: #008000">'Indie'</span>, <span style="color: #008000; text-decoration-color: #008000">'Pop'</span>, <span style="color: #008000; text-decoration-color: #008000">'Rock'</span><span style="font-weight: bold">]</span>,
    <span style="font-weight: bold">[</span>
        <span style="color: #008000; text-decoration-color: #008000">'Alternative'</span>,
        <span style="color: #008000; text-decoration-color: #008000">'Country'</span>,
        <span style="color: #008000; text-decoration-color: #008000">'Eletronic Music'</span>,
        <span style="color: #008000; text-decoration-color: #008000">'Gospel and Worship Songs'</span>,
        <span style="color: #008000; text-decoration-color: #008000">'Hip-Hop'</span>,
        <span style="color: #008000; text-decoration-color: #008000">'Jazz/Blues'</span>,
        <span style="color: #008000; text-decoration-color: #008000">'Pop'</span>,
        <span style="color: #008000; text-decoration-color: #008000">'R&amp;B/Soul'</span>,
        <span style="color: #008000; text-decoration-color: #008000">'Reggae'</span>,
        <span style="color: #008000; text-decoration-color: #008000">'Rock'</span>
    <span style="font-weight: bold">]</span>,
    <span style="font-weight: bold">[</span><span style="color: #008000; text-decoration-color: #008000">'business'</span>, <span style="color: #008000; text-decoration-color: #008000">'entertainment'</span>, <span style="color: #008000; text-decoration-color: #008000">'sports'</span><span style="font-weight: bold">]</span>,
    <span style="font-weight: bold">[</span><span style="color: #008000; text-decoration-color: #008000">'_silence_'</span>, <span style="color: #008000; text-decoration-color: #008000">'_unknown_'</span>, <span style="color: #008000; text-decoration-color: #008000">'down'</span>, <span style="color: #008000; text-decoration-color: #008000">'go'</span>, <span style="color: #008000; text-decoration-color: #008000">'left'</span>, <span style="color: #008000; text-decoration-color: #008000">'no'</span>, <span style="color: #008000; text-decoration-color: #008000">'off'</span>, <span style="color: #008000; text-decoration-color: #008000">'on'</span>, <span style="color: #008000; text-decoration-color: #008000">'right'</span>, <span style="color: #008000; text-decoration-color: #008000">'stop'</span>, <span style="color: #008000; text-decoration-color: #008000">'up'</span>, <span style="color: #008000; text-decoration-color: #008000">'yes'</span><span style="font-weight: bold">]</span>,
    <span style="font-weight: bold">[</span><span style="color: #008000; text-decoration-color: #008000">'angry'</span>, <span style="color: #008000; text-decoration-color: #008000">'happy'</span>, <span style="color: #008000; text-decoration-color: #008000">'others'</span>, <span style="color: #008000; text-decoration-color: #008000">'sad'</span><span style="font-weight: bold">]</span>,
    <span style="font-weight: bold">[</span><span style="color: #008000; text-decoration-color: #008000">'Feeling'</span>, <span style="color: #008000; text-decoration-color: #008000">'Thinking'</span><span style="font-weight: bold">]</span>,
    <span style="font-weight: bold">[</span>
        <span style="color: #008000; text-decoration-color: #008000">'am_thuc'</span>,
        <span style="color: #008000; text-decoration-color: #008000">'bong_da'</span>,
        <span style="color: #008000; text-decoration-color: #008000">'cho_thue'</span>,
        <span style="color: #008000; text-decoration-color: #008000">'doi_song'</span>,
        <span style="color: #008000; text-decoration-color: #008000">'dong_vat'</span>,
        <span style="color: #008000; text-decoration-color: #008000">'mua_ban'</span>,
        <span style="color: #008000; text-decoration-color: #008000">'nhac'</span>,
        <span style="color: #008000; text-decoration-color: #008000">'phim'</span>,
        <span style="color: #008000; text-decoration-color: #008000">'phu_kien'</span>,
        <span style="color: #008000; text-decoration-color: #008000">'sach'</span>,
        <span style="color: #008000; text-decoration-color: #008000">'showbiz'</span>,
        <span style="color: #008000; text-decoration-color: #008000">'the_thao'</span>,
        <span style="color: #008000; text-decoration-color: #008000">'thoi_trang_nam'</span>,
        <span style="color: #008000; text-decoration-color: #008000">'thoi_trang_nu'</span>,
        <span style="color: #008000; text-decoration-color: #008000">'thuc_vat'</span>,
        <span style="color: #008000; text-decoration-color: #008000">'tin_bds'</span>,
        <span style="color: #008000; text-decoration-color: #008000">'tin_tuc'</span>,
        <span style="color: #008000; text-decoration-color: #008000">'tri_thuc'</span>
    <span style="font-weight: bold">]</span>,
    <span style="font-weight: bold">[</span><span style="color: #008000; text-decoration-color: #008000">'intimacy'</span><span style="font-weight: bold">]</span>
<span style="font-weight: bold">]</span>
</pre>
</div>
</div>
<p>We can see that we get back labels related to music genre: <code>['Dance', 'Heavy Metal', 'Hip Hop', 'Indie', 'Pop', 'Rock']</code>, for our first four results. After that, we get back <code>['business', 'entertainment', 'sports'],</code> which might not be too far off what we want if we searched for music.</p>
<p>How about another search term</p>
<div id="3tkDMxscsoyM" class="cell" data-execution_count="76">
<div class="sourceCode cell-code" id="cb94" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb94-1">q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.encode(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hateful"</span>)</span></code></pre></div>
</div>
<div id="50HBtBwsAjTt" class="cell" data-execution_count="77">
<div class="sourceCode cell-code" id="cb95" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb95-1">scores, retrieved_examples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ds_with_embeddings.get_nearest_examples(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label_embedding'</span>, q, k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span></code></pre></div>
</div>
<div id="43ZxmgcaAjQS" class="cell" data-outputid="4e46f49a-cf5a-4b5f-92f8-7a03e88fd653" data-execution_count="78">
<div class="sourceCode cell-code" id="cb96" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb96-1">retrieved_examples[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>][:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>]</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="font-weight: bold">[</span>
    <span style="font-weight: bold">[</span><span style="color: #008000; text-decoration-color: #008000">'Hateful'</span>, <span style="color: #008000; text-decoration-color: #008000">'Not hateful'</span><span style="font-weight: bold">]</span>,
    <span style="font-weight: bold">[</span><span style="color: #008000; text-decoration-color: #008000">'Hateful'</span>, <span style="color: #008000; text-decoration-color: #008000">'Not hateful'</span><span style="font-weight: bold">]</span>,
    <span style="font-weight: bold">[</span><span style="color: #008000; text-decoration-color: #008000">'hateful'</span>, <span style="color: #008000; text-decoration-color: #008000">'non-hateful'</span><span style="font-weight: bold">]</span>,
    <span style="font-weight: bold">[</span><span style="color: #008000; text-decoration-color: #008000">'hateful'</span>, <span style="color: #008000; text-decoration-color: #008000">'non-hateful'</span><span style="font-weight: bold">]</span>,
    <span style="font-weight: bold">[</span><span style="color: #008000; text-decoration-color: #008000">'hateful'</span>, <span style="color: #008000; text-decoration-color: #008000">'non-hateful'</span><span style="font-weight: bold">]</span>,
    <span style="font-weight: bold">[</span><span style="color: #008000; text-decoration-color: #008000">'HATE'</span>, <span style="color: #008000; text-decoration-color: #008000">'NOT_HATE'</span><span style="font-weight: bold">]</span>,
    <span style="font-weight: bold">[</span><span style="color: #008000; text-decoration-color: #008000">'NON_HATE'</span>, <span style="color: #008000; text-decoration-color: #008000">'HATE'</span><span style="font-weight: bold">]</span>,
    <span style="font-weight: bold">[</span><span style="color: #008000; text-decoration-color: #008000">'NON_HATE'</span>, <span style="color: #008000; text-decoration-color: #008000">'HATE'</span><span style="font-weight: bold">]</span>,
    <span style="font-weight: bold">[</span><span style="color: #008000; text-decoration-color: #008000">'NON_HATE'</span>, <span style="color: #008000; text-decoration-color: #008000">'HATE'</span><span style="font-weight: bold">]</span>,
    <span style="font-weight: bold">[</span><span style="color: #008000; text-decoration-color: #008000">'NON_HATE'</span>, <span style="color: #008000; text-decoration-color: #008000">'HATE'</span><span style="font-weight: bold">]</span>
<span style="font-weight: bold">]</span>
</pre>
</div>
</div>
<p>Again here we have something quite close to what we‚Äôd get with string matching, but we have a bit more flexibility in how we spell/define our labels which might help surface more possible results.</p>
<p>We‚Äôll try a bunch more things‚Ä¶</p>
<div id="wI_zeRh0A3MH" class="cell" data-execution_count="79">
<div class="sourceCode cell-code" id="cb97" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb97-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> query_labels(query:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>):</span>
<span id="cb97-2">    q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.encode(query)</span>
<span id="cb97-3">    scores, retrieved_examples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ds_with_embeddings.get_nearest_examples(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label_embedding'</span>, q, k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb97-4">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"results for: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>query<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb97-5">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(retrieved_examples[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>][:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>],retrieved_examples[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'modelId'</span>][:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>])))</span></code></pre></div>
</div>
<div id="pe6MTppxBRbQ" class="cell" data-outputid="73ede30f-0a47-475f-b0e9-ba2c199f026e" data-execution_count="80">
<div class="sourceCode cell-code" id="cb98" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb98-1">query_labels(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"politics"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace">results for: politics
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="font-weight: bold">[</span>
    <span style="font-weight: bold">([</span><span style="color: #008000; text-decoration-color: #008000">'Democrat'</span>, <span style="color: #008000; text-decoration-color: #008000">'Republican'</span><span style="font-weight: bold">]</span>, <span style="color: #008000; text-decoration-color: #008000">'m-newhauser/distilbert-political-tweets'</span><span style="font-weight: bold">)</span>,
    <span style="font-weight: bold">([</span><span style="color: #008000; text-decoration-color: #008000">'Geopolitical'</span>, <span style="color: #008000; text-decoration-color: #008000">'Personal'</span>, <span style="color: #008000; text-decoration-color: #008000">'Political'</span>, <span style="color: #008000; text-decoration-color: #008000">'Religious'</span><span style="font-weight: bold">]</span>, <span style="color: #008000; text-decoration-color: #008000">'dee4hf/autotrain-deephate2-1093539673'</span><span style="font-weight: bold">)</span>,
    <span style="font-weight: bold">([</span><span style="color: #008000; text-decoration-color: #008000">'None'</span>, <span style="color: #008000; text-decoration-color: #008000">'Environmental'</span>, <span style="color: #008000; text-decoration-color: #008000">'Social'</span>, <span style="color: #008000; text-decoration-color: #008000">'Governance'</span><span style="font-weight: bold">]</span>, <span style="color: #008000; text-decoration-color: #008000">'yiyanghkust/finbert-esg'</span><span style="font-weight: bold">)</span>,
    <span style="font-weight: bold">([</span><span style="color: #008000; text-decoration-color: #008000">'business'</span>, <span style="color: #008000; text-decoration-color: #008000">'entertainment'</span>, <span style="color: #008000; text-decoration-color: #008000">'sports'</span><span style="font-weight: bold">]</span>, <span style="color: #008000; text-decoration-color: #008000">'bipin/malayalam-news-classifier'</span><span style="font-weight: bold">)</span>,
    <span style="font-weight: bold">(</span>
        <span style="font-weight: bold">[</span><span style="color: #008000; text-decoration-color: #008000">'CRIME'</span>, <span style="color: #008000; text-decoration-color: #008000">'ENTERTAINMENT'</span>, <span style="color: #008000; text-decoration-color: #008000">'Finance'</span>, <span style="color: #008000; text-decoration-color: #008000">'POLITICS'</span>, <span style="color: #008000; text-decoration-color: #008000">'SPORTS'</span>, <span style="color: #008000; text-decoration-color: #008000">'Terrorism'</span><span style="font-weight: bold">]</span>,
        <span style="color: #008000; text-decoration-color: #008000">'Yarn007/autotrain-Napkin-872827783'</span>
    <span style="font-weight: bold">)</span>,
    <span style="font-weight: bold">([</span><span style="color: #008000; text-decoration-color: #008000">'business'</span>, <span style="color: #008000; text-decoration-color: #008000">'entertainment'</span>, <span style="color: #008000; text-decoration-color: #008000">'politics'</span>, <span style="color: #008000; text-decoration-color: #008000">'sport'</span>, <span style="color: #008000; text-decoration-color: #008000">'tech'</span><span style="font-weight: bold">]</span>, <span style="color: #008000; text-decoration-color: #008000">'abhishek/autonlp-bbc-roberta-37249301'</span><span style="font-weight: bold">)</span>,
    <span style="font-weight: bold">(</span>
        <span style="font-weight: bold">[</span><span style="color: #008000; text-decoration-color: #008000">'business'</span>, <span style="color: #008000; text-decoration-color: #008000">'entertainment'</span>, <span style="color: #008000; text-decoration-color: #008000">'politics'</span>, <span style="color: #008000; text-decoration-color: #008000">'sport'</span>, <span style="color: #008000; text-decoration-color: #008000">'tech'</span><span style="font-weight: bold">]</span>,
        <span style="color: #008000; text-decoration-color: #008000">'abhishek/autonlp-bbc-news-classification-37229289'</span>
    <span style="font-weight: bold">)</span>,
    <span style="font-weight: bold">([</span><span style="color: #008000; text-decoration-color: #008000">'business'</span>, <span style="color: #008000; text-decoration-color: #008000">'entertainment'</span>, <span style="color: #008000; text-decoration-color: #008000">'politics'</span>, <span style="color: #008000; text-decoration-color: #008000">'sport'</span>, <span style="color: #008000; text-decoration-color: #008000">'tech'</span><span style="font-weight: bold">]</span>, <span style="color: #008000; text-decoration-color: #008000">'Yarn/autotrain-Traimn-853827191'</span><span style="font-weight: bold">)</span>,
    <span style="font-weight: bold">([</span><span style="color: #008000; text-decoration-color: #008000">'Neutral'</span>, <span style="color: #008000; text-decoration-color: #008000">'Propaganda'</span><span style="font-weight: bold">]</span>, <span style="color: #008000; text-decoration-color: #008000">'Real29/my-model-proppy'</span><span style="font-weight: bold">)</span>,
    <span style="font-weight: bold">([</span><span style="color: #008000; text-decoration-color: #008000">'Neutral'</span>, <span style="color: #008000; text-decoration-color: #008000">'Propaganda'</span><span style="font-weight: bold">]</span>, <span style="color: #008000; text-decoration-color: #008000">'Real29/my-model-ptc'</span><span style="font-weight: bold">)</span>
<span style="font-weight: bold">]</span>
</pre>
</div>
</div>
<div id="SV6J6sfAAjNa" class="cell" data-outputid="cec2cd7a-23c1-4ac8-bce2-e96dc2e9bc63" data-execution_count="84">
<div class="sourceCode cell-code" id="cb99" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb99-1">query_labels(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fiction, non_fiction"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace">results for: fiction, non_fiction
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="font-weight: bold">[</span>
    <span style="font-weight: bold">(</span>
        <span style="font-weight: bold">[</span><span style="color: #008000; text-decoration-color: #008000">'action'</span>, <span style="color: #008000; text-decoration-color: #008000">'drama'</span>, <span style="color: #008000; text-decoration-color: #008000">'horror'</span>, <span style="color: #008000; text-decoration-color: #008000">'sci_fi'</span>, <span style="color: #008000; text-decoration-color: #008000">'superhero'</span>, <span style="color: #008000; text-decoration-color: #008000">'thriller'</span><span style="font-weight: bold">]</span>,
        <span style="color: #008000; text-decoration-color: #008000">'Tejas3/distillbert_110_uncased_movie_genre'</span>
    <span style="font-weight: bold">)</span>,
    <span style="font-weight: bold">([</span><span style="color: #008000; text-decoration-color: #008000">'action'</span>, <span style="color: #008000; text-decoration-color: #008000">'drama'</span>, <span style="color: #008000; text-decoration-color: #008000">'horror'</span>, <span style="color: #008000; text-decoration-color: #008000">'sci_fi'</span>, <span style="color: #008000; text-decoration-color: #008000">'superhero'</span>, <span style="color: #008000; text-decoration-color: #008000">'thriller'</span><span style="font-weight: bold">]</span>, <span style="color: #008000; text-decoration-color: #008000">'Tejas3/distillbert_110_uncased_v1'</span><span style="font-weight: bold">)</span>,
    <span style="font-weight: bold">(</span>
        <span style="font-weight: bold">[</span><span style="color: #008000; text-decoration-color: #008000">'action'</span>, <span style="color: #008000; text-decoration-color: #008000">'animation'</span>, <span style="color: #008000; text-decoration-color: #008000">'comedy'</span>, <span style="color: #008000; text-decoration-color: #008000">'drama'</span>, <span style="color: #008000; text-decoration-color: #008000">'romance'</span>, <span style="color: #008000; text-decoration-color: #008000">'thriller'</span><span style="font-weight: bold">]</span>,
        <span style="color: #008000; text-decoration-color: #008000">'langfab/distilbert-base-uncased-finetuned-movie-genre'</span>
    <span style="font-weight: bold">)</span>,
    <span style="font-weight: bold">([</span><span style="color: #008000; text-decoration-color: #008000">'HATE'</span>, <span style="color: #008000; text-decoration-color: #008000">'NON_HATE'</span><span style="font-weight: bold">]</span>, <span style="color: #008000; text-decoration-color: #008000">'anthonny/dehatebert-mono-spanish-finetuned-sentiments_reviews_politicos'</span><span style="font-weight: bold">)</span>,
    <span style="font-weight: bold">([</span><span style="color: #008000; text-decoration-color: #008000">'NON_HATE'</span>, <span style="color: #008000; text-decoration-color: #008000">'HATE'</span><span style="font-weight: bold">]</span>, <span style="color: #008000; text-decoration-color: #008000">'Hate-speech-CNERG/dehatebert-mono-english'</span><span style="font-weight: bold">)</span>,
    <span style="font-weight: bold">([</span><span style="color: #008000; text-decoration-color: #008000">'NON_HATE'</span>, <span style="color: #008000; text-decoration-color: #008000">'HATE'</span><span style="font-weight: bold">]</span>, <span style="color: #008000; text-decoration-color: #008000">'Hate-speech-CNERG/dehatebert-mono-german'</span><span style="font-weight: bold">)</span>,
    <span style="font-weight: bold">([</span><span style="color: #008000; text-decoration-color: #008000">'NON_HATE'</span>, <span style="color: #008000; text-decoration-color: #008000">'HATE'</span><span style="font-weight: bold">]</span>, <span style="color: #008000; text-decoration-color: #008000">'Hate-speech-CNERG/dehatebert-mono-italian'</span><span style="font-weight: bold">)</span>,
    <span style="font-weight: bold">([</span><span style="color: #008000; text-decoration-color: #008000">'NON_HATE'</span>, <span style="color: #008000; text-decoration-color: #008000">'HATE'</span><span style="font-weight: bold">]</span>, <span style="color: #008000; text-decoration-color: #008000">'Hate-speech-CNERG/dehatebert-mono-spanish'</span><span style="font-weight: bold">)</span>,
    <span style="font-weight: bold">([</span><span style="color: #008000; text-decoration-color: #008000">'NON_HATE'</span>, <span style="color: #008000; text-decoration-color: #008000">'HATE'</span><span style="font-weight: bold">]</span>, <span style="color: #008000; text-decoration-color: #008000">'Hate-speech-CNERG/dehatebert-mono-portugese'</span><span style="font-weight: bold">)</span>,
    <span style="font-weight: bold">([</span><span style="color: #008000; text-decoration-color: #008000">'NON_HATE'</span>, <span style="color: #008000; text-decoration-color: #008000">'HATE'</span><span style="font-weight: bold">]</span>, <span style="color: #008000; text-decoration-color: #008000">'Hate-speech-CNERG/dehatebert-mono-polish'</span><span style="font-weight: bold">)</span>
<span style="font-weight: bold">]</span>
</pre>
</div>
</div>
<p>Let‚Äôs try the set of emotions one should feel everyday.</p>
<div id="8yt9dZW37ytf" class="cell" data-outputid="3da160ce-e88b-4f69-8148-6185c81734cc" data-execution_count="87">
<div class="sourceCode cell-code" id="cb100" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb100-1">query_labels(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"worry, disgust, anxiety, fear"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace">results for: worry, disgust, anxiety, fear
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="font-weight: bold">[</span>
    <span style="font-weight: bold">([</span><span style="color: #008000; text-decoration-color: #008000">'anger'</span>, <span style="color: #008000; text-decoration-color: #008000">'disgust'</span>, <span style="color: #008000; text-decoration-color: #008000">'fear'</span>, <span style="color: #008000; text-decoration-color: #008000">'guilt'</span>, <span style="color: #008000; text-decoration-color: #008000">'joy'</span>, <span style="color: #008000; text-decoration-color: #008000">'sadness'</span>, <span style="color: #008000; text-decoration-color: #008000">'shame'</span><span style="font-weight: bold">]</span>, <span style="color: #008000; text-decoration-color: #008000">'crcb/isear_bert'</span><span style="font-weight: bold">)</span>,
    <span style="font-weight: bold">(</span>
        <span style="font-weight: bold">[</span><span style="color: #008000; text-decoration-color: #008000">'anger'</span>, <span style="color: #008000; text-decoration-color: #008000">'disgust'</span>, <span style="color: #008000; text-decoration-color: #008000">'fear'</span>, <span style="color: #008000; text-decoration-color: #008000">'joy'</span>, <span style="color: #008000; text-decoration-color: #008000">'others'</span>, <span style="color: #008000; text-decoration-color: #008000">'sadness'</span>, <span style="color: #008000; text-decoration-color: #008000">'surprise'</span><span style="font-weight: bold">]</span>,
        <span style="color: #008000; text-decoration-color: #008000">'pysentimiento/robertuito-emotion-analysis'</span>
    <span style="font-weight: bold">)</span>,
    <span style="font-weight: bold">(</span>
        <span style="font-weight: bold">[</span><span style="color: #008000; text-decoration-color: #008000">'anger'</span>, <span style="color: #008000; text-decoration-color: #008000">'disgust'</span>, <span style="color: #008000; text-decoration-color: #008000">'fear'</span>, <span style="color: #008000; text-decoration-color: #008000">'joy'</span>, <span style="color: #008000; text-decoration-color: #008000">'others'</span>, <span style="color: #008000; text-decoration-color: #008000">'sadness'</span>, <span style="color: #008000; text-decoration-color: #008000">'surprise'</span><span style="font-weight: bold">]</span>,
        <span style="color: #008000; text-decoration-color: #008000">'daveni/twitter-xlm-roberta-emotion-es'</span>
    <span style="font-weight: bold">)</span>,
    <span style="font-weight: bold">(</span>
        <span style="font-weight: bold">[</span><span style="color: #008000; text-decoration-color: #008000">'anger'</span>, <span style="color: #008000; text-decoration-color: #008000">'disgust'</span>, <span style="color: #008000; text-decoration-color: #008000">'fear'</span>, <span style="color: #008000; text-decoration-color: #008000">'joy'</span>, <span style="color: #008000; text-decoration-color: #008000">'others'</span>, <span style="color: #008000; text-decoration-color: #008000">'sadness'</span>, <span style="color: #008000; text-decoration-color: #008000">'surprise'</span><span style="font-weight: bold">]</span>,
        <span style="color: #008000; text-decoration-color: #008000">'finiteautomata/beto-emotion-analysis'</span>
    <span style="font-weight: bold">)</span>,
    <span style="font-weight: bold">(</span>
        <span style="font-weight: bold">[</span><span style="color: #008000; text-decoration-color: #008000">'anger'</span>, <span style="color: #008000; text-decoration-color: #008000">'disgust'</span>, <span style="color: #008000; text-decoration-color: #008000">'fear'</span>, <span style="color: #008000; text-decoration-color: #008000">'joy'</span>, <span style="color: #008000; text-decoration-color: #008000">'others'</span>, <span style="color: #008000; text-decoration-color: #008000">'sadness'</span>, <span style="color: #008000; text-decoration-color: #008000">'surprise'</span><span style="font-weight: bold">]</span>,
        <span style="color: #008000; text-decoration-color: #008000">'finiteautomata/bertweet-base-emotion-analysis'</span>
    <span style="font-weight: bold">)</span>,
    <span style="font-weight: bold">([</span><span style="color: #008000; text-decoration-color: #008000">'ANGER'</span>, <span style="color: #008000; text-decoration-color: #008000">'DISGUST'</span>, <span style="color: #008000; text-decoration-color: #008000">'FEAR'</span>, <span style="color: #008000; text-decoration-color: #008000">'HAPPINESS'</span>, <span style="color: #008000; text-decoration-color: #008000">'NEUTRALITY'</span>, <span style="color: #008000; text-decoration-color: #008000">'SADNESS'</span>, <span style="color: #008000; text-decoration-color: #008000">'SURPRISED'</span><span style="font-weight: bold">]</span>, <span style="color: #008000; text-decoration-color: #008000">'Gunulhona/tbecmodel'</span><span style="font-weight: bold">)</span>,
    <span style="font-weight: bold">(</span>
        <span style="font-weight: bold">[</span><span style="color: #008000; text-decoration-color: #008000">'anger'</span>, <span style="color: #008000; text-decoration-color: #008000">'anticipation'</span>, <span style="color: #008000; text-decoration-color: #008000">'disgust'</span>, <span style="color: #008000; text-decoration-color: #008000">'fear'</span>, <span style="color: #008000; text-decoration-color: #008000">'joy'</span>, <span style="color: #008000; text-decoration-color: #008000">'sadness'</span>, <span style="color: #008000; text-decoration-color: #008000">'surprise'</span>, <span style="color: #008000; text-decoration-color: #008000">'trust'</span><span style="font-weight: bold">]</span>,
        <span style="color: #008000; text-decoration-color: #008000">'Yuetian/bert-base-uncased-finetuned-plutchik-emotion'</span>
    <span style="font-weight: bold">)</span>,
    <span style="font-weight: bold">([</span><span style="color: #008000; text-decoration-color: #008000">'anger'</span>, <span style="color: #008000; text-decoration-color: #008000">'fear'</span>, <span style="color: #008000; text-decoration-color: #008000">'happy'</span>, <span style="color: #008000; text-decoration-color: #008000">'love'</span>, <span style="color: #008000; text-decoration-color: #008000">'sadness'</span><span style="font-weight: bold">]</span>, <span style="color: #008000; text-decoration-color: #008000">'jasonpratamas7/Thesis-Model-1'</span><span style="font-weight: bold">)</span>,
    <span style="font-weight: bold">([</span><span style="color: #008000; text-decoration-color: #008000">'anger'</span>, <span style="color: #008000; text-decoration-color: #008000">'fear'</span>, <span style="color: #008000; text-decoration-color: #008000">'happy'</span>, <span style="color: #008000; text-decoration-color: #008000">'love'</span>, <span style="color: #008000; text-decoration-color: #008000">'sadness'</span><span style="font-weight: bold">]</span>, <span style="color: #008000; text-decoration-color: #008000">'jasonpratamas7/Thesis-Model1'</span><span style="font-weight: bold">)</span>,
    <span style="font-weight: bold">([</span><span style="color: #008000; text-decoration-color: #008000">'anger'</span>, <span style="color: #008000; text-decoration-color: #008000">'fear'</span>, <span style="color: #008000; text-decoration-color: #008000">'happy'</span>, <span style="color: #008000; text-decoration-color: #008000">'love'</span>, <span style="color: #008000; text-decoration-color: #008000">'sadness'</span><span style="font-weight: bold">]</span>, <span style="color: #008000; text-decoration-color: #008000">'StevenLimcorn/indonesian-roberta-base-emotion-classifier'</span><span style="font-weight: bold">)</span>
<span style="font-weight: bold">]</span>
</pre>
</div>
</div>
<p>This example of searching for a set of labels might be a better approach in general since the query will better match the format of the intitial search.</p>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>It seems like there is some merit in exploring some of these ideas further. There are a lot of improvements that could be made: - how the embeddings are created - removing some ‚Äònoise‚Äô from the README, for example, by first parsing the Markdown - improving how the embeddings are created for the labels - combining the embeddings in some way either upfront or when queryig - a bunch of other things‚Ä¶</p>
<p>If I find some spare time, I plan to dig into these topics a bit further. This is also a nice excuse to play with one of the new open source embedding databases that have popped up in the last couple of years.</p>


</section>

 ]]></description>
  <guid>https://danielvanstrien.xyz/posts/post-with-code/semantic-model-search/2022-07-26-semantic-search-ml-models.html</guid>
  <pubDate>Tue, 26 Jul 2022 00:00:00 GMT</pubDate>
  <media:content url="https://github.com/davanstrien/blog/blob/master/images/hub_model_search.webp?raw=true" medium="image"/>
</item>
<item>
  <title>Combining Hugging Face datasets with dask</title>
  <dc:creator>Daniel van Strien</dc:creator>
  <link>https://danielvanstrien.xyz/posts/post-with-code/dask/2022-06-20-dask-and-datasets.html</link>
  <description><![CDATA[ 




<p>Hugging Face datasets is a super useful library for loading, processing and sharing datasets with other people.</p>
<p>For many pre-processing steps it works beautifully. The one area where it can be a bit trickier to use is for EDA style analysis. This column-wise EDA is often important as an early step in working with some data or for preparing a data card.</p>
<p>Fortunately combining datasets and another data library, <a href="https://www.dask.org/">dask</a> works pretty smoothly. This isn‚Äôt intended to be a full intro to either datasets or dask but hopefully gives you a sense of how both libaries work and how they can complement each other.</p>
<p>First, make sure we have the required libraries. <a href="https://rich.readthedocs.io/en/stable/">Rich</a> is there for a little added visual flair ‚ú®</p>
<div id="cell-3" class="cell" data-execution_count="53">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span>capture</span>
<span id="cb1-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>pip install datasets toolz rich[jupyter] dask</span></code></pre></div>
</div>
<div id="cell-4" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>load_ext rich</span></code></pre></div>
</div>
<section id="load-some-data" class="level2">
<h2 class="anchored" data-anchor-id="load-some-data">Load some data</h2>
<p>For this example we will use a the <a href="https://huggingface.co/datasets/blbooksgenre">blbooksgenre dataset</a> that contains metadata about some digitised books from the British Library. This collection also includes some annotations for the genre of the book which we could use to train a machine learning model.</p>
<p>We can load a dataset hosted on the Hugging Face hub by using the <code>load_dataset</code> function.</p>
<div id="cell-7" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> datasets <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> load_dataset</span></code></pre></div>
</div>
<div id="cell-8" class="cell" data-outputid="1b619316-4f2d-4f07-862b-08747f6a715e" data-execution_count="3">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">ds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> load_dataset(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blbooksgenre"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"annotated_raw"</span>, split<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"train"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Reusing dataset bl_books_genre (/Users/dvanstrien/.cache/huggingface/datasets/bl_books_genre/annotated_raw/1.1.0/1e01f82403b3d9344121c3b81e5ad7c130338b250bf95dad4c6ab342c642dbe8)</code></pre>
</div>
</div>
<p>Since we requested only the train split we get back a <code>Dataset</code></p>
<div id="cell-10" class="cell" data-outputid="d7e74115-796c-4acd-9f15-aae838cffdee" data-execution_count="57">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">ds</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #800080; text-decoration-color: #800080; font-weight: bold">Dataset</span><span style="font-weight: bold">({</span>
    features: <span style="font-weight: bold">[</span><span style="color: #008000; text-decoration-color: #008000">'BL record ID'</span>, <span style="color: #008000; text-decoration-color: #008000">'Name'</span>, <span style="color: #008000; text-decoration-color: #008000">'Dates associated with name'</span>, <span style="color: #008000; text-decoration-color: #008000">'Type of name'</span>, <span style="color: #008000; text-decoration-color: #008000">'Role'</span>, <span style="color: #008000; text-decoration-color: #008000">'All names'</span>, <span style="color: #008000; text-decoration-color: #008000">'Title'</span>, <span style="color: #008000; text-decoration-color: #008000">'Variant titles'</span>, <span style="color: #008000; text-decoration-color: #008000">'Series title'</span>, <span style="color: #008000; text-decoration-color: #008000">'Number within series'</span>, <span style="color: #008000; text-decoration-color: #008000">'Country of publication'</span>, <span style="color: #008000; text-decoration-color: #008000">'Place of publication'</span>, <span style="color: #008000; text-decoration-color: #008000">'Publisher'</span>, <span style="color: #008000; text-decoration-color: #008000">'Date of publication'</span>, <span style="color: #008000; text-decoration-color: #008000">'Edition'</span>, <span style="color: #008000; text-decoration-color: #008000">'Physical description'</span>, <span style="color: #008000; text-decoration-color: #008000">'Dewey classification'</span>, <span style="color: #008000; text-decoration-color: #008000">'BL shelfmark'</span>, <span style="color: #008000; text-decoration-color: #008000">'Topics'</span>, <span style="color: #008000; text-decoration-color: #008000">'Genre'</span>, <span style="color: #008000; text-decoration-color: #008000">'Languages'</span>, <span style="color: #008000; text-decoration-color: #008000">'Notes'</span>, <span style="color: #008000; text-decoration-color: #008000">'BL record ID for physical resource'</span>, <span style="color: #008000; text-decoration-color: #008000">'classification_id'</span>, <span style="color: #008000; text-decoration-color: #008000">'user_id'</span>, <span style="color: #008000; text-decoration-color: #008000">'subject_ids'</span>, <span style="color: #008000; text-decoration-color: #008000">'annotator_date_pub'</span>, <span style="color: #008000; text-decoration-color: #008000">'annotator_normalised_date_pub'</span>, <span style="color: #008000; text-decoration-color: #008000">'annotator_edition_statement'</span>, <span style="color: #008000; text-decoration-color: #008000">'annotator_FAST_genre_terms'</span>, <span style="color: #008000; text-decoration-color: #008000">'annotator_FAST_subject_terms'</span>, <span style="color: #008000; text-decoration-color: #008000">'annotator_comments'</span>, <span style="color: #008000; text-decoration-color: #008000">'annotator_main_language'</span>, <span style="color: #008000; text-decoration-color: #008000">'annotator_other_languages_summaries'</span>, <span style="color: #008000; text-decoration-color: #008000">'annotator_summaries_language'</span>, <span style="color: #008000; text-decoration-color: #008000">'annotator_translation'</span>, <span style="color: #008000; text-decoration-color: #008000">'annotator_original_language'</span>, <span style="color: #008000; text-decoration-color: #008000">'annotator_publisher'</span>, <span style="color: #008000; text-decoration-color: #008000">'annotator_place_pub'</span>, <span style="color: #008000; text-decoration-color: #008000">'annotator_country'</span>, <span style="color: #008000; text-decoration-color: #008000">'annotator_title'</span>, <span style="color: #008000; text-decoration-color: #008000">'Link to digitised book'</span>, <span style="color: #008000; text-decoration-color: #008000">'annotated'</span>, <span style="color: #008000; text-decoration-color: #008000">'Type of resource'</span>, <span style="color: #008000; text-decoration-color: #008000">'created_at'</span>, <span style="color: #008000; text-decoration-color: #008000">'annotator_genre'</span><span style="font-weight: bold">]</span>,
    num_rows: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">4398</span>
<span style="font-weight: bold">})</span>
</pre>
</div>
</div>
<p>We can see this has a bunch of columns. One that is of interest is the <code>Data of publication</code> column. Since we could use this dataset to train some type of classifier we may want to check whether we have enough examples across different time periods in the dataset.</p>
<div id="cell-12" class="cell" data-outputid="6927a531-4649-4ec8-b40e-0d467f735a8d" data-execution_count="58">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">ds[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Date of publication"</span>]</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #008000; text-decoration-color: #008000">'1879'</span>
</pre>
</div>
</div>
<section id="using-toolz-to-calculate-frequencies-for-a-column" class="level3">
<h3 class="anchored" data-anchor-id="using-toolz-to-calculate-frequencies-for-a-column">Using toolz to calculate frequencies for a column</h3>
<p>One quick way we can get the frequency count for a column is using the wonderful <a href="https://toolz.readthedocs.io/en/latest/index.html">toolz</a> library</p>
<p>If our data fits in memory, we can simply pass in a column containing a categorical value to a frequency function to get a frequency count.</p>
<div id="cell-15" class="cell" data-execution_count="60">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> toolz <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> frequencies, topk</span></code></pre></div>
</div>
<div id="cell-16" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">dates <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ds[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Date of publication"</span>]</span></code></pre></div>
</div>
<div id="cell-17" class="cell" data-outputid="9d4e5792-30e1-4279-9534-4574a39d321b" data-execution_count="97">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># collapse_hide</span></span>
<span id="cb10-2"></span>
<span id="cb10-3">frequencies(dates)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="font-weight: bold">{</span>
    <span style="color: #008000; text-decoration-color: #008000">'1879'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">99</span>,
    <span style="color: #008000; text-decoration-color: #008000">'1774'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">5</span>,
    <span style="color: #008000; text-decoration-color: #008000">'1765'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">5</span>,
    <span style="color: #008000; text-decoration-color: #008000">'1877'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">69</span>,
    <span style="color: #008000; text-decoration-color: #008000">'1893'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">222</span>,
    <span style="color: #008000; text-decoration-color: #008000">'1891'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">148</span>,
    <span style="color: #008000; text-decoration-color: #008000">'1827'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">29</span>,
    <span style="color: #008000; text-decoration-color: #008000">'1868'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">42</span>,
    <span style="color: #008000; text-decoration-color: #008000">'1878'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">72</span>,
    <span style="color: #008000; text-decoration-color: #008000">'1895'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">189</span>,
    <span style="color: #008000; text-decoration-color: #008000">'1897'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">120</span>,
    <span style="color: #008000; text-decoration-color: #008000">'1899'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">104</span>,
    <span style="color: #008000; text-decoration-color: #008000">'1896'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">174</span>,
    <span style="color: #008000; text-decoration-color: #008000">'1876'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">48</span>,
    <span style="color: #008000; text-decoration-color: #008000">'1812'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">13</span>,
    <span style="color: #008000; text-decoration-color: #008000">'1799'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">8</span>,
    <span style="color: #008000; text-decoration-color: #008000">'1830'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">32</span>,
    <span style="color: #008000; text-decoration-color: #008000">'1870'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">42</span>,
    <span style="color: #008000; text-decoration-color: #008000">'1894'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">155</span>,
    <span style="color: #008000; text-decoration-color: #008000">'1864'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">28</span>,
    <span style="color: #008000; text-decoration-color: #008000">'1855'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">42</span>,
    <span style="color: #008000; text-decoration-color: #008000">'1871'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">42</span>,
    <span style="color: #008000; text-decoration-color: #008000">'1836'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">37</span>,
    <span style="color: #008000; text-decoration-color: #008000">'1883'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">51</span>,
    <span style="color: #008000; text-decoration-color: #008000">'1880'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">111</span>,
    <span style="color: #008000; text-decoration-color: #008000">'1884'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">69</span>,
    <span style="color: #008000; text-decoration-color: #008000">'1822'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">16</span>,
    <span style="color: #008000; text-decoration-color: #008000">'1856'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">38</span>,
    <span style="color: #008000; text-decoration-color: #008000">'1872'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">42</span>,
    <span style="color: #008000; text-decoration-color: #008000">'1875'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">57</span>,
    <span style="color: #008000; text-decoration-color: #008000">'1844'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">35</span>,
    <span style="color: #008000; text-decoration-color: #008000">'1890'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">134</span>,
    <span style="color: #008000; text-decoration-color: #008000">'1886'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">43</span>,
    <span style="color: #008000; text-decoration-color: #008000">'1840'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">15</span>,
    <span style="color: #008000; text-decoration-color: #008000">'1888'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">109</span>,
    <span style="color: #008000; text-decoration-color: #008000">'1858'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">43</span>,
    <span style="color: #008000; text-decoration-color: #008000">'1867'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">53</span>,
    <span style="color: #008000; text-decoration-color: #008000">'1826'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">24</span>,
    <span style="color: #008000; text-decoration-color: #008000">'1800'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">3</span>,
    <span style="color: #008000; text-decoration-color: #008000">'1851'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">43</span>,
    <span style="color: #008000; text-decoration-color: #008000">'1838'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">14</span>,
    <span style="color: #008000; text-decoration-color: #008000">'1824'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">20</span>,
    <span style="color: #008000; text-decoration-color: #008000">'1887'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">58</span>,
    <span style="color: #008000; text-decoration-color: #008000">'1874'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">42</span>,
    <span style="color: #008000; text-decoration-color: #008000">'1857'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">44</span>,
    <span style="color: #008000; text-decoration-color: #008000">'1873'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">34</span>,
    <span style="color: #008000; text-decoration-color: #008000">'1837'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">16</span>,
    <span style="color: #008000; text-decoration-color: #008000">'1846'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">32</span>,
    <span style="color: #008000; text-decoration-color: #008000">'1881'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">55</span>,
    <span style="color: #008000; text-decoration-color: #008000">'1898'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">104</span>,
    <span style="color: #008000; text-decoration-color: #008000">'1906'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">4</span>,
    <span style="color: #008000; text-decoration-color: #008000">'1892'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">134</span>,
    <span style="color: #008000; text-decoration-color: #008000">'1869'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">25</span>,
    <span style="color: #008000; text-decoration-color: #008000">'1885'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">69</span>,
    <span style="color: #008000; text-decoration-color: #008000">'1882'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">71</span>,
    <span style="color: #008000; text-decoration-color: #008000">'1863'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">55</span>,
    <span style="color: #008000; text-decoration-color: #008000">'1865'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">53</span>,
    <span style="color: #008000; text-decoration-color: #008000">'1635'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">3</span>,
    <span style="color: #008000; text-decoration-color: #008000">'1859'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">39</span>,
    <span style="color: #008000; text-decoration-color: #008000">'1818'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">17</span>,
    <span style="color: #008000; text-decoration-color: #008000">'1845'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">28</span>,
    <span style="color: #008000; text-decoration-color: #008000">'1852'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">43</span>,
    <span style="color: #008000; text-decoration-color: #008000">'1841'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">23</span>,
    <span style="color: #008000; text-decoration-color: #008000">'1842'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">29</span>,
    <span style="color: #008000; text-decoration-color: #008000">'1848'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">28</span>,
    <span style="color: #008000; text-decoration-color: #008000">'1828'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">23</span>,
    <span style="color: #008000; text-decoration-color: #008000">'1850'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">38</span>,
    <span style="color: #008000; text-decoration-color: #008000">'1860'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">45</span>,
    <span style="color: #008000; text-decoration-color: #008000">'1889'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">140</span>,
    <span style="color: #008000; text-decoration-color: #008000">'1815'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">5</span>,
    <span style="color: #008000; text-decoration-color: #008000">'1861'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">28</span>,
    <span style="color: #008000; text-decoration-color: #008000">'1814'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">13</span>,
    <span style="color: #008000; text-decoration-color: #008000">'1843'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">28</span>,
    <span style="color: #008000; text-decoration-color: #008000">'1817'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">12</span>,
    <span style="color: #008000; text-decoration-color: #008000">'1819'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">16</span>,
    <span style="color: #008000; text-decoration-color: #008000">'1853'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">34</span>,
    <span style="color: #008000; text-decoration-color: #008000">'1833'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">5</span>,
    <span style="color: #008000; text-decoration-color: #008000">'1854'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">36</span>,
    <span style="color: #008000; text-decoration-color: #008000">'1839'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">33</span>,
    <span style="color: #008000; text-decoration-color: #008000">'1803'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">7</span>,
    <span style="color: #008000; text-decoration-color: #008000">'1835'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">14</span>,
    <span style="color: #008000; text-decoration-color: #008000">'1813'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">8</span>,
    <span style="color: #008000; text-decoration-color: #008000">'1695'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">4</span>,
    <span style="color: #008000; text-decoration-color: #008000">'1809-1811'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">5</span>,
    <span style="color: #008000; text-decoration-color: #008000">'1832'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">9</span>,
    <span style="color: #008000; text-decoration-color: #008000">'1823'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">17</span>,
    <span style="color: #008000; text-decoration-color: #008000">'1847'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">28</span>,
    <span style="color: #008000; text-decoration-color: #008000">'1816'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">8</span>,
    <span style="color: #008000; text-decoration-color: #008000">'1806'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">5</span>,
    <span style="color: #008000; text-decoration-color: #008000">'1866'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">26</span>,
    <span style="color: #008000; text-decoration-color: #008000">'1829'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">13</span>,
    <span style="color: #008000; text-decoration-color: #008000">'1791'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">5</span>,
    <span style="color: #008000; text-decoration-color: #008000">'1637'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">5</span>,
    <span style="color: #008000; text-decoration-color: #008000">'1821'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">4</span>,
    <span style="color: #008000; text-decoration-color: #008000">'1807'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">14</span>,
    <span style="color: #008000; text-decoration-color: #008000">'1862'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">22</span>,
    <span style="color: #008000; text-decoration-color: #008000">'1795'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">5</span>,
    <span style="color: #008000; text-decoration-color: #008000">'1834'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">12</span>,
    <span style="color: #008000; text-decoration-color: #008000">'1831'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">10</span>,
    <span style="color: #008000; text-decoration-color: #008000">'1849'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">13</span>,
    <span style="color: #008000; text-decoration-color: #008000">'1811'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span>,
    <span style="color: #008000; text-decoration-color: #008000">'1825'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span>,
    <span style="color: #008000; text-decoration-color: #008000">'1809'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">3</span>,
    <span style="color: #008000; text-decoration-color: #008000">'1905'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span>,
    <span style="color: #008000; text-decoration-color: #008000">'1808'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span>,
    <span style="color: #008000; text-decoration-color: #008000">'1900'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">5</span>,
    <span style="color: #008000; text-decoration-color: #008000">'1892-1912'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span>,
    <span style="color: #008000; text-decoration-color: #008000">'1804'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">4</span>,
    <span style="color: #008000; text-decoration-color: #008000">'1769'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">5</span>,
    <span style="color: #008000; text-decoration-color: #008000">'1910'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span>,
    <span style="color: #008000; text-decoration-color: #008000">'1805'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">5</span>,
    <span style="color: #008000; text-decoration-color: #008000">'1802'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">3</span>,
    <span style="color: #008000; text-decoration-color: #008000">'1871-'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span>,
    <span style="color: #008000; text-decoration-color: #008000">'1901'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">5</span>,
    <span style="color: #008000; text-decoration-color: #008000">'1884-1909'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span>,
    <span style="color: #008000; text-decoration-color: #008000">'1873-1887'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span>,
    <span style="color: #008000; text-decoration-color: #008000">'1979'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span>,
    <span style="color: #008000; text-decoration-color: #008000">'1852-1941'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span>,
    <span style="color: #008000; text-decoration-color: #008000">'1903'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span>,
    <span style="color: #008000; text-decoration-color: #008000">'1871-1873'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span>,
    <span style="color: #008000; text-decoration-color: #008000">'1810'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">3</span>,
    <span style="color: #008000; text-decoration-color: #008000">'1907'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span>,
    <span style="color: #008000; text-decoration-color: #008000">'1820'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">5</span>,
    <span style="color: #008000; text-decoration-color: #008000">'1789'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">5</span>
<span style="font-weight: bold">}</span>
</pre>
</div>
</div>
</section>
</section>
<section id="make-it-parallel" class="level2">
<h2 class="anchored" data-anchor-id="make-it-parallel">Make it parallel!</h2>
<p>If our data doesn‚Äôt fit in memory or we want to do things in parallel we might want to use a slightly different approach. This is where dask can play a role.</p>
<p>Dask offers a number of different collection abstractions that make it easier to do things in parallel. This includes dask bag.</p>
<p>First we‚Äôll create a dask client here, I won‚Äôt dig into the details of this here but you can get a good overview in the <a href="https://www.dask.org/get-started">getting started</a> pages.</p>
<div id="cell-19" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> distributed <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Client</span></code></pre></div>
</div>
<div id="cell-20" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">client <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Client()</span></code></pre></div>
</div>
<p>Since we don‚Äôt want to load all of our data into memory we can great a generator that will yield one row at a time. In this case we‚Äôll start by exploring the <code>Title</code> column</p>
<div id="cell-22" class="cell" data-execution_count="63">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> yield_titles():</span>
<span id="cb13-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> row <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> ds:</span>
<span id="cb13-3">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">yield</span> row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Title"</span>]</span></code></pre></div>
</div>
<p>We can see that this returns a generator</p>
<div id="cell-24" class="cell" data-outputid="0fe3d283-19ec-4c47-e851-dca5292759c5" data-execution_count="64">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">yield_titles()</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="font-weight: bold">&lt;</span><span style="color: #ff00ff; text-decoration-color: #ff00ff; font-weight: bold">generator</span><span style="color: #000000; text-decoration-color: #000000"> object yield_titles at </span><span style="color: #008080; text-decoration-color: #008080; font-weight: bold">0x7ffc28fdc040</span><span style="font-weight: bold">&gt;</span>
</pre>
</div>
</div>
<div id="cell-25" class="cell" data-outputid="91bdfcae-1b6e-4c6b-a586-7375b00ee9bc" data-execution_count="65">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">iter</span>(yield_titles()))</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #008000; text-decoration-color: #008000">'The Canadian farmer. A missionary incident [Signed: W. J. H. Y, i.e. William J. H. Yates.]'</span>
</pre>
</div>
</div>
<p>We can store this in a titles variable.</p>
<div id="cell-27" class="cell" data-execution_count="21">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">titles <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> yield_titles()</span></code></pre></div>
</div>
<p>We‚Äôll now import dask bag.</p>
<p>import dask.bag as db</p>
<p>We can create a dask bag object using the <code>from_sequence</code> method.</p>
<div id="cell-31" class="cell" data-execution_count="69">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">bag <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> db.from_sequence(titles)</span></code></pre></div>
</div>
<div id="cell-32" class="cell" data-execution_count="70">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">bag</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace">dask.bag<span style="font-weight: bold">&lt;</span><span style="color: #ff00ff; text-decoration-color: #ff00ff; font-weight: bold">from_sequence</span><span style="color: #000000; text-decoration-color: #000000">, </span><span style="color: #808000; text-decoration-color: #808000">npartitions</span><span style="color: #000000; text-decoration-color: #000000">=</span><span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span><span style="font-weight: bold">&gt;</span>
</pre>
</div>
</div>
<p>We can look at an example using the <code>take</code> method</p>
<div id="cell-34" class="cell" data-outputid="dacee933-d4c0-4fc1-b7ce-2d4b8ce800b7" data-execution_count="68">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">bag.take(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="font-weight: bold">(</span>
    <span style="font-weight: bold">[</span>
        <span style="color: #008000; text-decoration-color: #008000">'The'</span>,
        <span style="color: #008000; text-decoration-color: #008000">'Canadian'</span>,
        <span style="color: #008000; text-decoration-color: #008000">'farmer.'</span>,
        <span style="color: #008000; text-decoration-color: #008000">'A'</span>,
        <span style="color: #008000; text-decoration-color: #008000">'missionary'</span>,
        <span style="color: #008000; text-decoration-color: #008000">'incident'</span>,
        <span style="color: #008000; text-decoration-color: #008000">'[Signed:'</span>,
        <span style="color: #008000; text-decoration-color: #008000">'W.'</span>,
        <span style="color: #008000; text-decoration-color: #008000">'J.'</span>,
        <span style="color: #008000; text-decoration-color: #008000">'H.'</span>,
        <span style="color: #008000; text-decoration-color: #008000">'Y,'</span>,
        <span style="color: #008000; text-decoration-color: #008000">'i.e.'</span>,
        <span style="color: #008000; text-decoration-color: #008000">'William'</span>,
        <span style="color: #008000; text-decoration-color: #008000">'J.'</span>,
        <span style="color: #008000; text-decoration-color: #008000">'H.'</span>,
        <span style="color: #008000; text-decoration-color: #008000">'Yates.]'</span>
    <span style="font-weight: bold">]</span>,
<span style="font-weight: bold">)</span>
</pre>
</div>
</div>
<p>dask bag has a bunch of handy methods for processing data (some of these we could also do in ü§ó datasets but others are not available as specific methods in datasets).</p>
<p>For example we can make sure we only have unique titles using the <code>distinct</code> method.</p>
<div id="cell-36" class="cell" data-execution_count="26">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">unique_titles <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bag.distinct()</span></code></pre></div>
</div>
<div id="cell-37" class="cell" data-outputid="4392f098-1f1d-4950-daeb-679de217d111" data-execution_count="27">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">unique_titles.take(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="font-weight: bold">(</span>
    <span style="color: #008000; text-decoration-color: #008000">'The Canadian farmer. A missionary incident [Signed: W. J. H. Y, i.e. William J. H. Yates.]'</span>,
    <span style="color: #008000; text-decoration-color: #008000">'A new musical Interlude, called the Election [By M. P. Andrews.]'</span>,
    <span style="color: #008000; text-decoration-color: #008000">'An Elegy written among the ruins of an Abbey. By the author of the Nun [E. Jerningham]'</span>,
    <span style="color: #008000; text-decoration-color: #008000">"The Baron's Daughter. A ballad by the author of Poetical Recreations [i.e. William C. Hazlitt] . F.P"</span>
<span style="font-weight: bold">)</span>
</pre>
</div>
</div>
<p>Similar to ü§ó datasets we have a map method that we can use to apply a function to all of our examples. In this case we split the title text into individual words.</p>
<div id="cell-39" class="cell" data-execution_count="39">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">title_words_split <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> unique_titles.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: x.split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" "</span>))</span></code></pre></div>
</div>
<div id="cell-40" class="cell" data-outputid="51037d54-2f8c-4f67-903c-9408c7fc5b4c" data-execution_count="71">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">title_words_split.take(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="font-weight: bold">(</span>
    <span style="font-weight: bold">[</span>
        <span style="color: #008000; text-decoration-color: #008000">'The'</span>,
        <span style="color: #008000; text-decoration-color: #008000">'Canadian'</span>,
        <span style="color: #008000; text-decoration-color: #008000">'farmer.'</span>,
        <span style="color: #008000; text-decoration-color: #008000">'A'</span>,
        <span style="color: #008000; text-decoration-color: #008000">'missionary'</span>,
        <span style="color: #008000; text-decoration-color: #008000">'incident'</span>,
        <span style="color: #008000; text-decoration-color: #008000">'[Signed:'</span>,
        <span style="color: #008000; text-decoration-color: #008000">'W.'</span>,
        <span style="color: #008000; text-decoration-color: #008000">'J.'</span>,
        <span style="color: #008000; text-decoration-color: #008000">'H.'</span>,
        <span style="color: #008000; text-decoration-color: #008000">'Y,'</span>,
        <span style="color: #008000; text-decoration-color: #008000">'i.e.'</span>,
        <span style="color: #008000; text-decoration-color: #008000">'William'</span>,
        <span style="color: #008000; text-decoration-color: #008000">'J.'</span>,
        <span style="color: #008000; text-decoration-color: #008000">'H.'</span>,
        <span style="color: #008000; text-decoration-color: #008000">'Yates.]'</span>
    <span style="font-weight: bold">]</span>,
    <span style="font-weight: bold">[</span>
        <span style="color: #008000; text-decoration-color: #008000">'A'</span>,
        <span style="color: #008000; text-decoration-color: #008000">'new'</span>,
        <span style="color: #008000; text-decoration-color: #008000">'musical'</span>,
        <span style="color: #008000; text-decoration-color: #008000">'Interlude,'</span>,
        <span style="color: #008000; text-decoration-color: #008000">'called'</span>,
        <span style="color: #008000; text-decoration-color: #008000">'the'</span>,
        <span style="color: #008000; text-decoration-color: #008000">'Election'</span>,
        <span style="color: #008000; text-decoration-color: #008000">'[By'</span>,
        <span style="color: #008000; text-decoration-color: #008000">'M.'</span>,
        <span style="color: #008000; text-decoration-color: #008000">'P.'</span>,
        <span style="color: #008000; text-decoration-color: #008000">'Andrews.]'</span>
    <span style="font-weight: bold">]</span>
<span style="font-weight: bold">)</span>
</pre>
</div>
</div>
<p>We can see we now have all our words in a list. Helpfully dask bag has a <code>flatten</code> method. This will consume our lists and put all the words in a single sequence.</p>
<div id="cell-42" class="cell" data-execution_count="73">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">flattend_title_words <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> title_words_split.flatten()</span></code></pre></div>
</div>
<div id="cell-43" class="cell" data-outputid="9c473358-4520-42f0-cb0e-3e6696e86283" data-execution_count="74">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">flattend_title_words.take(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="font-weight: bold">(</span><span style="color: #008000; text-decoration-color: #008000">'The'</span>, <span style="color: #008000; text-decoration-color: #008000">'Canadian'</span><span style="font-weight: bold">)</span>
</pre>
</div>
</div>
<p>We could now use the <code>frequencies</code> method to get the top words.</p>
<div id="cell-45" class="cell" data-outputid="7d7a32e3-6a82-4437-996d-ba325dc18758" data-execution_count="75">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">freqs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> flattend_title_words.frequencies(sort<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
</div>
<div id="cell-46" class="cell" data-execution_count="76">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1">freqs</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace">dask.bag<span style="font-weight: bold">&lt;</span><span style="color: #ff00ff; text-decoration-color: #ff00ff; font-weight: bold">sorted</span><span style="color: #000000; text-decoration-color: #000000">, </span><span style="color: #808000; text-decoration-color: #808000">npartitions</span><span style="color: #000000; text-decoration-color: #000000">=</span><span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span><span style="font-weight: bold">&gt;</span>
</pre>
</div>
</div>
<p>Since dask bag methods are lazy by default nothing has actually been calculated yet. We could just grab the top 10 words.</p>
<div id="cell-48" class="cell" data-execution_count="77">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1">top_10_words <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> freqs.topk(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
</div>
<p>If we want the results of something we call <code>compute</code> which will call all of the chained methods on our bag.</p>
<div id="cell-50" class="cell" data-execution_count="78">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1">top_10_words.compute()</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="font-weight: bold">[</span>
    <span style="font-weight: bold">(</span><span style="color: #008000; text-decoration-color: #008000">'of'</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">808</span><span style="font-weight: bold">)</span>,
    <span style="font-weight: bold">(</span><span style="color: #008000; text-decoration-color: #008000">'the'</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">674</span><span style="font-weight: bold">)</span>,
    <span style="font-weight: bold">(</span><span style="color: #008000; text-decoration-color: #008000">'and'</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">550</span><span style="font-weight: bold">)</span>,
    <span style="font-weight: bold">(</span><span style="color: #008000; text-decoration-color: #008000">'...'</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">518</span><span style="font-weight: bold">)</span>,
    <span style="font-weight: bold">(</span><span style="color: #008000; text-decoration-color: #008000">'in'</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">402</span><span style="font-weight: bold">)</span>,
    <span style="font-weight: bold">(</span><span style="color: #008000; text-decoration-color: #008000">'van'</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">306</span><span style="font-weight: bold">)</span>,
    <span style="font-weight: bold">(</span><span style="color: #008000; text-decoration-color: #008000">'etc'</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">301</span><span style="font-weight: bold">)</span>,
    <span style="font-weight: bold">(</span><span style="color: #008000; text-decoration-color: #008000">'de'</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">258</span><span style="font-weight: bold">)</span>,
    <span style="font-weight: bold">(</span><span style="color: #008000; text-decoration-color: #008000">'en'</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">258</span><span style="font-weight: bold">)</span>,
    <span style="font-weight: bold">(</span><span style="color: #008000; text-decoration-color: #008000">'a'</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">231</span><span style="font-weight: bold">)</span>
<span style="font-weight: bold">]</span>
</pre>
</div>
</div>
<p>We could also do the same with lowered version</p>
<div id="cell-52" class="cell" data-execution_count="79">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1">lowered_title_words <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> flattend_title_words.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: x.lower())</span></code></pre></div>
</div>
<div id="cell-53" class="cell" data-execution_count="80">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1">freqs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lowered_title_words.frequencies(sort<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
</div>
<p>The visualize method gives you some insights into how the computation is managed by dask.</p>
<div id="cell-55" class="cell" data-execution_count="81">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1">freqs.visualize(engine<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cytoscape"</span>, optimize_graph<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"d985cef20e334ec49f640e264f51b494","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
</div>
</section>
<section id="moving-from-datasets-to-a-dask-dataframe" class="level2">
<h2 class="anchored" data-anchor-id="moving-from-datasets-to-a-dask-dataframe">Moving from datasets to a dask dataframe</h2>
<p>For some operations, dask bag is super easy to use. Sometimes though you will hurt your brain trying to crow bar your problem into the dask bag API üòµ‚Äçüí´ This is where dask dataframes come in! Using parquet, we can easily save our ü§ó dataset as a parquet file.</p>
<div id="cell-57" class="cell" data-execution_count="44">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1">ds.to_parquet(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"genre.parquet"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="44">
<pre><code>3583138</code></pre>
</div>
</div>
<div id="cell-58" class="cell" data-execution_count="84">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> dask.dataframe <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> dd</span></code></pre></div>
</div>
<p>and load from this file</p>
<div id="cell-60" class="cell" data-execution_count="85">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1">ddf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dd.read_parquet(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"genre.parquet"</span>)</span></code></pre></div>
</div>
<p>As dask dataframe works quite similar to a pandas dataframe. It is lazy by default so if we just print it out</p>
<div id="cell-62" class="cell" data-execution_count="86">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1">ddf</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="86">
<div><strong>Dask DataFrame Structure:</strong></div>
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">BL record ID</th>
<th data-quarto-table-cell-role="th">Name</th>
<th data-quarto-table-cell-role="th">Dates associated with name</th>
<th data-quarto-table-cell-role="th">Type of name</th>
<th data-quarto-table-cell-role="th">Role</th>
<th data-quarto-table-cell-role="th">All names</th>
<th data-quarto-table-cell-role="th">Title</th>
<th data-quarto-table-cell-role="th">Variant titles</th>
<th data-quarto-table-cell-role="th">Series title</th>
<th data-quarto-table-cell-role="th">Number within series</th>
<th data-quarto-table-cell-role="th">Country of publication</th>
<th data-quarto-table-cell-role="th">Place of publication</th>
<th data-quarto-table-cell-role="th">Publisher</th>
<th data-quarto-table-cell-role="th">Date of publication</th>
<th data-quarto-table-cell-role="th">Edition</th>
<th data-quarto-table-cell-role="th">Physical description</th>
<th data-quarto-table-cell-role="th">Dewey classification</th>
<th data-quarto-table-cell-role="th">BL shelfmark</th>
<th data-quarto-table-cell-role="th">Topics</th>
<th data-quarto-table-cell-role="th">Genre</th>
<th data-quarto-table-cell-role="th">Languages</th>
<th data-quarto-table-cell-role="th">Notes</th>
<th data-quarto-table-cell-role="th">BL record ID for physical resource</th>
<th data-quarto-table-cell-role="th">classification_id</th>
<th data-quarto-table-cell-role="th">user_id</th>
<th data-quarto-table-cell-role="th">subject_ids</th>
<th data-quarto-table-cell-role="th">annotator_date_pub</th>
<th data-quarto-table-cell-role="th">annotator_normalised_date_pub</th>
<th data-quarto-table-cell-role="th">annotator_edition_statement</th>
<th data-quarto-table-cell-role="th">annotator_FAST_genre_terms</th>
<th data-quarto-table-cell-role="th">annotator_FAST_subject_terms</th>
<th data-quarto-table-cell-role="th">annotator_comments</th>
<th data-quarto-table-cell-role="th">annotator_main_language</th>
<th data-quarto-table-cell-role="th">annotator_other_languages_summaries</th>
<th data-quarto-table-cell-role="th">annotator_summaries_language</th>
<th data-quarto-table-cell-role="th">annotator_translation</th>
<th data-quarto-table-cell-role="th">annotator_original_language</th>
<th data-quarto-table-cell-role="th">annotator_publisher</th>
<th data-quarto-table-cell-role="th">annotator_place_pub</th>
<th data-quarto-table-cell-role="th">annotator_country</th>
<th data-quarto-table-cell-role="th">annotator_title</th>
<th data-quarto-table-cell-role="th">Link to digitised book</th>
<th data-quarto-table-cell-role="th">annotated</th>
<th data-quarto-table-cell-role="th">Type of resource</th>
<th data-quarto-table-cell-role="th">created_at</th>
<th data-quarto-table-cell-role="th">annotator_genre</th>
</tr>
<tr class="odd">
<th data-quarto-table-cell-role="th">npartitions=1</th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th"></td>
<td>object</td>
<td>object</td>
<td>object</td>
<td>object</td>
<td>object</td>
<td>object</td>
<td>object</td>
<td>object</td>
<td>object</td>
<td>object</td>
<td>object</td>
<td>object</td>
<td>object</td>
<td>object</td>
<td>object</td>
<td>object</td>
<td>object</td>
<td>object</td>
<td>object</td>
<td>object</td>
<td>object</td>
<td>object</td>
<td>object</td>
<td>object</td>
<td>object</td>
<td>object</td>
<td>object</td>
<td>object</td>
<td>object</td>
<td>object</td>
<td>object</td>
<td>object</td>
<td>object</td>
<td>object</td>
<td>object</td>
<td>object</td>
<td>object</td>
<td>object</td>
<td>object</td>
<td>object</td>
<td>object</td>
<td>object</td>
<td>bool</td>
<td>int64</td>
<td>datetime64[ns]</td>
<td>int64</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th"></td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
</tr>
</tbody>
</table>

</div>
<div>Dask Name: read-parquet, 1 tasks</div>
</div>
</div>
<p>You‚Äôll see we don‚Äôt actually get back any data. If we use head we get the number of examples we ask for.</p>
<div id="cell-64" class="cell" data-execution_count="87">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1">ddf.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="87">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">BL record ID</th>
<th data-quarto-table-cell-role="th">Name</th>
<th data-quarto-table-cell-role="th">Dates associated with name</th>
<th data-quarto-table-cell-role="th">Type of name</th>
<th data-quarto-table-cell-role="th">Role</th>
<th data-quarto-table-cell-role="th">All names</th>
<th data-quarto-table-cell-role="th">Title</th>
<th data-quarto-table-cell-role="th">Variant titles</th>
<th data-quarto-table-cell-role="th">Series title</th>
<th data-quarto-table-cell-role="th">Number within series</th>
<th data-quarto-table-cell-role="th">...</th>
<th data-quarto-table-cell-role="th">annotator_original_language</th>
<th data-quarto-table-cell-role="th">annotator_publisher</th>
<th data-quarto-table-cell-role="th">annotator_place_pub</th>
<th data-quarto-table-cell-role="th">annotator_country</th>
<th data-quarto-table-cell-role="th">annotator_title</th>
<th data-quarto-table-cell-role="th">Link to digitised book</th>
<th data-quarto-table-cell-role="th">annotated</th>
<th data-quarto-table-cell-role="th">Type of resource</th>
<th data-quarto-table-cell-role="th">created_at</th>
<th data-quarto-table-cell-role="th">annotator_genre</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>014603046</td>
<td>Yates, William Joseph H.</td>
<td></td>
<td>person</td>
<td></td>
<td>[Yates, William Joseph H. [person] , Y, W. J....</td>
<td>The Canadian farmer. A missionary incident [Si...</td>
<td></td>
<td></td>
<td></td>
<td>...</td>
<td></td>
<td>NONE</td>
<td>London</td>
<td>enk</td>
<td>The Canadian farmer. A missionary incident [Si...</td>
<td>http://access.bl.uk/item/viewer/ark:/81055/vdc...</td>
<td>True</td>
<td>0</td>
<td>2020-08-11 14:30:33</td>
<td>0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>014603046</td>
<td>Yates, William Joseph H.</td>
<td></td>
<td>person</td>
<td></td>
<td>[Yates, William Joseph H. [person] , Y, W. J....</td>
<td>The Canadian farmer. A missionary incident [Si...</td>
<td></td>
<td></td>
<td></td>
<td>...</td>
<td></td>
<td>NONE</td>
<td>London</td>
<td>enk</td>
<td>The Canadian farmer. A missionary incident [Si...</td>
<td>http://access.bl.uk/item/viewer/ark:/81055/vdc...</td>
<td>True</td>
<td>0</td>
<td>2021-04-15 09:53:23</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>014603046</td>
<td>Yates, William Joseph H.</td>
<td></td>
<td>person</td>
<td></td>
<td>[Yates, William Joseph H. [person] , Y, W. J....</td>
<td>The Canadian farmer. A missionary incident [Si...</td>
<td></td>
<td></td>
<td></td>
<td>...</td>
<td></td>
<td>NONE</td>
<td>London</td>
<td>enk</td>
<td>The Canadian farmer. A missionary incident [Si...</td>
<td>http://access.bl.uk/item/viewer/ark:/81055/vdc...</td>
<td>True</td>
<td>0</td>
<td>2020-09-24 14:27:54</td>
<td>0</td>
</tr>
</tbody>
</table>

<p>3 rows √ó 46 columns</p>
</div>
</div>
</div>
<p>We have some familiar methods from pandas available to us</p>
<div id="cell-66" class="cell" data-execution_count="49">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1">ddf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ddf.drop_duplicates(subset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Title"</span>)</span></code></pre></div>
</div>
<p>As an example of something that would be a bit tricky in datasets, we can see how to groupby the mean title length by year of publication. First we create a new column for title length</p>
<div id="cell-68" class="cell" data-execution_count="89">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1">ddf[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"title_len"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ddf[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Title"</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(x))</span></code></pre></div>
</div>
<p>We can then groupby the date of publication</p>
<div id="cell-70" class="cell" data-execution_count="90">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb41-1">grouped <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ddf.groupby(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Date of publication"</span>)</span></code></pre></div>
</div>
<p>and then calculate the mean <code>title_len</code></p>
<div id="cell-72" class="cell" data-execution_count="91">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1">mean_title_len <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> grouped[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"title_len"</span>].mean()</span></code></pre></div>
</div>
<p>To actually compute this value we call the <code>compute</code> method</p>
<div id="cell-74" class="cell" data-execution_count="92">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb43-1">mean_title_len.compute()</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace">Date of publication
<span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1635</span>    <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">248.0</span>
<span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1637</span>     <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">67.0</span>
<span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1695</span>     <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">63.0</span>
<span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1765</span>     <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">86.0</span>
<span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1769</span>     <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">20.0</span>
        <span style="color: #808000; text-decoration-color: #808000">...</span>  
<span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1905</span>    <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">141.0</span>
<span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1906</span>    <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">225.0</span>
<span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1907</span>    <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">142.0</span>
<span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1910</span>     <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">65.0</span>
<span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1979</span>     <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">43.0</span>
Name: title_len, Length: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">124</span>, dtype: float64
</pre>
</div>
</div>
<p>We can also create a plot in the usual way</p>
<div id="cell-76" class="cell" data-execution_count="93">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb44-1">mean_title_len.compute().plot()</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="font-weight: bold">&lt;</span><span style="color: #ff00ff; text-decoration-color: #ff00ff; font-weight: bold">AxesSubplot:</span><span style="color: #808000; text-decoration-color: #808000; font-weight: bold">xlabel</span><span style="color: #000000; text-decoration-color: #000000">=</span><span style="color: #008000; text-decoration-color: #008000">'Date of publication'</span><span style="font-weight: bold">&gt;</span>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="font-weight: bold">&lt;</span><span style="color: #ff00ff; text-decoration-color: #ff00ff; font-weight: bold">Figure</span><span style="color: #000000; text-decoration-color: #000000"> size 432x288 with </span><span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span><span style="color: #000000; text-decoration-color: #000000"> Axes</span><span style="font-weight: bold">&gt;</span>
</pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://danielvanstrien.xyz/posts/post-with-code/dask/2022-06-20-dask-and-datasets_files/figure-html/cell-43-output-3.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>This was a very quick overview. The <a href="https://www.dask.org/get-started">dask docs</a> go into much more detail as do the Hugging Face <a href="https://huggingface.co/docs/datasets/">datasets docs</a>.</p>


</section>

 ]]></description>
  <guid>https://danielvanstrien.xyz/posts/post-with-code/dask/2022-06-20-dask-and-datasets.html</guid>
  <pubDate>Mon, 20 Jun 2022 00:00:00 GMT</pubDate>
  <media:content url="https://danielvanstrien.xyz/posts/post-with-code/dask/dask_plot_example.png" medium="image" type="image/png" height="95" width="144"/>
</item>
<item>
  <title>Using ü§ó datasets for image search</title>
  <dc:creator>Daniel van Strien</dc:creator>
  <link>https://danielvanstrien.xyz/posts/post-with-code/2022-01-13-image_search.html</link>
  <description><![CDATA[ 




<p><strong>tl;dr</strong> it‚Äôs really easy to use the huggingface datasets library to create an image search application but it might not be suitable for sharing. <strong>update</strong> an <a href="https://huggingface.co/blog/image-search-datasets">updated version</a> of this post is on the ü§ó blog!</p>
<blockquote class="blockquote">
<p>ü§ó Datasets is a library for easily accessing and sharing datasets, and evaluation metrics for Natural Language Processing (NLP), computer vision, and audio tasks. <a href="https://huggingface.co/docs/datasets/">source</a></p>
</blockquote>
<p>When datasets was first launched it was more usually associated with text data and nlp. However, datasets has got support for images. In particular there is now a datasets <code>feature</code> type for images{% fn %}. In this blog post I try and play around with this new datatype, in combination with some other nice features of the library to make an image search app.</p>
<p>To start lets take a look at the image feature. We can use the wonderful <a href="https://rich.readthedocs.io/">rich</a> libary to poke around python objects (functions, classes etc.)</p>
<div id="cell-3" class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rich <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> inspect</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> datasets.features <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> features</span></code></pre></div>
</div>
<div id="cell-4" class="cell" data-outputid="8b02ef27-c88f-47ff-b528-c50d383a59ba">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">inspect(features.Image, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">help</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #000080; text-decoration-color: #000080">‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ </span><span style="color: #000080; text-decoration-color: #000080; font-weight: bold">&lt;</span><span style="color: #ff00ff; text-decoration-color: #ff00ff; font-weight: bold">class</span><span style="color: #000000; text-decoration-color: #000000"> </span><span style="color: #008000; text-decoration-color: #008000">'datasets.features.image.Image'</span><span style="color: #000080; text-decoration-color: #000080; font-weight: bold">&gt;</span><span style="color: #000080; text-decoration-color: #000080"> ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span> <span style="color: #00ffff; text-decoration-color: #00ffff; font-style: italic">def </span><span style="color: #800000; text-decoration-color: #800000; font-weight: bold">Image</span><span style="font-weight: bold">(</span>id: Union<span style="font-weight: bold">[</span>str, NoneType<span style="font-weight: bold">]</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span><span style="font-weight: bold">)</span> -&gt; <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>:                              <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                                                                                  <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span> <span style="color: #008080; text-decoration-color: #008080">Image feature to read image data from an image file.</span>                             <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                                                                                  <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span> <span style="color: #008080; text-decoration-color: #008080">Input: The Image feature accepts as input:</span>                                       <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span> <span style="color: #008080; text-decoration-color: #008080">- A :obj:`str`: Absolute path to the image file </span><span style="color: #008080; text-decoration-color: #008080; font-weight: bold">(</span><span style="color: #008080; text-decoration-color: #008080">i.e. random access is allowed</span><span style="color: #008080; text-decoration-color: #008080; font-weight: bold">)</span><span style="color: #008080; text-decoration-color: #008080">.</span> <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span> <span style="color: #008080; text-decoration-color: #008080">- A :obj:`dict` with the keys:</span>                                                   <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                                                                                  <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span> <span style="color: #008080; text-decoration-color: #008080">    - path: String with relative path of the image file to the archive file.</span>     <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span> <span style="color: #008080; text-decoration-color: #008080">    - bytes: Bytes of the image file.</span>                                            <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                                                                                  <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span> <span style="color: #008080; text-decoration-color: #008080">  This is useful for archived files with sequential access.</span>                      <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                                                                                  <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span> <span style="color: #008080; text-decoration-color: #008080">- An :obj:`np.ndarray`: NumPy array representing an image.</span>                       <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span> <span style="color: #008080; text-decoration-color: #008080">- A :obj:`PIL.Image.Image`: PIL image object.</span>                                    <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                                                                                  <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>   <span style="color: #808000; text-decoration-color: #808000; font-style: italic">dtype</span> = <span style="color: #008000; text-decoration-color: #008000">'dict'</span>                                                                 <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>      <span style="color: #808000; text-decoration-color: #808000; font-style: italic">id</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>                                                                   <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span> <span style="color: #808000; text-decoration-color: #808000; font-style: italic">pa_type</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>                                                                   <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ</span>
</pre>
</div>
</div>
<p>We can see there a few different ways in which we can pass in our images. We‚Äôll come back to this in a little while.</p>
<p>A really nice feature of the datasets library (beyond the functionality for processing data, memory mapping etc.) is that you get some nice things for free. One of these is the ability to add a faiss index. <a href="https://github.com/facebookresearch/faiss">faiss</a> is a <a href="https://github.com/facebookresearch/faiss">‚Äúlibrary for efficient similarity search and clustering of dense vectors‚Äù</a>.</p>
<p>The datasets <a href="https://huggingface.co/docs">docs</a> show and example of using faiss for text retrieval. What I‚Äôm curious about doing is using the faiss index to search for images. This can be super useful for a number of reasons but also comes with some potential issues.</p>
<section id="the-dataset-digitised-books---images-identified-as-embellishments.-c.-1510---c.-1900.-jpg" class="level2">
<h2 class="anchored" data-anchor-id="the-dataset-digitised-books---images-identified-as-embellishments.-c.-1510---c.-1900.-jpg">The dataset: ‚ÄúDigitised Books - Images identified as Embellishments. c.&nbsp;1510 - c.&nbsp;1900. JPG‚Äù</h2>
<p>This is a dataset of images which have been pulled from a collection of digitised books from the British Library. These images come from books across a wide time period and from a broad range of domains. These images were extracted using information in the OCR output for each book. As a result it‚Äôs known which book the images came from but not necessarily anything else about that image i.e.&nbsp;what it is of.</p>
<p>Some attempts to help overcome this have included uploading the images to <a href="https://www.flickr.com/photos/britishlibrary/albums">flickr</a>. This allows people to tag the images or put them into various different categories.</p>
<p>There have also been projects to tag the dataset <a href="https://blogs.bl.uk/digital-scholarship/2016/11/sherlocknet-update-millions-of-tags-and-thousands-of-captions-added-to-the-bl-flickr-images.html">using machine learning</a>. This work already makes it possible to search by tags but we might want a ‚Äòricher‚Äô ability to search. For this particular experiment I will work with a subset of the collections which contain ‚Äúembellishments‚Äù. This dataset is a bit smaller so will be better for experimenting with. We can get the data from the BL repository: <a href="https://doi.org/10.21250/db17">https://doi.org/10.21250/db17</a></p>
<div id="cell-7" class="cell" data-outputid="e451df6e-7e93-4e67-e5db-1e812eeb88e6">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># hide_output</span></span>
<span id="cb3-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>aria2c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>x8 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>o dig19cbooks<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>embellishments.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://bl.iro.bl.uk/downloads/ba1d1d12-b1bd-4a43-9696-7b29b56cdd20?locale=en"</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
01/12 20:18:42 [NOTICE] Downloading 1 item(s)

01/12 20:18:42 [NOTICE] Removed the defunct control file /Users/dvanstrien/Documents/daniel/blog/_notebooks/dig19cbooks-embellishments.zip.aria2 because the download file /Users/dvanstrien/Documents/daniel/blog/_notebooks/dig19cbooks-embellishments.zip doesn't exist.

01/12 20:18:42 [NOTICE] Allocating disk space. Use --file-allocation=none to disable it. See --file-allocation option in man page for more details.
 *** Download Progress Summary as of Wed Jan 12 20:19:43 2022 ***              58s](98%)]m
===============================================================================
[#f38a5d 553MiB/43GiB(1%) CN:5 DL:36MiB ETA:19m55s]
FILE: /Users/dvanstrien/Documents/daniel/blog/_notebooks/dig19cbooks-embellishments.zip
-------------------------------------------------------------------------------

 *** Download Progress Summary as of Wed Jan 12 20:20:44 2022 ***              46s]
===============================================================================
[#f38a5d 2.6GiB/43GiB(6%) CN:5 DL:37MiB ETA:18m38s]
FILE: /Users/dvanstrien/Documents/daniel/blog/_notebooks/dig19cbooks-embellishments.zip
-------------------------------------------------------------------------------

 *** Download Progress Summary as of Wed Jan 12 20:21:45 2022 ***              m1s]m
===============================================================================
[#f38a5d 4.7GiB/43GiB(10%) CN:5 DL:36MiB ETA:18m8s]
FILE: /Users/dvanstrien/Documents/daniel/blog/_notebooks/dig19cbooks-embellishments.zip
-------------------------------------------------------------------------------

 *** Download Progress Summary as of Wed Jan 12 20:22:45 2022 ***              m46s]
===============================================================================
[#f38a5d 6.7GiB/43GiB(15%) CN:5 DL:31MiB ETA:19m38s]
FILE: /Users/dvanstrien/Documents/daniel/blog/_notebooks/dig19cbooks-embellishments.zip
-------------------------------------------------------------------------------

 *** Download Progress Summary as of Wed Jan 12 20:23:46 2022 ***              m23s]
===============================================================================
[#f38a5d 8.8GiB/43GiB(20%) CN:5 DL:35MiB ETA:16m42s]
FILE: /Users/dvanstrien/Documents/daniel/blog/_notebooks/dig19cbooks-embellishments.zip
-------------------------------------------------------------------------------

 *** Download Progress Summary as of Wed Jan 12 20:24:46 2022 ***              2s]mm
===============================================================================
[#f38a5d 10GiB/43GiB(24%) CN:5 DL:28MiB ETA:19m59s]
FILE: /Users/dvanstrien/Documents/daniel/blog/_notebooks/dig19cbooks-embellishments.zip
-------------------------------------------------------------------------------

 *** Download Progress Summary as of Wed Jan 12 20:25:47 2022 ***              28s]
===============================================================================
[#f38a5d 12GiB/43GiB(29%) CN:5 DL:36MiB ETA:14m19s]
FILE: /Users/dvanstrien/Documents/daniel/blog/_notebooks/dig19cbooks-embellishments.zip
-------------------------------------------------------------------------------

 *** Download Progress Summary as of Wed Jan 12 20:26:47 2022 ***              43s]
===============================================================================
[#f38a5d 14GiB/43GiB(33%) CN:5 DL:35MiB ETA:13m57s]
FILE: /Users/dvanstrien/Documents/daniel/blog/_notebooks/dig19cbooks-embellishments.zip
-------------------------------------------------------------------------------

 *** Download Progress Summary as of Wed Jan 12 20:27:48 2022 ***              36s]
===============================================================================
[#f38a5d 16GiB/43GiB(37%) CN:5 DL:33MiB ETA:13m51s]
FILE: /Users/dvanstrien/Documents/daniel/blog/_notebooks/dig19cbooks-embellishments.zip
-------------------------------------------------------------------------------

 *** Download Progress Summary as of Wed Jan 12 20:28:49 2022 ***              32s]
===============================================================================
[#f38a5d 18GiB/43GiB(42%) CN:5 DL:37MiB ETA:11m31s]
FILE: /Users/dvanstrien/Documents/daniel/blog/_notebooks/dig19cbooks-embellishments.zip
-------------------------------------------------------------------------------

 *** Download Progress Summary as of Wed Jan 12 20:29:49 2022 ***              14s]
===============================================================================
[#f38a5d 20GiB/43GiB(46%) CN:5 DL:32MiB ETA:12m2s]
FILE: /Users/dvanstrien/Documents/daniel/blog/_notebooks/dig19cbooks-embellishments.zip
-------------------------------------------------------------------------------

 *** Download Progress Summary as of Wed Jan 12 20:30:50 2022 ***              6s]m
===============================================================================
[#f38a5d 22GiB/43GiB(51%) CN:5 DL:36MiB ETA:9m55s]
FILE: /Users/dvanstrien/Documents/daniel/blog/_notebooks/dig19cbooks-embellishments.zip
-------------------------------------------------------------------------------

 *** Download Progress Summary as of Wed Jan 12 20:31:51 2022 ***              9s]m
===============================================================================
[#f38a5d 24GiB/43GiB(56%) CN:5 DL:37MiB ETA:8m38s]
FILE: /Users/dvanstrien/Documents/daniel/blog/_notebooks/dig19cbooks-embellishments.zip
-------------------------------------------------------------------------------

 *** Download Progress Summary as of Wed Jan 12 20:32:51 2022 ***              4s]
===============================================================================
[#f38a5d 26GiB/43GiB(61%) CN:5 DL:36MiB ETA:7m43s]
FILE: /Users/dvanstrien/Documents/daniel/blog/_notebooks/dig19cbooks-embellishments.zip
-------------------------------------------------------------------------------

 *** Download Progress Summary as of Wed Jan 12 20:33:52 2022 ***              0s]
===============================================================================
[#f38a5d 28GiB/43GiB(66%) CN:5 DL:37MiB ETA:6m38s]
FILE: /Users/dvanstrien/Documents/daniel/blog/_notebooks/dig19cbooks-embellishments.zip
-------------------------------------------------------------------------------

 *** Download Progress Summary as of Wed Jan 12 20:34:52 2022 ***              8s]
===============================================================================
[#f38a5d 31GiB/43GiB(71%) CN:5 DL:36MiB ETA:5m47s]
FILE: /Users/dvanstrien/Documents/daniel/blog/_notebooks/dig19cbooks-embellishments.zip
-------------------------------------------------------------------------------

 *** Download Progress Summary as of Wed Jan 12 20:35:53 2022 ***              s]m
===============================================================================
[#f38a5d 32GiB/43GiB(75%) CN:5 DL:17MiB ETA:10m7s]
FILE: /Users/dvanstrien/Documents/daniel/blog/_notebooks/dig19cbooks-embellishments.zip
-------------------------------------------------------------------------------

 *** Download Progress Summary as of Wed Jan 12 20:36:53 2022 ***              1s]m
===============================================================================
[#f38a5d 34GiB/43GiB(79%) CN:5 DL:27MiB ETA:5m31s]
FILE: /Users/dvanstrien/Documents/daniel/blog/_notebooks/dig19cbooks-embellishments.zip
-------------------------------------------------------------------------------

 *** Download Progress Summary as of Wed Jan 12 20:37:54 2022 ***              4s]
===============================================================================
[#f38a5d 35GiB/43GiB(82%) CN:5 DL:29MiB ETA:4m22s]
FILE: /Users/dvanstrien/Documents/daniel/blog/_notebooks/dig19cbooks-embellishments.zip
-------------------------------------------------------------------------------

 *** Download Progress Summary as of Wed Jan 12 20:38:55 2022 ***              5s]
===============================================================================
[#f38a5d 37GiB/43GiB(86%) CN:5 DL:26MiB ETA:3m36s]
FILE: /Users/dvanstrien/Documents/daniel/blog/_notebooks/dig19cbooks-embellishments.zip
-------------------------------------------------------------------------------

 *** Download Progress Summary as of Wed Jan 12 20:39:55 2022 ***              5s]
===============================================================================
[#f38a5d 39GiB/43GiB(91%) CN:5 DL:36MiB ETA:1m44s]
FILE: /Users/dvanstrien/Documents/daniel/blog/_notebooks/dig19cbooks-embellishments.zip
-------------------------------------------------------------------------------

 *** Download Progress Summary as of Wed Jan 12 20:40:56 2022 ***              ]mm
===============================================================================
[#f38a5d 41GiB/43GiB(95%) CN:5 DL:34MiB ETA:52s]
FILE: /Users/dvanstrien/Documents/daniel/blog/_notebooks/dig19cbooks-embellishments.zip
-------------------------------------------------------------------------------

[#f38a5d 43GiB/43GiB(99%) CN:2 DL:35MiB]0m]m
01/12 20:41:49 [NOTICE] Download complete: /Users/dvanstrien/Documents/daniel/blog/_notebooks/dig19cbooks-embellishments.zip

Download Results:
gid   |stat|avg speed  |path/URI
======+====+===========+=======================================================
f38a5d|OK  |    33MiB/s|/Users/dvanstrien/Documents/daniel/blog/_notebooks/dig19cbooks-embellishments.zip

Status Legend:
(OK):download completed.</code></pre>
</div>
</div>
<div id="cell-8" class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>unzip <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>q dig19cbooks<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>embellishments.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span></span></code></pre></div>
</div>
</section>
<section id="install-required-packages" class="level2">
<h2 class="anchored" data-anchor-id="install-required-packages">Install required packages</h2>
<p>There are a few packages we‚Äôll need for this work. To start with we‚Äôll need the datasets library.</p>
<div id="cell-10" class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># hide output</span></span>
<span id="cb6-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> sys</span>
<span id="cb6-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>{sys.executable} <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>m pip install datasets </span></code></pre></div>
</div>
<p>Now we have the data downloaded we‚Äôll try and load it into datasets. There are various ways of doing this. To start with we can grab all of the files we need.</p>
<div id="cell-12" class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pathlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Path</span></code></pre></div>
</div>
<div id="cell-13" class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">files <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(Path(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'embellishments/'</span>).rglob(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"*.jpg"</span>))</span></code></pre></div>
</div>
<p>Since the file path encodes the year of publication for the book the image came from let‚Äôs create a function to grab that.</p>
<div id="cell-15" class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_parts(f:Path):</span>
<span id="cb9-2">    _,year,fname <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>  f.parts</span>
<span id="cb9-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> year, fname</span></code></pre></div>
</div>
</section>
<section id="loading-the-images" class="level2">
<h2 class="anchored" data-anchor-id="loading-the-images">üì∏ Loading the images</h2>
<p>The images are fairly large, since this is an experiment we‚Äôll resize them a little using the <code>thumbnail</code> method (this makes sure we keep the same aspect ratio for our images)</p>
<div id="cell-17" class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> PIL <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Image</span>
<span id="cb10-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> io</span></code></pre></div>
</div>
<div id="cell-18" class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> load_image(path):</span>
<span id="cb11-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(path, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'rb'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb11-3">        im <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(io.BytesIO(f.read()))</span>
<span id="cb11-4">        im.thumbnail((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">224</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">224</span>))</span>
<span id="cb11-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> im </span></code></pre></div>
</div>
<div id="cell-19" class="cell" data-outputid="4f128395-0a43-48ab-e5ec-7a8e6ae985b6">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">im <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> load_image(files[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb12-2">im</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="8">
<div>
<figure class="figure">
<p><img src="https://danielvanstrien.xyz/posts/post-with-code/2022-01-13-image_search_files/figure-html/cell-12-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<section id="where-is-the-image" class="level3">
<h3 class="anchored" data-anchor-id="where-is-the-image">Where is the image ü§î</h3>
<p>You may have noticed that the <code>load_image</code> function doesn‚Äôt load the filepath into pillow directly. Often we would do <code>Image.open(filepath.jpg)</code>. This is done deliberately. If we load it this way when we inspect the resulting image you‚Äôll see that the filepath attribute is empty.</p>
<div id="cell-21" class="cell" data-outputid="d88332dc-7275-431c-e0c0-9bdbe84fd1a5">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#collapse_output</span></span>
<span id="cb13-2">inspect(im)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #000080; text-decoration-color: #000080">‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ </span><span style="color: #000080; text-decoration-color: #000080; font-weight: bold">&lt;</span><span style="color: #ff00ff; text-decoration-color: #ff00ff; font-weight: bold">class</span><span style="color: #000000; text-decoration-color: #000000"> </span><span style="color: #008000; text-decoration-color: #008000">'PIL.JpegImagePlugin.JpegImageFile'</span><span style="color: #000080; text-decoration-color: #000080; font-weight: bold">&gt;</span><span style="color: #000080; text-decoration-color: #000080"> ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span> <span style="color: #008000; text-decoration-color: #008000">‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ</span> <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span> <span style="color: #008000; text-decoration-color: #008000">‚îÇ</span> <span style="font-weight: bold">&lt;</span><span style="color: #ff00ff; text-decoration-color: #ff00ff; font-weight: bold">PIL.JpegImagePlugin.JpegImageFile</span><span style="color: #000000; text-decoration-color: #000000"> image </span><span style="color: #808000; text-decoration-color: #808000">mode</span><span style="color: #000000; text-decoration-color: #000000">=</span><span style="color: #800080; text-decoration-color: #800080">RGB</span><span style="color: #000000; text-decoration-color: #000000"> </span><span style="color: #808000; text-decoration-color: #808000">size</span><span style="color: #000000; text-decoration-color: #000000">=</span><span style="color: #800080; text-decoration-color: #800080">20</span><span style="color: #008080; text-decoration-color: #008080; font-weight: bold">0x224</span><span style="color: #000000; text-decoration-color: #000000"> at </span><span style="color: #008080; text-decoration-color: #008080; font-weight: bold">0x7FBBB392D040</span><span style="font-weight: bold">&gt;</span>     <span style="color: #008000; text-decoration-color: #008000">‚îÇ</span> <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span> <span style="color: #008000; text-decoration-color: #008000">‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ</span> <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                                                                                           <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                <span style="color: #808000; text-decoration-color: #808000; font-style: italic">app</span> = <span style="font-weight: bold">{</span><span style="color: #008000; text-decoration-color: #008000">'APP0'</span>: <span style="color: #008000; text-decoration-color: #008000">b'JFIF\x00\x01\x01\x00\x00\x01\x00\x01\x00\x00'</span><span style="font-weight: bold">}</span>            <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>            <span style="color: #808000; text-decoration-color: #808000; font-style: italic">applist</span> = <span style="font-weight: bold">[(</span><span style="color: #008000; text-decoration-color: #008000">'APP0'</span>, <span style="color: #008000; text-decoration-color: #008000">b'JFIF\x00\x01\x01\x00\x00\x01\x00\x01\x00\x00'</span><span style="font-weight: bold">)]</span>          <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>               <span style="color: #808000; text-decoration-color: #808000; font-style: italic">bits</span> = <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">8</span>                                                                    <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>    <span style="color: #808000; text-decoration-color: #808000; font-style: italic">custom_mimetype</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>                                                                 <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>      <span style="color: #808000; text-decoration-color: #808000; font-style: italic">decoderconfig</span> = <span style="font-weight: bold">(</span><span style="color: #008080; text-decoration-color: #008080; font-weight: bold">2</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">0</span><span style="font-weight: bold">)</span>                                                               <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>    <span style="color: #808000; text-decoration-color: #808000; font-style: italic">decodermaxblock</span> = <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">65536</span>                                                                <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>      <span style="color: #808000; text-decoration-color: #808000; font-style: italic">encoderconfig</span> = <span style="font-weight: bold">(</span><span style="color: #ff0000; text-decoration-color: #ff0000; font-style: italic">False</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-1</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-1</span>, <span style="color: #008000; text-decoration-color: #008000">b''</span><span style="font-weight: bold">)</span>                                                 <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>        <span style="color: #808000; text-decoration-color: #808000; font-style: italic">encoderinfo</span> = <span style="font-weight: bold">{}</span>                                                                   <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>           <span style="color: #808000; text-decoration-color: #808000; font-style: italic">filename</span> = <span style="color: #008000; text-decoration-color: #008000">''</span>                                                                   <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>             <span style="color: #808000; text-decoration-color: #808000; font-style: italic">format</span> = <span style="color: #008000; text-decoration-color: #008000">'JPEG'</span>                                                               <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span> <span style="color: #808000; text-decoration-color: #808000; font-style: italic">format_description</span> = <span style="color: #008000; text-decoration-color: #008000">'JPEG (ISO 10918)'</span>                                                   <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                 <span style="color: #808000; text-decoration-color: #808000; font-style: italic">fp</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>                                                                 <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>             <span style="color: #808000; text-decoration-color: #808000; font-style: italic">height</span> = <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">224</span>                                                                  <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>         <span style="color: #808000; text-decoration-color: #808000; font-style: italic">huffman_ac</span> = <span style="font-weight: bold">{}</span>                                                                   <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>         <span style="color: #808000; text-decoration-color: #808000; font-style: italic">huffman_dc</span> = <span style="font-weight: bold">{}</span>                                                                   <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>            <span style="color: #808000; text-decoration-color: #808000; font-style: italic">icclist</span> = <span style="font-weight: bold">[]</span>                                                                   <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                 <span style="color: #808000; text-decoration-color: #808000; font-style: italic">im</span> = <span style="font-weight: bold">&lt;</span><span style="color: #ff00ff; text-decoration-color: #ff00ff; font-weight: bold">ImagingCore</span><span style="color: #000000; text-decoration-color: #000000"> object at </span><span style="color: #008080; text-decoration-color: #008080; font-weight: bold">0x7fbba120dc10</span><span style="font-weight: bold">&gt;</span>                               <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>               <span style="color: #808000; text-decoration-color: #808000; font-style: italic">info</span> = <span style="font-weight: bold">{</span>                                                                    <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                          <span style="color: #008000; text-decoration-color: #008000">'jfif'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">257</span>,                                                     <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                          <span style="color: #008000; text-decoration-color: #008000">'jfif_version'</span>: <span style="font-weight: bold">(</span><span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span><span style="font-weight: bold">)</span>,                                          <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                          <span style="color: #008000; text-decoration-color: #008000">'jfif_unit'</span>: <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">0</span>,                                                  <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                          <span style="color: #008000; text-decoration-color: #008000">'jfif_density'</span>: <span style="font-weight: bold">(</span><span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span><span style="font-weight: bold">)</span>                                           <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                      <span style="font-weight: bold">}</span>                                                                    <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>              <span style="color: #808000; text-decoration-color: #808000; font-style: italic">layer</span> = <span style="font-weight: bold">[(</span><span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">2</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">2</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">0</span><span style="font-weight: bold">)</span>, <span style="font-weight: bold">(</span><span style="color: #008080; text-decoration-color: #008080; font-weight: bold">2</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span><span style="font-weight: bold">)</span>, <span style="font-weight: bold">(</span><span style="color: #008080; text-decoration-color: #008080; font-weight: bold">3</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span><span style="font-weight: bold">)]</span>                           <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>             <span style="color: #808000; text-decoration-color: #808000; font-style: italic">layers</span> = <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">3</span>                                                                    <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                <span style="color: #808000; text-decoration-color: #808000; font-style: italic">map</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>                                                                 <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>               <span style="color: #808000; text-decoration-color: #808000; font-style: italic">mode</span> = <span style="color: #008000; text-decoration-color: #008000">'RGB'</span>                                                                <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>            <span style="color: #808000; text-decoration-color: #808000; font-style: italic">palette</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>                                                                 <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>           <span style="color: #808000; text-decoration-color: #808000; font-style: italic">pyaccess</span> = <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>                                                                 <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>       <span style="color: #808000; text-decoration-color: #808000; font-style: italic">quantization</span> = <span style="font-weight: bold">{</span>                                                                    <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                          <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">0</span>: <span style="font-weight: bold">[</span>                                                             <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">2</span>,                                                           <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">2</span>,                                                           <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span>,                                                           <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">2</span>,                                                           <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">3</span>,                                                           <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">6</span>,                                                           <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">7</span>,                                                           <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">9</span>,                                                           <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">2</span>,                                                           <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">2</span>,                                                           <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">2</span>,                                                           <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">3</span>,                                                           <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">4</span>,                                                           <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">8</span>,                                                           <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">8</span>,                                                           <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">8</span>,                                                           <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">2</span>,                                                           <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">2</span>,                                                           <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">2</span>,                                                           <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">3</span>,                                                           <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">6</span>,                                                           <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">8</span>,                                                           <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">10</span>,                                                          <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">8</span>,                                                           <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">2</span>,                                                           <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">2</span>,                                                           <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">3</span>,                                                           <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">4</span>,                                                           <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">7</span>,                                                           <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">12</span>,                                                          <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">11</span>,                                                          <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">9</span>,                                                           <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">3</span>,                                                           <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">3</span>,                                                           <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">5</span>,                                                           <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">8</span>,                                                           <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">10</span>,                                                          <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">15</span>,                                                          <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">14</span>,                                                          <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">11</span>,                                                          <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">3</span>,                                                           <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">5</span>,                                                           <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">8</span>,                                                           <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">9</span>,                                                           <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">11</span>,                                                          <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">15</span>,                                                          <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">16</span>,                                                          <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">13</span>,                                                          <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">7</span>,                                                           <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">9</span>,                                                           <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">11</span>,                                                          <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">12</span>,                                                          <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">14</span>,                                                          <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">17</span>,                                                          <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">17</span>,                                                          <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">14</span>,                                                          <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">10</span>,                                                          <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">13</span>,                                                          <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">13</span>,                                                          <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">14</span>,                                                          <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">16</span>,                                                          <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">14</span>,                                                          <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">14</span>,                                                          <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">14</span>                                                           <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                          <span style="font-weight: bold">]</span>,                                                               <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                          <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span>: <span style="font-weight: bold">[</span>                                                             <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">2</span>,                                                           <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">3</span>,                                                           <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">3</span>,                                                           <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">7</span>,                                                           <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">14</span>,                                                          <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">14</span>,                                                          <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">14</span>,                                                          <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">14</span>,                                                          <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">3</span>,                                                           <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">3</span>,                                                           <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">4</span>,                                                           <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">9</span>,                                                           <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">14</span>,                                                          <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">14</span>,                                                          <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">14</span>,                                                          <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">14</span>,                                                          <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">3</span>,                                                           <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">4</span>,                                                           <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">8</span>,                                                           <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">14</span>,                                                          <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">14</span>,                                                          <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">14</span>,                                                          <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">14</span>,                                                          <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">14</span>,                                                          <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">7</span>,                                                           <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">9</span>,                                                           <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">14</span>,                                                          <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">14</span>,                                                          <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">14</span>,                                                          <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">14</span>,                                                          <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">14</span>,                                                          <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">14</span>,                                                          <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">14</span>,                                                          <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">14</span>,                                                          <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">14</span>,                                                          <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">14</span>,                                                          <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">14</span>,                                                          <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">14</span>,                                                          <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">14</span>,                                                          <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">14</span>,                                                          <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">14</span>,                                                          <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">14</span>,                                                          <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">14</span>,                                                          <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">14</span>,                                                          <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">14</span>,                                                          <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">14</span>,                                                          <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">14</span>,                                                          <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">14</span>,                                                          <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">14</span>,                                                          <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">14</span>,                                                          <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">14</span>,                                                          <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">14</span>,                                                          <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">14</span>,                                                          <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">14</span>,                                                          <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">14</span>,                                                          <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">14</span>,                                                          <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">14</span>,                                                          <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">14</span>,                                                          <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">14</span>,                                                          <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">14</span>,                                                          <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">14</span>,                                                          <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">14</span>,                                                          <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">14</span>,                                                          <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                              <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">14</span>                                                           <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                          <span style="font-weight: bold">]</span>                                                                <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>                      <span style="font-weight: bold">}</span>                                                                    <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>           <span style="color: #808000; text-decoration-color: #808000; font-style: italic">readonly</span> = <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">0</span>                                                                    <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>               <span style="color: #808000; text-decoration-color: #808000; font-style: italic">size</span> = <span style="font-weight: bold">(</span><span style="color: #008080; text-decoration-color: #008080; font-weight: bold">200</span>, <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">224</span><span style="font-weight: bold">)</span>                                                           <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>               <span style="color: #808000; text-decoration-color: #808000; font-style: italic">tile</span> = <span style="font-weight: bold">[]</span>                                                                   <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>              <span style="color: #808000; text-decoration-color: #808000; font-style: italic">width</span> = <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">200</span>                                                                  <span style="color: #000080; text-decoration-color: #000080">‚îÇ</span>
<span style="color: #000080; text-decoration-color: #000080">‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ</span>
</pre>
</div>
</div>
<p>You can also directly see this</p>
<div id="cell-23" class="cell" data-outputid="1e86fe56-5105-4244-e3ff-b3aafbda7584">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">im.filename</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="10">
<pre><code>''</code></pre>
</div>
</div>
<p>Pillow usually loads images in a lazy way i.e.&nbsp;it only opens them when they are needed. The filepath is used to access the image. We can see the filename attribute is present if we open it from the filepath</p>
<div id="cell-25" class="cell" data-outputid="e20384ba-1faf-4d39-88dc-34c68321f809">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">im_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(files[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb16-2">im_file.filename</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="11">
<pre><code>'/Users/dvanstrien/Documents/daniel/blog/_notebooks/embellishments/1855/000811462_05_000205_1_The Pictorial History of England  being a history of the people  as well as a hi_1855.jpg'</code></pre>
</div>
</div>
<p>The reason I don‚Äôt want the filename attribute present here is because not only do I want to use datasets to process our images but also <em>store</em> the images. If we pass a Pillow object with the filename attribute datasets will also use this for loading the images. This is often what we‚Äôd want but we don‚Äôt want this here for reasons we‚Äôll see shortly.</p>
</section>
<section id="preparing-images-for-datasets" class="level3">
<h3 class="anchored" data-anchor-id="preparing-images-for-datasets">Preparing images for datasets</h3>
<p>We can now load our images. What we‚Äôll do is is loop through all our images and then load the information for each image into a dictionary.</p>
<div id="cell-29" class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> collections <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> defaultdict</span></code></pre></div>
</div>
<div id="cell-30" class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> defaultdict(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>)</span></code></pre></div>
</div>
<div id="cell-31" class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> tqdm <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tqdm</span></code></pre></div>
</div>
<div id="cell-32" class="cell" data-outputid="f700a1e5-05ba-4ca3-ec6d-95ab50f6f9aa">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> tqdm(files):</span>
<span id="cb21-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">try</span>:</span>
<span id="cb21-3">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#load_image(file)</span></span>
<span id="cb21-4">        year, fname <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_parts(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>)</span>
<span id="cb21-5">        data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'fname'</span>].append(fname)</span>
<span id="cb21-6">        data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'year'</span>].append(year)</span>
<span id="cb21-7">        data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'path'</span>].append(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>))</span>
<span id="cb21-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">except</span>:</span>
<span id="cb21-9">        Image.UnidentifiedImageError</span>
<span id="cb21-10">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">pass</span></span>
<span id="cb21-11">        </span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 416944/416944 [00:05&lt;00:00, 77169.45it/s]</code></pre>
</div>
</div>
<p>We can now load the <code>from_dict</code> method to create a new dataset.</p>
<div id="cell-34" class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> datasets <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Dataset</span></code></pre></div>
</div>
<div id="cell-35" class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Dataset.from_dict(data)</span></code></pre></div>
</div>
<p>We can look at one example to see what this looks like.</p>
<div id="cell-37" class="cell" data-outputid="0303e0e1-89f6-4e2b-f673-112d81ef9cc1">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">dataset[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="20">
<pre><code>{'fname': '000811462_05_000205_1_The Pictorial History of England  being a history of the people  as well as a hi_1855.jpg',
 'year': '1855',
 'path': 'embellishments/1855/000811462_05_000205_1_The Pictorial History of England  being a history of the people  as well as a hi_1855.jpg'}</code></pre>
</div>
</div>
</section>
<section id="loading-our-images" class="level3">
<h3 class="anchored" data-anchor-id="loading-our-images">Loading our images</h3>
<p>At the moment our dataset has the filename and full path for each image. However, we want to have an actual image loaded into our dataset. We already have a <code>load_image</code> function. This gets us most of the way there but we might also want to add some ability to deal with image errors. The datasets library has gained increased uspport for handling <code>None</code> types- this includes support for <code>None</code> types for images see <a href="https://github.com/huggingface/datasets/pull/3195">pull request 3195</a>.</p>
<p>We‚Äôll wrap our <code>load_image</code> function in a try block, catch a <code>Image.UnidentifiedImageError</code> error and return None if we can‚Äôt load the image.</p>
<div id="cell-39" class="cell">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> try_load_image(filename):</span>
<span id="cb27-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">try</span>:</span>
<span id="cb27-3">        image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> load_image(filename)</span>
<span id="cb27-4">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">isinstance</span>(image, Image.Image):</span>
<span id="cb27-5">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> image</span>
<span id="cb27-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">except</span> Image.UnidentifiedImageError:</span>
<span id="cb27-7">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span></code></pre></div>
</div>
<div id="cell-40" class="cell" data-outputid="514ee3ef-2a34-4da9-c1f1-75d21756c067">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span>time</span>
<span id="cb28-2">dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dataset.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> example: {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"img"</span>: try_load_image(example[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'path'</span>])},writer_batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"bdc76da89d69410f9c83bc48fe37e867","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>CPU times: user 51min 42s, sys: 4min 31s, total: 56min 13s
Wall time: 1h 10min 31s</code></pre>
</div>
</div>
<p>Let‚Äôs see what this looks like</p>
<div id="cell-42" class="cell" data-outputid="c2fc9f2b-73bd-44cd-b169-5a668e0e41e0">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1">dataset</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="30">
<pre><code>Dataset({
    features: ['fname', 'year', 'path', 'img'],
    num_rows: 416944
})</code></pre>
</div>
</div>
<p>We have an image column, let‚Äôs check the type of all our features</p>
<div id="cell-44" class="cell" data-outputid="0e4bb8b9-658e-4b2e-f371-1ce11ad45173">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1">dataset.features</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="35">
<pre><code>{'fname': Value(dtype='string', id=None),
 'year': Value(dtype='string', id=None),
 'path': Value(dtype='string', id=None),
 'img': Image(id=None)}</code></pre>
</div>
</div>
<p>This is looking great already. Since we might have some <code>None</code> types for images let‚Äôs get rid of these.</p>
<div id="cell-46" class="cell" data-outputid="a8ac6b69-42d4-4d81-f6ca-308d1191defb">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1">dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dataset.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> example: example[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'img'</span>] <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"60aef6354d024291ad00851b100a4c5b","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
</div>
<div id="cell-47" class="cell" data-outputid="e756bb0c-5b05-42bf-ca5d-f111c555464e">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1">dataset</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="37">
<pre><code>Dataset({
    features: ['fname', 'year', 'path', 'img'],
    num_rows: 416935
})</code></pre>
</div>
</div>
<p>You‚Äôll see we lost a few rows by doing this filtering. We should now just have images which are successfully loaded.</p>
<p>If we access an example and index into the <code>img</code> column we‚Äôll see our image üòÉ</p>
<div id="cell-50" class="cell" data-outputid="180fb878-dbb2-46cf-c3a5-cc8426f2047a">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1">dataset[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'img'</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="38">
<div>
<figure class="figure">
<p><img src="https://danielvanstrien.xyz/posts/post-with-code/2022-01-13-image_search_files/figure-html/cell-29-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
</section>
<section id="push-all-the-things-to-the-hub" class="level2">
<h2 class="anchored" data-anchor-id="push-all-the-things-to-the-hub">Push all the things to the hub!</h2>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://i.imgflip.com/613c0r.jpg" class="img-fluid figure-img"></p>
<figcaption>Push all the things to the hub!</figcaption>
</figure>
</div>
<p>One of the super awesome things about the huggingface ecosystem is the huggingface hub. We can use the hub to access models and datasets. Often this is used for sharing work with others but it can also be a useful tool for work in progress. The datasets library recently added a <code>push_to_hub</code> method that allows you to push a dataset to the hub with minimal fuss. This can be really helpful by allowing you to pass around a dataset with all the transformers etc. already done.</p>
<p>When I started playing around with this feature I was also keen to see if it could be used as a way of ‚Äòbundling‚Äô everything together. This is where I noticed that if you push a dataset containing images which have been loaded in from filepaths by pillow the version on the hub won‚Äôt have the images attached. If you always have the image files in the same place when you work with the dataset then this doesn‚Äôt matter. If you want to have the images stored in the parquet file(s) associated with the dataset we need to load it without the filename attribute present (there might be another way of ensuring that datasets doesn‚Äôt rely on the image file being on the file system ‚Äì if you of this I‚Äôd love to hear about it).</p>
<p>Since we loaded our images this way when we download the dataset from the hub onto a different machine we have the images already there ü§ó</p>
<p>For now we‚Äôll push the dataset to the hub and keep them private initially.</p>
<div id="cell-53" class="cell" data-outputid="295bb27d-1a4d-4eaa-ef37-0f68dcf0ce30">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1">dataset.push_to_hub(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'davanstrien/embellishments'</span>, private<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>The repository already exists: the `private` keyword argument will be ignored.</code></pre>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"4fbfa1ffe1ab4148b85d38e072e055ac","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"c928b86884ff4d309db2fa823c9728cd","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
</div>
<section id="switching-machines" class="level3">
<h3 class="anchored" data-anchor-id="switching-machines">Switching machines</h3>
<p>At this point I‚Äôve created a dataset and moved it to the huggingface hub. This means it is possible to pickup the work/dataset elsewhere.</p>
<p>In this particular example, having access to a GPU is important. So the next parts of this notebook are run on Colab instead of locally on my laptop.</p>
<p>We‚Äôll need to login since the dataset is currently private.</p>
<div id="cell-56" class="cell" data-outputid="05adf2e1-d9fe-4880-8943-fbaf2d91a225">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>huggingface<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>cli login</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
        _|    _|  _|    _|    _|_|_|    _|_|_|  _|_|_|  _|      _|    _|_|_|      _|_|_|_|    _|_|      _|_|_|  _|_|_|_|
        _|    _|  _|    _|  _|        _|          _|    _|_|    _|  _|            _|        _|    _|  _|        _|
        _|_|_|_|  _|    _|  _|  _|_|  _|  _|_|    _|    _|  _|  _|  _|  _|_|      _|_|_|    _|_|_|_|  _|        _|_|_|
        _|    _|  _|    _|  _|    _|  _|    _|    _|    _|    _|_|  _|    _|      _|        _|    _|  _|        _|
        _|    _|    _|_|      _|_|_|    _|_|_|  _|_|_|  _|      _|    _|_|_|      _|        _|    _|    _|_|_|  _|_|_|_|

        To login, `huggingface_hub` now requires a token generated from https://huggingface.co/settings/token.
        (Deprecated, will be removed in v0.3.0) To login with username and password instead, interrupt with Ctrl+C.
        
Token: 
Login successful
Your token has been saved to /root/.huggingface/token
Authenticated through git-credential store but this isn't the helper defined on your machine.
You might have to re-authenticate when pushing to the Hugging Face Hub. Run the following command in your terminal in case you want to set this credential helper as the default

git config --global credential.helper store</code></pre>
</div>
</div>
<p>Once we‚Äôve done this we can load our dataset</p>
<div id="cell-58" class="cell" data-outputid="8af3b6de-9544-4526-ba6d-dd1d658ab16c">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> datasets <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> load_dataset</span>
<span id="cb42-2"></span>
<span id="cb42-3">dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> load_dataset(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"davanstrien/embellishments"</span>, use_auth_token<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"96f3435b6eb04ac9b2dd67c6991f1f26","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Using custom data configuration davanstrien--embellishments-543da8e15e8f0242</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Downloading and preparing dataset None/None (download: 2.38 GiB, generated: 2.50 GiB, post-processed: Unknown size, total: 4.88 GiB) to /root/.cache/huggingface/datasets/parquet/davanstrien--embellishments-543da8e15e8f0242/0.0.0/1638526fd0e8d960534e2155dc54fdff8dce73851f21f031d2fb9c2cf757c121...</code></pre>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"f5a559e181874ab091228093eac25fbf","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"09d9b91331e740ea8d434e5d80a14567","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"8f63d031f9ed427fad496552bb7c0ded","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"83fd196acbcf46ed8aea59433dd67cdd","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"0db6b61c355f458d92536a6af4d6616f","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"ad0bfe20f61d4724971bbde37caf57e0","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"76de503dfd77469dab6833c4c07bb5e3","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"b05894d2e30d496f8247b2cc98caa5ee","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Dataset parquet downloaded and prepared to /root/.cache/huggingface/datasets/parquet/davanstrien--embellishments-543da8e15e8f0242/0.0.0/1638526fd0e8d960534e2155dc54fdff8dce73851f21f031d2fb9c2cf757c121. Subsequent calls will reuse this data.</code></pre>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"5a60daf7e62047f49a97fc097c70847a","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
</div>
</section>
</section>
<section id="creating-embeddings" class="level2">
<h2 class="anchored" data-anchor-id="creating-embeddings">Creating embeddings üï∏</h2>
<p>We now have a dataset with a bunch of images in it. To begin creating our image search app we need to create some embeddings for these images. There are various ways in which we can try and do this but one possible way is to use the clip models via the <code>sentence_transformers</code> library. The <a href="https://openai.com/blog/clip/">clip model</a> from OpenAI learns a joint representation for both images and text which is very useful for what we want to do since we want to be able to input text and get back an image. We can download the model using the <code>SentenceTransformer</code> class.</p>
<div id="cell-61" class="cell" data-outputid="e80fd303-bbc0-4c96-e8f0-8da5ea232872">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb46-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sentence_transformers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> SentenceTransformer, util</span>
<span id="cb46-2"></span>
<span id="cb46-3">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> SentenceTransformer(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'clip-ViT-B-32'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"c971c7984fdf4bebbdf804cb73715426","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"a30d69b047e240898db50e63180708d4","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"e8c0f5c168dd45d18c34de4bb87f661b","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"8487d947a13f4c74a4e254f96036ef99","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"b1ebd3b563174b3a98b005fff4cb61d5","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"53230cf064d742c2a5e79d378b2d23ff","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"b6f33c98f6944aa2a3002f0ce15aeb3b","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"16508b7e566449ce9d936b52e79ab990","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"60c247f1a91343099a13b356355b5e07","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"431ca675dacc48b386c39cadb2212aec","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"d9fe6ba9cf5c47afa4b6c6f3dbe6d36e","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>ftfy or spacy is not installed using BERT BasicTokenizer instead of ftfy.</code></pre>
</div>
</div>
<p>This model will encode either an image or some text returning an embedding. We can use the <code>map</code> method to encode all our images.</p>
<div id="cell-63" class="cell" data-outputid="f8562085-ff2e-408c-f4d0-fbce2e96a439">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb48-1">ds_with_embeddings <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dataset.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(</span>
<span id="cb48-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> example: {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'embeddings'</span>:model.encode(example[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'img'</span>],device<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cuda'</span>)},</span>
<span id="cb48-3">                                 batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"1a77b866276144a9ac3d1a688addfc4a","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
</div>
<p>We can ‚Äúsave‚Äù our work by pushing back to the hub</p>
<div id="cell-65" class="cell" data-outputid="f27112b7-b8a1-4bdf-bc32-de07a2a541de">
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb49-1">ds_with_embeddings.push_to_hub(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'davanstrien/embellishments'</span>, private<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Pushing split train to the Hub.
The repository already exists: the `private` keyword argument will be ignored.</code></pre>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"614984538d934969aa8f68b7aade3a18","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"6ac3cc152f434bbe919257792cd00fa6","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
</div>
<p>If we were to move to a different machine we could grab our work again by loading it from the hub üòÉ</p>
<div id="cell-67" class="cell" data-outputid="e54e8fa9-824a-4756-8dd6-80fce315bcc0">
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb51-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> datasets <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> load_dataset</span>
<span id="cb51-2"></span>
<span id="cb51-3">ds_with_embeddings <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> load_dataset(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"davanstrien/embellishments"</span>, use_auth_token<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"c15fffebe87845fd8f426b9d6775da4c","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Using custom data configuration davanstrien--embellishments-c2c1f142f272db02</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Downloading and preparing dataset None/None (download: 3.19 GiB, generated: 3.30 GiB, post-processed: Unknown size, total: 6.49 GiB) to /root/.cache/huggingface/datasets/parquet/davanstrien--embellishments-c2c1f142f272db02/0.0.0/1638526fd0e8d960534e2155dc54fdff8dce73851f21f031d2fb9c2cf757c121...</code></pre>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"9b5a67c678624ada82b1f43bd85cbad3","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"03c71b0394184429b072881de62c9bc9","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"a5a937e3811843c58ef8cbc7038c152a","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"edfc66b68dc44850abdeb8942fc1347d","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"211b53f1da634031918d2f8dbbde7e2a","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"29f8738874104b5897108e1c30520dad","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"c78c5a0d1e9a4f98817dc321082dc343","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"f33f7a22a5a845608a8a0f0738cbdf8c","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"5f36b94410f845f49b9f9cf8f1bdb28e","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Dataset parquet downloaded and prepared to /root/.cache/huggingface/datasets/parquet/davanstrien--embellishments-c2c1f142f272db02/0.0.0/1638526fd0e8d960534e2155dc54fdff8dce73851f21f031d2fb9c2cf757c121. Subsequent calls will reuse this data.</code></pre>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"0f67199b970b41ed87e54badd39b58fd","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
</div>
<p>We now have a new column which contains the embeddings for our images. We could manually search through these and compare it to some input embedding but datasets has an <code>add_faiss_index</code> method. This uses the <a href="https://github.com/facebookresearch/faiss">faiss</a> library to create an efficient index for searching embeddings. For more background on this library you can watch this youtube video</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/sKyvsdEv6rk" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="">
</iframe>
<div id="cell-70" class="cell" data-outputid="5c78ca43-31fd-436e-e45d-e431cc7fc894">
<div class="sourceCode cell-code" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb55-1">ds_with_embeddings[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train'</span>].add_faiss_index(column<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'embeddings'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"5a61b1a0197144daae9d85ac9a147a0a","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display" data-execution_count="4">
<pre><code>Dataset({
    features: ['fname', 'year', 'path', 'img', 'embeddings'],
    num_rows: 416935
})</code></pre>
</div>
</div>
</section>
<section id="image-search" class="level2">
<h2 class="anchored" data-anchor-id="image-search">Image search</h2>
<p>We now have everything we need to create a simple image search. We can use the same model we used to encode our images to encode some input text. This will act as the prompt we try and find close examples for. Let‚Äôs start with ‚Äòa steam engine‚Äô.</p>
<div id="cell-72" class="cell">
<div class="sourceCode cell-code" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb57-1">prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.encode(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A steam engine"</span>)</span></code></pre></div>
</div>
<p>We can see what this looks like</p>
<div id="cell-74" class="cell" data-outputid="21aed757-c73a-41c2-8a0b-779b5e4df88b">
<div class="sourceCode cell-code" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb58-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#collapse_output</span></span>
<span id="cb58-2">prompt</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="11">
<pre><code>array([-4.68399227e-02, -1.25237599e-01,  1.25164926e-01,  1.23583399e-01,
        5.36684394e-02, -2.80560672e-01,  2.89631691e-02, -9.63450074e-01,
       -1.52872965e-01, -3.83016393e-02,  9.01967064e-02, -5.84575422e-02,
        1.04646191e-01,  2.44443744e-01,  1.38233244e-01, -3.97525132e-02,
        4.35137331e-01, -4.26820181e-02, -8.48560631e-02, -6.94137365e-02,
        6.25562131e-01,  3.68572891e-01,  3.34365219e-01, -3.37864846e-01,
       -2.53632635e-01, -3.01467925e-01, -1.56484097e-01,  2.94869483e-01,
       -1.89204350e-01, -1.13111593e-01, -1.46938376e-02,  2.97405511e-01,
       -2.92487741e-01,  3.56931627e-01,  1.44009173e-01,  7.53008351e-02,
       -1.02462962e-01,  2.26309776e-01, -3.77506733e-01,  4.75439876e-02,
       -8.52131844e-03,  7.40285963e-03, -1.36876494e-01,  1.12041593e-01,
        3.65501434e-01, -9.37360153e-02,  1.00782610e-01, -3.86462212e-01,
       -1.39045209e-01, -2.31989667e-01, -2.62126565e-01,  8.75059143e-02,
       -9.87479314e-02,  7.31039718e-02, -5.99793851e-01, -5.31058311e-01,
        1.46116272e-01,  1.58094600e-01, -5.31955510e-02,  1.91384852e-01,
        1.16943717e-01, -4.84316409e-01, -1.38332695e-01,  1.76510841e-01,
       -2.17938051e-01, -1.00890748e-01, -4.45051998e-01,  2.71521568e-01,
       -1.12926617e-01, -3.37198257e-01, -1.34169117e-01, -7.38745630e-02,
       -1.23398125e-01,  3.62316787e-01,  9.09636840e-02, -3.20305794e-01,
        5.82561374e-01, -3.51719618e-01, -1.05368085e-02, -3.90766770e-01,
       -3.18382740e-01,  5.37567735e-02, -6.24650240e-01,  2.18755245e-01,
        3.51645321e-01, -3.01214606e-02, -8.49011913e-02, -3.29971045e-01,
        2.13861912e-01, -1.10820271e-02, -3.52595486e-02, -3.70746814e-02,
       -1.35805202e+00,  3.35692495e-01, -2.83742435e-02, -1.39813796e-01,
        3.66676860e-02,  2.62957454e-01,  2.52151459e-01, -6.14355244e-02,
        2.01516539e-01, -4.14117992e-01, -2.58466527e-02,  1.06067717e-01,
        3.14981639e-02, -1.45749748e-02, -5.94865866e-02,  2.55122900e-01,
       -3.30369681e-01,  6.39781356e-04,  1.65513411e-01,  7.37893358e-02,
       -4.69729975e-02,  3.36943477e-01,  4.38236594e-02, -4.21047479e-01,
       -1.14590853e-01,  1.49240956e-01,  1.34405270e-01,  3.97198983e-02,
       -1.20852023e-01, -7.22009778e-01,  1.17442548e-01, -7.35135227e-02,
        5.45979321e-01,  1.76602621e-02,  6.59747049e-02,  8.00846070e-02,
        3.87920737e-01, -3.57501693e-02,  1.19425125e-01, -2.89906412e-01,
       -2.84183323e-02,  5.73142338e+00,  1.24172762e-01, -1.59575850e-01,
       -5.33452034e-02, -1.77120879e-01,  2.14188576e-01, -3.49292234e-02,
       -4.76958305e-02, -1.05941862e-01, -1.58911452e-01,  1.87136307e-02,
       -2.16531213e-02,  1.37230158e-01,  4.62583750e-02,  2.19857365e-01,
        3.41235586e-02, -3.29913348e-02,  9.88523886e-02, -1.30611554e-01,
       -1.53349772e-01,  2.20886514e-01,  1.53534949e-01, -4.27889526e-01,
       -4.12531018e-01,  2.70397663e-01,  1.88448757e-01,  4.66853082e-02,
        2.63707846e-01, -9.56512764e-02, -3.26435685e-01, -1.24463499e-01,
        4.49354291e-01, -4.17843968e-01, -5.27932420e-02, -1.28314078e-01,
       -1.19249836e-01, -1.19294032e-01,  3.73742878e-01,  2.07954675e-01,
       -1.41953439e-01,  3.89361024e-01, -1.99988037e-01,  3.62350583e-01,
       -8.77851099e-02, -1.08132876e-01, -9.82177258e-03,  1.80039972e-01,
        1.35815665e-02,  3.20201695e-01, -1.74580999e-02, -1.08204901e-01,
       -2.29793668e-01, -2.09628209e-01,  4.13929313e-01, -1.73814282e-01,
       -4.10574347e-01, -1.59104809e-01, -6.01581074e-02,  6.22577034e-02,
       -3.67693931e-01,  1.85215116e-01, -2.03229636e-01, -8.92911255e-02,
       -4.25831258e-01, -1.45366028e-01,  2.45514482e-01, -1.65927559e-01,
       -2.54413635e-02, -2.91361034e-01, -8.33243579e-02, -4.79405448e-02,
        6.35769814e-02,  8.04642588e-02,  5.31384498e-02,  2.50850171e-02,
       -8.98692310e-02,  4.97757077e-01,  6.37893498e-01, -2.58815974e-01,
        4.14507166e-02,  9.45882648e-02, -9.01474580e-02, -9.18833911e-02,
       -2.48883665e-01,  9.16991904e-02, -2.93194801e-01, -1.49350330e-01,
        7.20755905e-02, -9.76985693e-03, -4.70465049e-02, -2.78597653e-01,
       -7.63949528e-02, -3.14843357e-01,  3.18657011e-01, -3.06758255e-01,
       -2.06573829e-01, -2.20574200e-01,  1.81351285e-02,  2.57636189e-01,
        2.39799708e-01, -2.31798366e-01, -8.34087562e-03,  6.13241374e-01,
       -2.10393399e-01,  2.52263397e-01,  1.66839644e-01, -2.71174073e-01,
        2.31348664e-01,  1.15150154e-01,  2.23357946e-01,  1.37287825e-01,
       -8.56669843e-02,  3.43877286e-01, -1.09687179e-01,  3.24211985e-01,
       -4.53893900e-01, -2.30711773e-01, -2.48840563e-02,  1.80964172e-01,
        4.73472506e-01,  5.22104502e-01,  9.96741354e-02,  1.87694326e-01,
        2.41730541e-01, -2.78556377e-01,  7.48419687e-02,  2.80560136e-01,
       -1.25464931e-01,  1.51028201e-01,  1.39490321e-01,  5.16689643e-02,
        5.30310348e-02,  1.61938250e-01,  3.72225225e-01, -4.49403644e-01,
        1.19608052e-01,  2.43661910e-01,  9.89501849e-02,  2.74168640e-01,
        4.84039634e-02, -1.19901955e-01, -1.57916725e-01, -2.20868304e-01,
        1.03498720e-01,  3.99750322e-01,  1.03758566e-01,  8.08660090e-02,
        1.68566346e-01, -3.42532575e-01,  2.51480471e-02,  1.23976640e-01,
       -2.10433707e-01,  2.81242996e-01,  2.39082754e-01,  2.01786831e-02,
        4.61297363e-01,  5.62884361e-02,  2.15039015e-01, -1.65275872e-01,
        1.01690084e-01, -4.50959802e-03, -4.46137577e-01,  4.31368239e-02,
       -4.51804757e-01, -2.26415813e-01,  1.31732523e-01, -2.00945437e-02,
        1.77461311e-01, -1.64631978e-02,  4.40553159e-01,  1.41214132e-01,
        3.42677176e-01, -2.23303795e-01, -2.10693538e-01,  1.94943929e-03,
       -2.33348235e-01,  4.64889407e-03,  5.71020804e-02,  1.99669391e-01,
        5.72273111e+00, -2.95036316e-01, -5.13455391e-01,  1.87334672e-01,
        4.09545094e-01, -7.09135592e-01,  1.89325869e-01, -6.14660345e-02,
        3.29098284e-01,  2.82059342e-01,  3.48631829e-01, -9.74263549e-02,
       -4.83064592e-01, -1.35906041e-04,  3.44773471e-01, -3.56532484e-01,
        5.36619090e-02, -1.85481656e+00,  3.87955368e-01, -1.83132842e-01,
       -1.34021699e-01, -1.84214741e-01,  6.85371086e-02,  1.10808179e-01,
       -6.64586425e-02,  6.85550272e-02,  1.81145087e-01, -2.15605676e-01,
       -1.09192222e-01, -7.09795505e-02,  1.77813157e-01, -2.76037157e-01,
        2.19184965e-01, -3.35977226e-01,  1.01434961e-01,  4.24576849e-02,
        6.37579709e-04, -1.23296835e-01, -6.84914351e-01,  5.02923191e-01,
        2.19384342e-01,  4.92008686e-01, -1.94621727e-01, -2.48740703e-01,
       -1.32586688e-01, -1.77171156e-02, -4.71081585e-03,  1.58246011e-01,
       -3.27363521e-01, -3.30681592e-01, -2.68038437e-02, -1.85811728e-01,
       -1.84623767e-02, -3.22798610e-01,  3.07092518e-01,  1.06014945e-01,
        3.20541680e-01, -2.55453944e-01, -2.30755419e-01, -1.19963072e-01,
       -2.04865620e-01,  4.02828932e-01, -3.01321566e-01,  4.01021272e-01,
       -3.02002877e-01,  1.42853945e-01,  2.94484437e-01, -2.06042349e-01,
       -3.03069353e-01, -2.83185482e-01, -1.03388466e-02, -1.03018671e-01,
        4.25990820e-02, -2.94244856e-01,  3.19168091e-01,  3.89839858e-02,
       -1.95185751e-01, -9.88216847e-02, -4.01682496e-01,  4.60841119e-01,
        1.40236557e-01,  1.49914265e-01, -4.25037295e-01,  2.63067722e-01,
        1.31706342e-01,  3.21884871e-01, -2.39963964e-01,  4.01636630e-01,
       -2.55293436e-02, -7.36447945e-02, -8.34826380e-03,  1.11923724e-01,
       -2.71807779e-02, -3.35412771e-02,  2.33933121e-01,  3.33954431e-02,
        3.56481314e-01, -8.09433609e-02, -1.82573602e-01,  1.75429478e-01,
       -3.23554099e-01,  9.15928558e-03,  1.54344559e-01,  2.50909716e-01,
        1.45193070e-01,  2.48686507e-01, -9.65276286e-02, -2.73654372e-01,
        5.46456315e-02,  1.83476061e-02, -1.61773548e-01, -2.97708124e-01,
       -1.74462572e-01, -1.14246726e-01,  2.32043359e-02,  1.98346555e-01,
        2.31929243e-01, -9.74937603e-02, -2.26448864e-01, -6.31427839e-02,
        2.23113708e-02, -3.72859359e-01,  2.47197479e-01, -3.65516663e-01,
       -3.24409932e-01,  1.83964625e-01, -3.17104161e-03, -2.66632497e-01,
       -1.86478943e-01,  1.11006252e-01, -3.93829793e-02, -3.11926544e-01,
        2.88751245e-01,  2.66543150e-01, -1.74334750e-01, -4.89967108e-01,
        3.38638097e-01,  2.47487854e-02, -3.66539627e-01,  5.78703731e-03,
        1.11349493e-01, -2.60909855e-01, -4.34429348e-02, -4.47440267e-01,
        2.80311018e-01, -6.46181554e-02, -2.93976814e-02, -3.02857161e-01,
        2.10391358e-03, -3.70345414e-02,  7.15476647e-02,  4.39802915e-01,
        2.11817563e-01,  6.87709302e-02,  5.68117499e-01, -2.40518659e-01,
        2.59056687e-01, -1.32284269e-01,  1.28509507e-01, -1.94875181e-01,
       -2.68568173e-02, -7.85035193e-02, -2.49556839e-01,  1.44016743e-01,
       -2.98127495e-02, -1.41643599e-01,  1.77106410e-02,  1.83453292e-01,
       -1.39113069e-02, -1.97993904e-01,  3.07995021e-01,  3.31339300e-01,
        2.07652867e-01,  1.27762616e-01,  2.26422980e-01,  1.94940835e-01,
       -4.90801185e-02, -5.35061479e-01, -2.99495637e-01,  3.68627608e-02,
       -4.15636569e-01,  6.44698918e-01, -4.50457260e-02,  7.05935210e-02,
       -1.11036956e-01, -1.42384216e-01, -7.05560222e-02,  2.86495592e-03,
        3.45641613e-01, -5.66974521e-01, -1.34682715e-01, -2.59017110e-01,
        3.27597320e-01,  1.04890786e-01, -3.11988890e-01, -2.32627541e-01,
        3.14653963e-02,  2.76591361e-01,  1.66302443e-01, -2.39517853e-01],
      dtype=float32)</code></pre>
</div>
</div>
<p>We can use another method from the datasets library <code>get_nearest_examples</code> to get images which have an embedding close to our input prompt embedding. We can pass in a number of results we want to get back.</p>
<div id="cell-76" class="cell">
<div class="sourceCode cell-code" id="cb60" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb60-1">scores, retrieved_examples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ds_with_embeddings[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train'</span>].get_nearest_examples(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'embeddings'</span>, prompt,k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)</span></code></pre></div>
</div>
<p>We can index into the first example this retrieves:</p>
<div id="cell-78" class="cell" data-outputid="5705becd-6493-4fc9-cb7e-9ed7cccca1fa">
<div class="sourceCode cell-code" id="cb61" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb61-1">retrieved_examples[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'img'</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="14">
<div>
<figure class="figure">
<p><img src="https://danielvanstrien.xyz/posts/post-with-code/2022-01-13-image_search_files/figure-html/cell-41-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>This isn‚Äôt quite a steam engine but it‚Äôs also not a completely weird result. We can plot the other results to see what was returned.</p>
<div id="cell-80" class="cell">
<div class="sourceCode cell-code" id="cb62" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb62-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span></code></pre></div>
</div>
<div id="cell-81" class="cell" data-outputid="6b5e5519-686b-4cc1-b256-d1f5a2cbc3a9">
<div class="sourceCode cell-code" id="cb63" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb63-1">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>))</span>
<span id="cb63-2">columns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb63-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>):</span>
<span id="cb63-4">    image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> retrieved_examples[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'img'</span>][i]</span>
<span id="cb63-5">    plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> columns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, columns, i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb63-6">    plt.imshow(image)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://danielvanstrien.xyz/posts/post-with-code/2022-01-13-image_search_files/figure-html/cell-43-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Some of these results look fairly close to our input prompt. We can wrap this in a function so can more easily play around with different prompts</p>
<div id="cell-83" class="cell" data-execution_count="35">
<div class="sourceCode cell-code" id="cb64" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb64-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_image_from_text(text_prompt, number_to_retrieve<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>):</span>
<span id="cb64-2">    prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.encode(text_prompt)</span>
<span id="cb64-3">    scores, retrieved_examples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ds_with_embeddings[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train'</span>].get_nearest_examples(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'embeddings'</span>, prompt,k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>number_to_retrieve)</span>
<span id="cb64-4">    plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>))</span>
<span id="cb64-5">    columns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb64-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>):</span>
<span id="cb64-7">        image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> retrieved_examples[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'img'</span>][i]</span>
<span id="cb64-8">        plt.title(text_prompt)</span>
<span id="cb64-9">        plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> columns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, columns, i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb64-10">        plt.imshow(image)</span></code></pre></div>
</div>
<div id="cell-84" class="cell" data-outputid="3b983b20-4bec-4c18-a8b3-09b2e85f3a4a" data-execution_count="36">
<div class="sourceCode cell-code" id="cb65" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb65-1">get_image_from_text(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"An illustration of the sun behind a mountain"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://danielvanstrien.xyz/posts/post-with-code/2022-01-13-image_search_files/figure-html/cell-45-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<section id="trying-a-bunch-of-prompts" class="level3">
<h3 class="anchored" data-anchor-id="trying-a-bunch-of-prompts">Trying a bunch of prompts ‚ú®</h3>
<p>Now we have a function for getting a few results we can try a bunch of different prompts:</p>
<ul>
<li><p>For some of these I‚Äôll choose prompts which are a broad ‚Äòcategory‚Äô i.e.&nbsp;‚Äòa musical instrument‚Äô or ‚Äòan animal‚Äô, others are specific i.e.&nbsp;‚Äòa guitar‚Äô.</p></li>
<li><p>Out of interest I also tried a boolean operator: ‚ÄúAn illustration of a cat or a dog‚Äù.</p></li>
<li><p>Finally I tried something a little more abstract: ‚Äúan empty abyss‚Äù</p></li>
</ul>
<div id="cell-86" class="cell" data-execution_count="41">
<div class="sourceCode cell-code" id="cb66" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb66-1">prompts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A musical instrument"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A guitar"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"An animal"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"An illustration of a cat or a dog"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"an empty abyss"</span>]</span></code></pre></div>
</div>
<div id="cell-87" class="cell" data-outputid="4a933a15-70af-4f6e-c0cb-cc28d4ac3c0e" data-execution_count="42">
<div class="sourceCode cell-code" id="cb67" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb67-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> prompt <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> prompts:</span>
<span id="cb67-2">    get_image_from_text(prompt)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://danielvanstrien.xyz/posts/post-with-code/2022-01-13-image_search_files/figure-html/cell-47-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://danielvanstrien.xyz/posts/post-with-code/2022-01-13-image_search_files/figure-html/cell-47-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://danielvanstrien.xyz/posts/post-with-code/2022-01-13-image_search_files/figure-html/cell-47-output-3.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://danielvanstrien.xyz/posts/post-with-code/2022-01-13-image_search_files/figure-html/cell-47-output-4.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://danielvanstrien.xyz/posts/post-with-code/2022-01-13-image_search_files/figure-html/cell-47-output-5.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>We can see these results aren‚Äôt always right but they are usually some reasonable results in there. It already seems like this could be useful for searching for a the semantic content of an image in this dataset. However we might hold off on sharing this as is‚Ä¶</p>
</section>
</section>
<section id="creating-a-huggingface-space" class="level2">
<h2 class="anchored" data-anchor-id="creating-a-huggingface-space">Creating a huggingface space? ü§∑üèº</h2>
<p>One obvious next step for this kind of project is to create a hugginface <a href="https://huggingface.co/spaces">spaces</a> demo. This is what I‚Äôve done for other <a href="https://huggingface.co/spaces/BritishLibraryLabs/British-Library-books-genre-classifier-v2">models</a></p>
<p>It was a fairly simple process to get a <a href="https://gradio.app/">Gradio app setup</a> from the point we got to here. Here is a screenshot of this app.</p>
<p><img src="https://danielvanstrien.xyz/posts/images/spaces_image_search.png" class="img-fluid"></p>
<p>However, I‚Äôm a little bit vary about making this public straightaway. Looking at the model card for the CLIP model we can look at the primary intended uses:</p>
<blockquote class="blockquote">
<h3 id="primary-intended-uses" class="anchored">Primary intended uses</h3>
<p>We primarily imagine the model will be used by researchers to better understand robustness, generalization, and other capabilities, biases, and constraints of computer vision models. <a href="https://huggingface.co/openai/clip-vit-base-patch32">source</a></p>
</blockquote>
<p>This is fairly close to what we are interested in here. Particularly we might be interested in how well the model deals with the kinds of images in our dataset (illustrations from mostly 19th century books). The images in our dataset are (probably) fairly different from the training data. The fact that some of the images also contain text might help CLIP since it displays some <a href="https://openai.com/blog/clip/">OCR ability</a>.</p>
<p>However, looking at the out-of-scope use cases in the model card:</p>
<blockquote class="blockquote">
<h3 id="out-of-scope-use-cases" class="anchored">Out-of-Scope Use Cases</h3>
<p>Any deployed use case of the model - whether commercial or not - is currently out of scope. Non-deployed use cases such as image search in a constrained environment, are also not recommended unless there is thorough in-domain testing of the model with a specific, fixed class taxonomy. This is because our safety assessment demonstrated a high need for task specific testing especially given the variability of CLIP‚Äôs performance with different class taxonomies. This makes untested and unconstrained deployment of the model in any use case currently potentially harmful. <a href="https://huggingface.co/openai/clip-vit-base-patch32">source</a></p>
</blockquote>
<p>suggests that ‚Äòdeployment‚Äô is not a good idea. Whilst the results I got are interesting I haven‚Äôt played around with the model enough yet (and haven‚Äôt done anything more systematic to evaluate its performance and biases). Another additional consideration is the target dataset itself. The images are drawn from books covering a variety of subjects and time periods. There are plenty of books which represent colonial attitudes and as a result some of the images included may represent certain groups of people in a negative way. This could potentially be a bad combo with a tool which allows any arbitrary text input to be encoded as a prompt.</p>
<p>There may be ways around this issue but this will require a bit more thought.</p>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>Although I don‚Äôt have a nice demo to show for it I did get to work out a few more details of how datasets handles images. I‚Äôve already used it to train some classification models and everything seems to be working smoothly. The ability to push images around on the hub will be super useful for many use cases too.</p>
<p>I plan to spend a bit more time thinking about whether there is a better way of sharing a clip powered image search for the BL book images or not‚Ä¶</p>
<p>{{ ‚ÄúIf you aren‚Äôt familiar with datasets. A feature represents the datatype for different data you can have inside a dataset. For example you my have int32, timestamps and strings. You can read more about how features work in the docs‚Äù | fndetail: 1}}</p>


</section>

 ]]></description>
  <guid>https://danielvanstrien.xyz/posts/post-with-code/2022-01-13-image_search.html</guid>
  <pubDate>Thu, 13 Jan 2022 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Using the ü§ó Hub for model storage</title>
  <dc:creator>Daniel van Strien</dc:creator>
  <link>https://danielvanstrien.xyz/posts/post-with-code/2021-12-30-hf-hub-model-storage.html</link>
  <description><![CDATA[ 




<section id="intro" class="level2">
<h2 class="anchored" data-anchor-id="intro">Intro</h2>
<p>Part of what the <a href="https://danielvanstrien.xyz/deployment/glam/%F0%9F%A4%97/2021/12/22/flyswot.html">flyswot</a> should take care of is handle machine learning models. The flyswot tool is essentially just a command-line wrapper for the machine learning model. However, these two things the command-line tool, and the model, are kept separate for a number of reasons:</p>
<ul>
<li>the flyswot tool might have changes separate from the model changing i.e.&nbsp;some new functionality is added or some bug fixed</li>
<li>we might want to update the model based on new training data or a change in the labels used</li>
</ul>
<p>We want to be able to release a new model without having to create a new release of the flyswot tool and vice-versa. As a result of this, both of these things are versioned separately.</p>
<p>We might want to keep our model separate because flyswot is made available as a Python Package. Since a computer vision model can be pretty large, we probably don‚Äôt want this to be included as a part of the Python package.</p>
</section>
<section id="how-is-this-currently-being-done" class="level2">
<h2 class="anchored" data-anchor-id="how-is-this-currently-being-done">How is this currently being done</h2>
<p>Currently models are stored in a separate GitHub repository separate from the repository used to store the flyswot code. flyswot has some functionality for checking against this GitHub repository to see if a more recent remote model has superseded a local model. If there is a more recent model available (and a CLI flag indicates that the latest model should be used), then flyswot downloads the new model and stores it in a new directory.</p>
</section>
<section id="what-is-wrong-with-this" class="level2">
<h2 class="anchored" data-anchor-id="what-is-wrong-with-this">What is wrong with this</h2>
<p>Whilst this approach does work okay there is quite a surprising amount of code that is needed to take care of some of this. Currently the option to pass a specific snapshot of a model doesn‚Äôt exist.</p>
<p>On the storage side although GitHub is great for storing code there are some limitations to it for storing large files. I‚Äôve created a GitHub action to create a release when new pull requests to update the model are made. This then creates a new release with date information in the filename. Again, this works okay, but there might be a better way‚Ä¶</p>
</section>
<section id="hub-to-the-rescue" class="level2">
<h2 class="anchored" data-anchor-id="hub-to-the-rescue">ü§ó hub to the rescue?</h2>
<p>I have already been using the huggingface hub when using other peoples models and uploading fine-tuned transformer models. However, digging around the docs, it seemed like there are a few things in this ecosystem that could be useful for flyswot.</p>
<section id="what-is-the-hub" class="level3">
<h3 class="anchored" data-anchor-id="what-is-the-hub">What is the ü§ó hub?</h3>
<p>If you haven‚Äôt come across the ü§ó hub before, it is essentially a place where models can be uploaded and explored by others. So, for example, if I want a language model trained on Arabic text, I might find it in the hub. The goal is to help avoid duplication of effort and allow other people to use or adapt existing work.</p>
<p>This video gives a helpful overview of navigating the hub and finding models you might be interested in using.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/XvSGPZFEjDY" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="">
</iframe>
<p>Part of the aim of sharing the flyswot models on GitHub (or the ü§ó hub) is to make them available to other people to use. The ü§ó hub well supports this use case. We can easily share models (including large ones) because of the underpinning use of <a href="https://git-lfs.github.com/">git-lfs</a>. However, our interest is not only in sharing a model for others to use but also in grabbing the correct model for the flyswot CLI tool easier. Some other components might help here.</p>
</section>
</section>
<section id="the-hub-vs-huggingface_hub-library" class="level2">
<h2 class="anchored" data-anchor-id="the-hub-vs-huggingface_hub-library">The hub vs huggingface_hub library</h2>
<p>The ü§ó hub already provides a place to store the model. You can interact with this model using the web interface only but what we want is also to download models using our CLI from the hub. We already have a way to do this with GitHub, so ideally, we want something that works better than our current approach.</p>
<p>This is where the <a href="https://pypi.org/project/huggingface-hub/"><code>huggingface_hub</code></a> Python Library might come in. This Python library provides us with various ways of interacting with the hub. This could give us enough ways of interacting with the hub that we can delete some of the code that currently does this with GitHub (and there is nothing nicer than deleting code üòÉ)</p>
<p>I‚Äôll use the remainder of this blog to see if we can use the ü§ó hub and the <code>[</code>huggingface_hub<code>](https://pypi.org/project/huggingface-hub/)</code> library for this purpose as a replacement for the current approach.</p>
<p>We‚Äôll start by installing the <code>huggingface_hub</code> library</p>
<div id="cell-4" class="cell" data-outputid="4de4f1a6-5f11-4665-a202-9d8398a3dc99" data-execution_count="2">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># hide_output</span></span>
<span id="cb1-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>pip install huggingface_hub</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Requirement already satisfied: huggingface_hub in /Users/dvanstrien/miniconda3/envs/blog/lib/python3.8/site-packages (0.2.1)
Requirement already satisfied: requests in /Users/dvanstrien/miniconda3/envs/blog/lib/python3.8/site-packages (from huggingface_hub) (2.26.0)
Requirement already satisfied: pyyaml in /Users/dvanstrien/miniconda3/envs/blog/lib/python3.8/site-packages (from huggingface_hub) (6.0)
Requirement already satisfied: typing-extensions&gt;=3.7.4.3 in /Users/dvanstrien/miniconda3/envs/blog/lib/python3.8/site-packages (from huggingface_hub) (4.0.1)
Requirement already satisfied: tqdm in /Users/dvanstrien/miniconda3/envs/blog/lib/python3.8/site-packages (from huggingface_hub) (4.62.3)
Requirement already satisfied: filelock in /Users/dvanstrien/miniconda3/envs/blog/lib/python3.8/site-packages (from huggingface_hub) (3.4.0)
Requirement already satisfied: packaging&gt;=20.9 in /Users/dvanstrien/miniconda3/envs/blog/lib/python3.8/site-packages (from huggingface_hub) (21.3)
Requirement already satisfied: pyparsing!=3.0.5,&gt;=2.0.2 in /Users/dvanstrien/miniconda3/envs/blog/lib/python3.8/site-packages (from packaging&gt;=20.9-&gt;huggingface_hub) (3.0.6)
Requirement already satisfied: urllib3&lt;1.27,&gt;=1.21.1 in /Users/dvanstrien/miniconda3/envs/blog/lib/python3.8/site-packages (from requests-&gt;huggingface_hub) (1.26.7)
Requirement already satisfied: idna&lt;4,&gt;=2.5 in /Users/dvanstrien/miniconda3/envs/blog/lib/python3.8/site-packages (from requests-&gt;huggingface_hub) (3.1)
Requirement already satisfied: charset-normalizer~=2.0.0 in /Users/dvanstrien/miniconda3/envs/blog/lib/python3.8/site-packages (from requests-&gt;huggingface_hub) (2.0.8)
Requirement already satisfied: certifi&gt;=2017.4.17 in /Users/dvanstrien/miniconda3/envs/blog/lib/python3.8/site-packages (from requests-&gt;huggingface_hub) (2021.10.8)</code></pre>
</div>
</div>
</section>
<section id="getting-information-about-a-model" class="level2">
<h2 class="anchored" data-anchor-id="getting-information-about-a-model">Getting information about a model</h2>
<p>One of the things we need to be able to do is get the latest version of the model. One way we could try and do this is by grabbing metadata about the model. This is the current approach taken by flyswot. We can import <code>model_info</code> to do this:</p>
<div id="cell-6" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> huggingface_hub <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> model_info</span></code></pre></div>
</div>
<div id="cell-7" class="cell" data-outputid="b6875e50-a15c-4cdd-9c14-7d3cd5936c78" data-execution_count="12">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">info <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model_info(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"distilbert-base-cased"</span>)</span>
<span id="cb4-2">info</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="12">
<pre><code>ModelInfo: {
    modelId: distilbert-base-cased
    sha: 935ac13b473164bb9d578640e33d9f21144c365e
    lastModified: 2020-12-11T21:23:53.000Z
    tags: ['pytorch', 'tf', 'distilbert', 'en', 'dataset:bookcorpus', 'dataset:wikipedia', 'arxiv:1910.01108', 'transformers', 'license:apache-2.0', 'infinity_compatible']
    pipeline_tag: None
    siblings: [ModelFile(rfilename='.gitattributes'), ModelFile(rfilename='README.md'), ModelFile(rfilename='config.json'), ModelFile(rfilename='pytorch_model.bin'), ModelFile(rfilename='tf_model.h5'), ModelFile(rfilename='tokenizer.json'), ModelFile(rfilename='tokenizer_config.json'), ModelFile(rfilename='vocab.txt')]
    config: {'model_type': 'distilbert'}
    id: distilbert-base-cased
    private: False
    downloads: 3556770
    library_name: transformers
    mask_token: [MASK]
    likes: 4
    model-index: None
    cardData: {'language': 'en', 'license': 'apache-2.0', 'datasets': ['bookcorpus', 'wikipedia']}
}</code></pre>
</div>
</div>
<div id="cell-8" class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>(info)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="13">
<pre><code>huggingface_hub.hf_api.ModelInfo</code></pre>
</div>
</div>
<p>You can see this gives us back a bunch of information about the model. We could for example grab the date the model was changed:</p>
<div id="cell-10" class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">info.lastModified</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="15">
<pre><code>'2020-12-11T21:23:53.000Z'</code></pre>
</div>
</div>
<p>This already gives us what we need for checking if a model is updated in comparison to a local model already downloaded by the flyswot CLI. However we might be able to cut out some of this checking work.</p>
<p>Lets see if there are other ways we can do this in the library. Since <code>huggingface_hub</code> requires git-lfs lets start by installing this.</p>
<div id="cell-12" class="cell" data-outputid="961a93c1-5069-4289-b33d-86327078e598" data-execution_count="4">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>apt install git<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>lfs</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Reading package lists... Done
Building dependency tree       
Reading state information... Done
git-lfs is already the newest version (2.3.4-1).
0 upgraded, 0 newly installed, 0 to remove and 37 not upgraded.</code></pre>
</div>
</div>
<p>We also need to make sure we have git-lfs setup</p>
<div id="cell-14" class="cell" data-outputid="2a456be2-5ba1-45e0-c150-183affb99a67" data-execution_count="52">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>git init <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> git lfs install</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>hint: Using 'master' as the name for the initial branch. This default branch name
hint: is subject to change. To configure the initial branch name to use in all
hint: of your new repositories, which will suppress this warning, call:
hint: 
hint:   git config --global init.defaultBranch &lt;name&gt;
hint: 
hint: Names commonly chosen instead of 'master' are 'main', 'trunk' and
hint: 'development'. The just-created branch can be renamed via this command:
hint: 
hint:   git branch -m &lt;name&gt;
Initialized empty Git repository in /Users/dvanstrien/Documents/daniel/blog/_notebooks/.git/
Updated git hooks.
Git LFS initialized.</code></pre>
</div>
</div>
<section id="downloading-files-from-the-hub" class="level3">
<h3 class="anchored" data-anchor-id="downloading-files-from-the-hub">Downloading files from the hub</h3>
<p>We can use <code>hf_hub_url</code> to get the url for a specific file from a repository</p>
<div id="cell-17" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> huggingface_hub <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> hf_hub_url</span></code></pre></div>
</div>
<div id="cell-18" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">onnx_model_url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hf_hub_url(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"davanstrien/flyswot-test"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2021-09-22.onnx"</span>)</span>
<span id="cb15-2">onnx_model_url</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="9">
<pre><code>'https://huggingface.co/davanstrien/flyswot-test/resolve/main/2021-09-22.onnx'</code></pre>
</div>
</div>
<p>We can pass this url to <code>cached_download</code>, this will download the file for us if we don‚Äôt have the latest version, we can also specify a place to download the file. This is important so we can make sure we put the file somewhere <code>flyswot</code> can find.</p>
<div id="cell-20" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> huggingface_hub <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> cached_download</span></code></pre></div>
</div>
<div id="cell-21" class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">cached_download(onnx_model_url, cache_dir<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"."</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"cb383bfcbf25400daaa1ccf7b2115ae3","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display" data-execution_count="12">
<pre><code>'./de9d2ce054e3e410e3fc61b5c2ad55da7861d30e3b90aa018615b7d902e6e51e.1300a5792e44de2c59f4d25c4f7efd447ef91d69971a121e6b4df8b95047ad7c'</code></pre>
</div>
</div>
<p>If we try and download this again it won‚Äôt download, and will instead return the path to the model</p>
<div id="cell-23" class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cached_download(onnx_model_url, cache_dir<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"."</span>)</span>
<span id="cb20-2">path</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="14">
<pre><code>'./de9d2ce054e3e410e3fc61b5c2ad55da7861d30e3b90aa018615b7d902e6e51e.1300a5792e44de2c59f4d25c4f7efd447ef91d69971a121e6b4df8b95047ad7c'</code></pre>
</div>
</div>
</section>
<section id="downloading-all-files-from-the-hub" class="level3">
<h3 class="anchored" data-anchor-id="downloading-all-files-from-the-hub">Downloading all files from the hub</h3>
<p>This is quite close to what we want our current approach requires us to get a bunch of different files in a folder. To replicate this we can instead use <code>snapshot_download</code></p>
<div id="cell-26" class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> huggingface_hub <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> snapshot_download</span></code></pre></div>
</div>
<p>Let‚Äôs see what this does</p>
<div id="cell-28" class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">?snapshot_download</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="ansi-escaped-output">
<pre><span class="ansi-red-fg">Signature:</span>
snapshot_download<span class="ansi-blue-fg">(</span>
    repo_id<span class="ansi-blue-fg">:</span> str<span class="ansi-blue-fg">,</span>
    revision<span class="ansi-blue-fg">:</span> Union<span class="ansi-blue-fg">[</span>str<span class="ansi-blue-fg">,</span> NoneType<span class="ansi-blue-fg">]</span> <span class="ansi-blue-fg">=</span> <span class="ansi-green-fg">None</span><span class="ansi-blue-fg">,</span>
    cache_dir<span class="ansi-blue-fg">:</span> Union<span class="ansi-blue-fg">[</span>str<span class="ansi-blue-fg">,</span> pathlib<span class="ansi-blue-fg">.</span>Path<span class="ansi-blue-fg">,</span> NoneType<span class="ansi-blue-fg">]</span> <span class="ansi-blue-fg">=</span> <span class="ansi-green-fg">None</span><span class="ansi-blue-fg">,</span>
    library_name<span class="ansi-blue-fg">:</span> Union<span class="ansi-blue-fg">[</span>str<span class="ansi-blue-fg">,</span> NoneType<span class="ansi-blue-fg">]</span> <span class="ansi-blue-fg">=</span> <span class="ansi-green-fg">None</span><span class="ansi-blue-fg">,</span>
    library_version<span class="ansi-blue-fg">:</span> Union<span class="ansi-blue-fg">[</span>str<span class="ansi-blue-fg">,</span> NoneType<span class="ansi-blue-fg">]</span> <span class="ansi-blue-fg">=</span> <span class="ansi-green-fg">None</span><span class="ansi-blue-fg">,</span>
    user_agent<span class="ansi-blue-fg">:</span> Union<span class="ansi-blue-fg">[</span>Dict<span class="ansi-blue-fg">,</span> str<span class="ansi-blue-fg">,</span> NoneType<span class="ansi-blue-fg">]</span> <span class="ansi-blue-fg">=</span> <span class="ansi-green-fg">None</span><span class="ansi-blue-fg">,</span>
    proxies<span class="ansi-blue-fg">=</span><span class="ansi-green-fg">None</span><span class="ansi-blue-fg">,</span>
    etag_timeout<span class="ansi-blue-fg">=</span><span class="ansi-cyan-fg">10</span><span class="ansi-blue-fg">,</span>
    resume_download<span class="ansi-blue-fg">=</span><span class="ansi-green-fg">False</span><span class="ansi-blue-fg">,</span>
    use_auth_token<span class="ansi-blue-fg">:</span> Union<span class="ansi-blue-fg">[</span>bool<span class="ansi-blue-fg">,</span> str<span class="ansi-blue-fg">,</span> NoneType<span class="ansi-blue-fg">]</span> <span class="ansi-blue-fg">=</span> <span class="ansi-green-fg">None</span><span class="ansi-blue-fg">,</span>
    local_files_only<span class="ansi-blue-fg">=</span><span class="ansi-green-fg">False</span><span class="ansi-blue-fg">,</span>
<span class="ansi-blue-fg">)</span> <span class="ansi-blue-fg">-&gt;</span> str
<span class="ansi-red-fg">Docstring:</span>
Downloads a whole snapshot of a repo's files at the specified revision.
This is useful when you want all files from a repo, because you don't know
which ones you will need a priori.
All files are nested inside a folder in order to keep their actual filename
relative to that folder.
An alternative would be to just clone a repo but this would require that
the user always has git and git-lfs installed, and properly configured.
Note: at some point maybe this format of storage should actually replace
the flat storage structure we've used so far (initially from allennlp
if I remember correctly).
Return:
    Local folder path (string) of repo snapshot
<span class="ansi-red-fg">File:</span>      ~/miniconda3/envs/blog/lib/python3.8/site-packages/huggingface_hub/snapshot_download.py
<span class="ansi-red-fg">Type:</span>      function
</pre>
</div>
</div>
</div>
<p>This will do something similar to <code>cached_download</code> but will instead do it for a whole model repository. If we pass our repository it will download the directory if we don‚Äôt have the latest version of the files, if for example, the model has been updated.</p>
<div id="cell-30" class="cell" data-outputid="1a49a2ab-cfc2-4152-ba47-1d6d3baea79b" data-execution_count="20">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> snapshot_download(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"davanstrien/flyswot-test"</span>, cache_dir<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"."</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"1df0117a5aae4d19aad5f03405bcb4e7","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"65f1109ac93e4a35811f35c9acbccc57","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"411d2dd7b3404a93ab467f43c70ae08a","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"aad78730d8784a71a956a17ee5a245e8","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"d2d3100769774e16b3c70086b15d918d","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
</div>
<div id="cell-31" class="cell" data-execution_count="21">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">model</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="21">
<pre><code>'./davanstrien__flyswot-test.main.e54a7421f5e5eb240783452ab734288f252bb402'</code></pre>
</div>
</div>
<p>If we look inside this directory we can see we have the files from the repository.</p>
<div id="cell-33" class="cell" data-execution_count="22">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>ls {model}</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>2021-09-22.onnx README.md       modelcard.md    vocab.txt</code></pre>
</div>
</div>
<p>If we try and download it again we just get back the directory path without having to download the files again.</p>
<div id="cell-35" class="cell" data-execution_count="24">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> snapshot_download(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"davanstrien/flyswot-test"</span>, cache_dir<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"."</span>)</span>
<span id="cb29-2">model</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="24">
<pre><code>'./davanstrien__flyswot-test.main.e54a7421f5e5eb240783452ab734288f252bb402'</code></pre>
</div>
</div>
<p>This gives a replication of what we currently have setup for flyswot in terms of downloading models. There are a few extra things we might want though to be able to make flyswot more flexible. First though let‚Äôs look at how we can upload to the model hub.</p>
</section>
<section id="uploading-to-the-hub" class="level3">
<h3 class="anchored" data-anchor-id="uploading-to-the-hub">Uploading to the hub</h3>
<p>At the moment flyswot models are uploaded to a GitHub repository which then creates a release. It would be nice to simplify this and upload directly at the end of model training. For this we can use the <code>Repository</code> class.</p>
<div id="cell-38" class="cell" data-execution_count="30">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> huggingface_hub <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Repository</span></code></pre></div>
</div>
<div id="cell-39" class="cell" data-execution_count="29">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1">?Repository</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="ansi-escaped-output">
<pre><span class="ansi-red-fg">Init signature:</span>
Repository<span class="ansi-blue-fg">(</span>
    local_dir<span class="ansi-blue-fg">:</span> str<span class="ansi-blue-fg">,</span>
    clone_from<span class="ansi-blue-fg">:</span> Union<span class="ansi-blue-fg">[</span>str<span class="ansi-blue-fg">,</span> NoneType<span class="ansi-blue-fg">]</span> <span class="ansi-blue-fg">=</span> <span class="ansi-green-fg">None</span><span class="ansi-blue-fg">,</span>
    repo_type<span class="ansi-blue-fg">:</span> Union<span class="ansi-blue-fg">[</span>str<span class="ansi-blue-fg">,</span> NoneType<span class="ansi-blue-fg">]</span> <span class="ansi-blue-fg">=</span> <span class="ansi-green-fg">None</span><span class="ansi-blue-fg">,</span>
    use_auth_token<span class="ansi-blue-fg">:</span> Union<span class="ansi-blue-fg">[</span>bool<span class="ansi-blue-fg">,</span> str<span class="ansi-blue-fg">]</span> <span class="ansi-blue-fg">=</span> <span class="ansi-green-fg">True</span><span class="ansi-blue-fg">,</span>
    git_user<span class="ansi-blue-fg">:</span> Union<span class="ansi-blue-fg">[</span>str<span class="ansi-blue-fg">,</span> NoneType<span class="ansi-blue-fg">]</span> <span class="ansi-blue-fg">=</span> <span class="ansi-green-fg">None</span><span class="ansi-blue-fg">,</span>
    git_email<span class="ansi-blue-fg">:</span> Union<span class="ansi-blue-fg">[</span>str<span class="ansi-blue-fg">,</span> NoneType<span class="ansi-blue-fg">]</span> <span class="ansi-blue-fg">=</span> <span class="ansi-green-fg">None</span><span class="ansi-blue-fg">,</span>
    revision<span class="ansi-blue-fg">:</span> Union<span class="ansi-blue-fg">[</span>str<span class="ansi-blue-fg">,</span> NoneType<span class="ansi-blue-fg">]</span> <span class="ansi-blue-fg">=</span> <span class="ansi-green-fg">None</span><span class="ansi-blue-fg">,</span>
    private<span class="ansi-blue-fg">:</span> bool <span class="ansi-blue-fg">=</span> <span class="ansi-green-fg">False</span><span class="ansi-blue-fg">,</span>
    skip_lfs_files<span class="ansi-blue-fg">:</span> bool <span class="ansi-blue-fg">=</span> <span class="ansi-green-fg">False</span><span class="ansi-blue-fg">,</span>
<span class="ansi-blue-fg">)</span>
<span class="ansi-red-fg">Docstring:</span>     
Helper class to wrap the git and git-lfs commands.
The aim is to facilitate interacting with huggingface.co hosted model or dataset repos,
though not a lot here (if any) is actually specific to huggingface.co.
<span class="ansi-red-fg">Init docstring:</span>
Instantiate a local clone of a git repo.
If specifying a `clone_from`:
will clone an existing remote repository, for instance one
that was previously created using ``HfApi().create_repo(name=repo_name)``.
``Repository`` uses the local git credentials by default, but if required, the ``huggingface_token``
as well as the git ``user`` and the ``email`` can be explicitly specified.
If `clone_from` is used, and the repository is being instantiated into a non-empty directory,
e.g. a directory with your trained model files, it will automatically merge them.
Args:
    local_dir (``str``):
        path (e.g. ``'my_trained_model/'``) to the local directory, where the ``Repository`` will be initalized.
    clone_from (``str``, `optional`):
        repository url (e.g. ``'https://huggingface.co/philschmid/playground-tests'``).
    repo_type (``str``, `optional`):
        To set when creating a repo: et to "dataset" or "space" if creating a dataset or space, default is model.
    use_auth_token (``str`` or ``bool``, `optional`, defaults to ``True``):
        huggingface_token can be extract from ``HfApi().login(username, password)`` and is used to authenticate against the hub
        (useful from Google Colab for instance).
    git_user (``str``, `optional`):
        will override the ``git config user.name`` for committing and pushing files to the hub.
    git_email (``str``, `optional`):
        will override the ``git config user.email`` for committing and pushing files to the hub.
    revision (``str``, `optional`):
        Revision to checkout after initializing the repository. If the revision doesn't exist, a
        branch will be created with that revision name from the default branch's current HEAD.
    private (``bool``, `optional`, defaults to ``False``):
        whether the repository is private or not.
    skip_lfs_files (``bool``, `optional`, defaults to ``False``):
        whether to skip git-LFS files or not.
<span class="ansi-red-fg">File:</span>           ~/miniconda3/envs/blog/lib/python3.8/site-packages/huggingface_hub/repository.py
<span class="ansi-red-fg">Type:</span>           type
<span class="ansi-red-fg">Subclasses:</span>     
</pre>
</div>
</div>
</div>
<p>I‚Äôll use <a href="https://huggingface.co/davanstrien/flyswot-test"><code>flyswot-test</code></a> as a way of playing around with this. To start with we can use Repository to clone the current version of the model.</p>
<div id="cell-41" class="cell" data-outputid="f106f222-71a6-4bad-e43b-593709f43d86" data-execution_count="53">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1">repo <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Repository(local_dir<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"flyswot-models"</span>, clone_from<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"davanstrien/flyswot-test"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Cloning https://huggingface.co/davanstrien/flyswot-test into local empty directory.</code></pre>
</div>
</div>
<div id="cell-42" class="cell" data-outputid="986f1396-945a-4316-b944-0583a93305bc" data-execution_count="54">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1">repo</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="54">
<pre><code>&lt;huggingface_hub.repository.Repository at 0x7fb10cccbc10&gt;</code></pre>
</div>
</div>
<p>We‚Äôll need to be logged in to push changes</p>
<div id="cell-44" class="cell" data-outputid="f70be078-3482-4e1b-cc2b-7c9adbb63c78" data-execution_count="35">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> huggingface_hub <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> notebook_login</span>
<span id="cb37-2"></span>
<span id="cb37-3">notebook_login()</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"71f213964f554b978189f49c55f5f74b","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
</div>
<p>To start with let‚Äôs mock making a change to some of the repo files and seeing how we can upload these changes. We can use the <code>Repository</code> class as a context manager to make changes and have them committed to our model repository. Here we update the vocab file to add a new label.</p>
<div id="cell-46" class="cell" data-execution_count="58">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> Repository(</span>
<span id="cb38-2">    local_dir<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"flyswot-models"</span>,</span>
<span id="cb38-3">    clone_from<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"davanstrien/flyswot-test"</span>,</span>
<span id="cb38-4">    git_user<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Daniel van Strien"</span>,</span>
<span id="cb38-5">).commit(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"update model"</span>):</span>
<span id="cb38-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"vocab.txt"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb38-7">        f.write(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"new label"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>/Users/dvanstrien/Documents/daniel/blog/_notebooks/flyswot-models is already a clone of https://huggingface.co/davanstrien/flyswot-test. Make sure you pull the latest changes with `repo.git_pull()`.
Pulling changes ...
To https://huggingface.co/davanstrien/flyswot-test
   e54a742..18d149e  main -&gt; main
</code></pre>
</div>
</div>
<p>This could already be used at the end of our training script. Currently I have some util files that package up the model vocab, convert Pytorch to ONNX etc. This could easily be adapted to also push the updated model to the hub. There is only one thing we might still want to add.</p>
</section>
<section id="adding-more-metadata-creating-revision-branches" class="level3">
<h3 class="anchored" data-anchor-id="adding-more-metadata-creating-revision-branches">Adding more metadata: creating revision branches</h3>
<p>Currently flyswot uses filenames to capture metadata about the model version. The models are versioned using calendar versioning. This works okay but we might be able to manage this in a slightly better way. One of the nice features that <code>hf_hub</code> (the Python library) offers that <code>flyswot</code> currently doesn‚Äôt support well is being able to pass in a specific revision when using <code>snapshot_download</code>. This would then allow someone to run a specific older version of the model. This might be useful for various different scenarios. To do this we‚Äôll create a revision branch for the date the model was created. All that we‚Äôll do now is pass in a formatted date as the revision.</p>
<div id="cell-49" class="cell" data-execution_count="59">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> datetime <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> datetime</span></code></pre></div>
</div>
<div id="cell-50" class="cell" data-outputid="e8d7c7eb-8ee0-42ee-c9c7-3d371571d718" data-execution_count="71">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb41-1">date_now <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> datetime.now()</span>
<span id="cb41-2">now <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> date_now.strftime(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"%Y-%m-</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb41-3">now</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="71">
<pre><code>'2021-12-30'</code></pre>
</div>
</div>
<div id="cell-51" class="cell" data-outputid="e4a92d22-ae97-4988-e978-055cc7d6f5a5" data-execution_count="74">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb43-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> Repository(</span>
<span id="cb43-2">    local_dir<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"flyswot-models"</span>,</span>
<span id="cb43-3">    clone_from<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"davanstrien/flyswot-test"</span>,</span>
<span id="cb43-4">    git_user<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Daniel van Strien"</span>,</span>
<span id="cb43-5">    revision<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>now,</span>
<span id="cb43-6">).commit(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"update model </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>now<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>):</span>
<span id="cb43-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> model <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> Path(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"."</span>).glob(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".onnx"</span>):</span>
<span id="cb43-8">        model.rename(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>now<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">-model.onnx"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>/Users/dvanstrien/Documents/daniel/blog/_notebooks/flyswot-models is already a clone of https://huggingface.co/davanstrien/flyswot-test. Make sure you pull the latest changes with `repo.git_pull()`.
Checked out 2021-12-30 from 2021-12-30.
Your branch is up to date with 'origin/2021-12-30'.

Pulling changes ...
Several commits (2) will be pushed upstream.
The progress bars may be unreliable.
Everything up-to-date
</code></pre>
</div>
</div>
<p>This creates a new revision branch for the current date. Since I also want to have the default branch be the current model we would also push the same model to the default branch. This would then mean that we end up with a bunch of different branches with model snapshots that could be passed in but for the default behavior we can easily grab the latest model by not specifying a revision.</p>


</section>
</section>

 ]]></description>
  <guid>https://danielvanstrien.xyz/posts/post-with-code/2021-12-30-hf-hub-model-storage.html</guid>
  <pubDate>Thu, 30 Dec 2021 00:00:00 GMT</pubDate>
</item>
<item>
  <title>flyswot</title>
  <link>https://danielvanstrien.xyz/posts/plain-text/flyswot/2021-12-22-flyswot.html</link>
  <description><![CDATA[ 




<p>My previous series of posts/notes following the full stack course ended slightly abruptly. However, I didn‚Äôt give up on the dream of trying to get more experience of ‚Äòdeploying‚Äô machine learning in a GLAM setting! One of the things I have been focusing on recently is a project which gave me the chance to use machine learning in somewhat of a production context.</p>
<p>This blog post will be a very short tl;dr on this project.</p>
<section id="detecting-fake-flysheets-using-computer-vision" class="level2">
<h2 class="anchored" data-anchor-id="detecting-fake-flysheets-using-computer-vision">Detecting fake flysheets using computer vision</h2>
<p>The Library has ‚Äòlegacy‚Äô digitised content of manuscripts. Due to some limitations of the legacy system on which these manuscripts were shared many of the images have incorrect metadata. The metadata for these images is partially stored in the filename for the image. In particular many images which didn‚Äôt fit into an available category were given ‚Äòend flysheet‚Äô labels (this basically means part of the filename contains the string <code>fse</code>). These images may actually be other things like a frontcover, a scroll image, a box etc.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://danielvanstrien.xyz/posts/plain-text/flyswot/digitised-manuscripts-screenshot.png" class="img-fluid figure-img"></p>
<figcaption>A screenshot of the digitised manuscript platform showing metadata about the page type of the manuscript</figcaption>
</figure>
</div>
<p>The library is moving to a new platform which won‚Äôt have these restrictions on possible page types. As a result there is a need/desire to find all of the images which have been given a ‚Äòfake‚Äô flysheet label and correct this label with the correct label.</p>
<p>This is a task where computer vision seems like it might be helpful.</p>
</section>
<section id="the-desired-outcome" class="level2">
<h2 class="anchored" data-anchor-id="the-desired-outcome">The desired outcome</h2>
<p>The desire of this project is to be able to use a computer vision model to check a bunch of image directories and see if there are any ‚Äòfake‚Äô flysheets. There are some additional constraints on the project:</p>
<ul>
<li>$$$ this isn‚Äôt a funded project so can‚Äôt involve spending a bunch of money</li>
<li>related to the above, the approach to annotation has to be pragmatic - no Mechanical Turk here</li>
<li>the machine learning should fit into existing workflows (this is something we have/are spending a lot of time on)</li>
</ul>
<p>Since this is intended to be a tl;dr I won‚Äôt go into more detail here about all of these requirements here.</p>
</section>
<section id="flyswot" class="level2">
<h2 class="anchored" data-anchor-id="flyswot">flyswot</h2>
<p>The approach we ended up with is to deploy a model using a command line tool that we‚Äôve called <code>flyswot</code>. This tool can be pointed at a directory and it will recursively check for images which contain the <code>fse</code> pattern in the filename. These images are then checked using a computer vision model that looks check whether an image is a ‚Äòreal‚Äô flysheet or a ‚Äòfake‚Äô flysheet.</p>
</section>
<section id="what-i-have-learned-so-far" class="level2">
<h2 class="anchored" data-anchor-id="what-i-have-learned-so-far">What I have learned (so far)</h2>
<p>This project has been a great way of turning some of the theory of ‚Äòproduction‚Äô ML into practice. In particular I have learned:</p>
<ul>
<li>I‚Äôm super paranoid about domain drift.</li>
<li>(some) of how to use ONNX</li>
<li>More robust testing approaches</li>
<li>DVC (data version control)</li>
<li>and a bunch more things‚Ä¶</li>
</ul>
<p>Most of these things are being documented elsewhere and will be available to share at some point in 2022. However, I will try and use this blog to document small things I‚Äôve learned along the way too. These notes are mainly for myself. There are a lot of little things I‚Äôve picked up from doing this project that I will forget if I don‚Äôt spend a bit of time writting up.</p>


</section>

 ]]></description>
  <category>glam</category>
  <category>flyswot</category>
  <guid>https://danielvanstrien.xyz/posts/plain-text/flyswot/2021-12-22-flyswot.html</guid>
  <pubDate>Wed, 22 Dec 2021 00:00:00 GMT</pubDate>
</item>
</channel>
</rss>
